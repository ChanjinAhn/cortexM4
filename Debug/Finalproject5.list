
Finalproject5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000062c  08004b74  08004b74  00014b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051a0  080051a0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080051a0  080051a0  000151a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051a8  080051a8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051a8  080051a8  000151a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051ac  080051ac  000151ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080051b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000070  08005220  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08005220  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007b4a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001898  00000000  00000000  00027bea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000610  00000000  00000000  00029488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000548  00000000  00000000  00029a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021247  00000000  00000000  00029fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000777a  00000000  00000000  0004b227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1ec6  00000000  00000000  000529a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00114867  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000241c  00000000  00000000  001148bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004b5c 	.word	0x08004b5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004b5c 	.word	0x08004b5c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <GetSBox>:

#define SWAP(T,A,B)         {T=A; A=B; B=T;}
#define ROTATE(T,A,B,C,D)   {T=A; A=B; B=C; C=D; D=T;}


LOCAL(VOID) GetSBox(LPBYTE TA) {
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
    };

    TA[0] = SBox[TA[0]];
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	461a      	mov	r2, r3
 80005a6:	4b12      	ldr	r3, [pc, #72]	; (80005f0 <GetSBox+0x58>)
 80005a8:	5c9a      	ldrb	r2, [r3, r2]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	701a      	strb	r2, [r3, #0]
    TA[1] = SBox[TA[1]];
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	3301      	adds	r3, #1
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	4619      	mov	r1, r3
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	3301      	adds	r3, #1
 80005ba:	4a0d      	ldr	r2, [pc, #52]	; (80005f0 <GetSBox+0x58>)
 80005bc:	5c52      	ldrb	r2, [r2, r1]
 80005be:	701a      	strb	r2, [r3, #0]
    TA[2] = SBox[TA[2]];
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	3302      	adds	r3, #2
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	4619      	mov	r1, r3
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	3302      	adds	r3, #2
 80005cc:	4a08      	ldr	r2, [pc, #32]	; (80005f0 <GetSBox+0x58>)
 80005ce:	5c52      	ldrb	r2, [r2, r1]
 80005d0:	701a      	strb	r2, [r3, #0]
    TA[3] = SBox[TA[3]];
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	3303      	adds	r3, #3
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	4619      	mov	r1, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	3303      	adds	r3, #3
 80005de:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <GetSBox+0x58>)
 80005e0:	5c52      	ldrb	r2, [r2, r1]
 80005e2:	701a      	strb	r2, [r3, #0]
}
 80005e4:	bf00      	nop
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	08004ecc 	.word	0x08004ecc

080005f4 <KeyExpansion>:


LOCAL(VOID) KeyExpansion(LPBYTE ExpKey, LPCBYTE Key) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	6039      	str	r1, [r7, #0]
	BYTE TA[4];
	static CONST BYTE Rcon[11]= { 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36 };

	memcpy(ExpKey, Key, KEYLEN);
 80005fe:	2210      	movs	r2, #16
 8000600:	6839      	ldr	r1, [r7, #0]
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f002 fc14 	bl	8002e30 <memcpy>

	for (int i = KEYLEN; i < KEYEXPSIZE; i += 4) {
 8000608:	2310      	movs	r3, #16
 800060a:	617b      	str	r3, [r7, #20]
 800060c:	e05d      	b.n	80006ca <KeyExpansion+0xd6>
		memcpy(TA, ExpKey + i - 4, 4);
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	3b04      	subs	r3, #4
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	4413      	add	r3, r2
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	60fb      	str	r3, [r7, #12]

		if (i % KEYLEN == 0) {
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	f003 030f 	and.w	r3, r3, #15
 8000620:	2b00      	cmp	r3, #0
 8000622:	d11b      	bne.n	800065c <KeyExpansion+0x68>
			int T = TA[0];
 8000624:	7b3b      	ldrb	r3, [r7, #12]
 8000626:	613b      	str	r3, [r7, #16]
			TA[0] = TA[1];
 8000628:	7b7b      	ldrb	r3, [r7, #13]
 800062a:	733b      	strb	r3, [r7, #12]
			TA[1] = TA[2];
 800062c:	7bbb      	ldrb	r3, [r7, #14]
 800062e:	737b      	strb	r3, [r7, #13]
			TA[2] = TA[3];
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	73bb      	strb	r3, [r7, #14]
			TA[3] = T;
 8000634:	693b      	ldr	r3, [r7, #16]
 8000636:	b2db      	uxtb	r3, r3
 8000638:	73fb      	strb	r3, [r7, #15]

			GetSBox(TA);
 800063a:	f107 030c 	add.w	r3, r7, #12
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff ffaa 	bl	8000598 <GetSBox>
			TA[0] ^= Rcon[i / KEYLEN];
 8000644:	7b3a      	ldrb	r2, [r7, #12]
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	2b00      	cmp	r3, #0
 800064a:	da00      	bge.n	800064e <KeyExpansion+0x5a>
 800064c:	330f      	adds	r3, #15
 800064e:	111b      	asrs	r3, r3, #4
 8000650:	4619      	mov	r1, r3
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <KeyExpansion+0xe8>)
 8000654:	5c5b      	ldrb	r3, [r3, r1]
 8000656:	4053      	eors	r3, r2
 8000658:	b2db      	uxtb	r3, r3
 800065a:	733b      	strb	r3, [r7, #12]
		}
		#if defined(AES256)
		if (i % KEYLEN == 16) GetSBox(TA);
		#endif
		ExpKey[i + 0] = ExpKey[i - KEYLEN + 0] ^ TA[0];
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	3b10      	subs	r3, #16
 8000660:	461a      	mov	r2, r3
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4413      	add	r3, r2
 8000666:	7819      	ldrb	r1, [r3, #0]
 8000668:	7b3a      	ldrb	r2, [r7, #12]
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	4403      	add	r3, r0
 8000670:	404a      	eors	r2, r1
 8000672:	b2d2      	uxtb	r2, r2
 8000674:	701a      	strb	r2, [r3, #0]
		ExpKey[i + 1] = ExpKey[i - KEYLEN + 1] ^ TA[1];
 8000676:	697b      	ldr	r3, [r7, #20]
 8000678:	3b0f      	subs	r3, #15
 800067a:	687a      	ldr	r2, [r7, #4]
 800067c:	4413      	add	r3, r2
 800067e:	7819      	ldrb	r1, [r3, #0]
 8000680:	7b7a      	ldrb	r2, [r7, #13]
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	3301      	adds	r3, #1
 8000686:	6878      	ldr	r0, [r7, #4]
 8000688:	4403      	add	r3, r0
 800068a:	404a      	eors	r2, r1
 800068c:	b2d2      	uxtb	r2, r2
 800068e:	701a      	strb	r2, [r3, #0]
		ExpKey[i + 2] = ExpKey[i - KEYLEN + 2] ^ TA[2];
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	3b0e      	subs	r3, #14
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	4413      	add	r3, r2
 8000698:	7819      	ldrb	r1, [r3, #0]
 800069a:	7bba      	ldrb	r2, [r7, #14]
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	3302      	adds	r3, #2
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	4403      	add	r3, r0
 80006a4:	404a      	eors	r2, r1
 80006a6:	b2d2      	uxtb	r2, r2
 80006a8:	701a      	strb	r2, [r3, #0]
		ExpKey[i + 3] = ExpKey[i - KEYLEN + 3] ^ TA[3];
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	3b0d      	subs	r3, #13
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	4413      	add	r3, r2
 80006b2:	7819      	ldrb	r1, [r3, #0]
 80006b4:	7bfa      	ldrb	r2, [r7, #15]
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	3303      	adds	r3, #3
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	4403      	add	r3, r0
 80006be:	404a      	eors	r2, r1
 80006c0:	b2d2      	uxtb	r2, r2
 80006c2:	701a      	strb	r2, [r3, #0]
	for (int i = KEYLEN; i < KEYEXPSIZE; i += 4) {
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	3304      	adds	r3, #4
 80006c8:	617b      	str	r3, [r7, #20]
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	2baf      	cmp	r3, #175	; 0xaf
 80006ce:	dd9e      	ble.n	800060e <KeyExpansion+0x1a>
	}
}
 80006d0:	bf00      	nop
 80006d2:	bf00      	nop
 80006d4:	3718      	adds	r7, #24
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	08004fcc 	.word	0x08004fcc

080006e0 <AddRoundKey>:

LOCAL(VOID) AddRoundKey(BYTE State[4][4], LPBYTE ExpKey, BYTE Round) {
 80006e0:	b480      	push	{r7}
 80006e2:	b087      	sub	sp, #28
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	60b9      	str	r1, [r7, #8]
 80006ea:	4613      	mov	r3, r2
 80006ec:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < 4; i++)
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
 80006f2:	e027      	b.n	8000744 <AddRoundKey+0x64>
		for (int j = 0; j < 4; j++)
 80006f4:	2300      	movs	r3, #0
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	e01e      	b.n	8000738 <AddRoundKey+0x58>
			State[i][j] ^= ExpKey[Round*4*4 + i*4 + j];
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	68fa      	ldr	r2, [r7, #12]
 8000700:	441a      	add	r2, r3
 8000702:	693b      	ldr	r3, [r7, #16]
 8000704:	4413      	add	r3, r2
 8000706:	7819      	ldrb	r1, [r3, #0]
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	009a      	lsls	r2, r3, #2
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	4413      	add	r3, r2
 8000710:	009a      	lsls	r2, r3, #2
 8000712:	693b      	ldr	r3, [r7, #16]
 8000714:	4413      	add	r3, r2
 8000716:	461a      	mov	r2, r3
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	4413      	add	r3, r2
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	697a      	ldr	r2, [r7, #20]
 8000720:	0092      	lsls	r2, r2, #2
 8000722:	68f8      	ldr	r0, [r7, #12]
 8000724:	4402      	add	r2, r0
 8000726:	404b      	eors	r3, r1
 8000728:	b2d9      	uxtb	r1, r3
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	4413      	add	r3, r2
 800072e:	460a      	mov	r2, r1
 8000730:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 4; j++)
 8000732:	693b      	ldr	r3, [r7, #16]
 8000734:	3301      	adds	r3, #1
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	693b      	ldr	r3, [r7, #16]
 800073a:	2b03      	cmp	r3, #3
 800073c:	dddd      	ble.n	80006fa <AddRoundKey+0x1a>
	for (int i = 0; i < 4; i++)
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	3301      	adds	r3, #1
 8000742:	617b      	str	r3, [r7, #20]
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	2b03      	cmp	r3, #3
 8000748:	ddd4      	ble.n	80006f4 <AddRoundKey+0x14>
}
 800074a:	bf00      	nop
 800074c:	bf00      	nop
 800074e:	371c      	adds	r7, #28
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr

08000758 <SubBytes>:

LOCAL(VOID) SubBytes(BYTE State[4][4]) {
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 4; i++) GetSBox(State[i]);
 8000760:	2300      	movs	r3, #0
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	e009      	b.n	800077a <SubBytes+0x22>
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	687a      	ldr	r2, [r7, #4]
 800076c:	4413      	add	r3, r2
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff ff12 	bl	8000598 <GetSBox>
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	3301      	adds	r3, #1
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	2b03      	cmp	r3, #3
 800077e:	ddf2      	ble.n	8000766 <SubBytes+0xe>
}
 8000780:	bf00      	nop
 8000782:	bf00      	nop
 8000784:	3710      	adds	r7, #16
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <ShiftRows>:

LOCAL(VOID) ShiftRows(BYTE State[4][4]) {
 800078a:	b480      	push	{r7}
 800078c:	b085      	sub	sp, #20
 800078e:	af00      	add	r7, sp, #0
 8000790:	6078      	str	r0, [r7, #4]
	BYTE T;

	ROTATE(T, State[0][1], State[1][1], State[2][1], State[3][1]);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	785b      	ldrb	r3, [r3, #1]
 8000796:	73fb      	strb	r3, [r7, #15]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	3304      	adds	r3, #4
 800079c:	785a      	ldrb	r2, [r3, #1]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	705a      	strb	r2, [r3, #1]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	f103 0208 	add.w	r2, r3, #8
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	3304      	adds	r3, #4
 80007ac:	7852      	ldrb	r2, [r2, #1]
 80007ae:	705a      	strb	r2, [r3, #1]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f103 020c 	add.w	r2, r3, #12
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	3308      	adds	r3, #8
 80007ba:	7852      	ldrb	r2, [r2, #1]
 80007bc:	705a      	strb	r2, [r3, #1]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	330c      	adds	r3, #12
 80007c2:	7bfa      	ldrb	r2, [r7, #15]
 80007c4:	705a      	strb	r2, [r3, #1]

	SWAP(T, State[0][2], State[2][2]);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	789b      	ldrb	r3, [r3, #2]
 80007ca:	73fb      	strb	r3, [r7, #15]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	3308      	adds	r3, #8
 80007d0:	789a      	ldrb	r2, [r3, #2]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	709a      	strb	r2, [r3, #2]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	3308      	adds	r3, #8
 80007da:	7bfa      	ldrb	r2, [r7, #15]
 80007dc:	709a      	strb	r2, [r3, #2]
	SWAP(T, State[1][2], State[3][2]);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	3304      	adds	r3, #4
 80007e2:	789b      	ldrb	r3, [r3, #2]
 80007e4:	73fb      	strb	r3, [r7, #15]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	f103 020c 	add.w	r2, r3, #12
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3304      	adds	r3, #4
 80007f0:	7892      	ldrb	r2, [r2, #2]
 80007f2:	709a      	strb	r2, [r3, #2]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	330c      	adds	r3, #12
 80007f8:	7bfa      	ldrb	r2, [r7, #15]
 80007fa:	709a      	strb	r2, [r3, #2]

	ROTATE(T, State[0][3], State[3][3], State[2][3], State[1][3]);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	78db      	ldrb	r3, [r3, #3]
 8000800:	73fb      	strb	r3, [r7, #15]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	330c      	adds	r3, #12
 8000806:	78da      	ldrb	r2, [r3, #3]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	70da      	strb	r2, [r3, #3]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f103 0208 	add.w	r2, r3, #8
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	330c      	adds	r3, #12
 8000816:	78d2      	ldrb	r2, [r2, #3]
 8000818:	70da      	strb	r2, [r3, #3]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	1d1a      	adds	r2, r3, #4
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	3308      	adds	r3, #8
 8000822:	78d2      	ldrb	r2, [r2, #3]
 8000824:	70da      	strb	r2, [r3, #3]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	3304      	adds	r3, #4
 800082a:	7bfa      	ldrb	r2, [r7, #15]
 800082c:	70da      	strb	r2, [r3, #3]
}
 800082e:	bf00      	nop
 8000830:	3714      	adds	r7, #20
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr

0800083a <XTime>:
	SWAP(T, State[1][2], State[3][2]);

	ROTATE(T, State[0][3], State[1][3], State[2][3], State[3][3]);
}

LOCAL(int) XTime(int X) {
 800083a:	b480      	push	{r7}
 800083c:	b083      	sub	sp, #12
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
	return ((X<<1) & 0xFF) ^ (((X>>7)&1)*0x1B);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	b2d9      	uxtb	r1, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	11db      	asrs	r3, r3, #7
 800084c:	f003 0201 	and.w	r2, r3, #1
 8000850:	4613      	mov	r3, r2
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	4413      	add	r3, r2
 8000856:	00da      	lsls	r2, r3, #3
 8000858:	4413      	add	r3, r2
 800085a:	404b      	eors	r3, r1
}
 800085c:	4618      	mov	r0, r3
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <MixColumns>:

LOCAL(VOID) MixColumns(BYTE State[4][4]) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 4; i++) {
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
 8000874:	e0a7      	b.n	80009c6 <MixColumns+0x15e>
		int T1 = State[i][0];
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	4413      	add	r3, r2
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	613b      	str	r3, [r7, #16]
		int T2 = State[i][0] ^ State[i][1] ^ State[i][2] ^ State[i][3];
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	4413      	add	r3, r2
 800088a:	781a      	ldrb	r2, [r3, #0]
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	6879      	ldr	r1, [r7, #4]
 8000892:	440b      	add	r3, r1
 8000894:	785b      	ldrb	r3, [r3, #1]
 8000896:	4053      	eors	r3, r2
 8000898:	b2da      	uxtb	r2, r3
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	6879      	ldr	r1, [r7, #4]
 80008a0:	440b      	add	r3, r1
 80008a2:	789b      	ldrb	r3, [r3, #2]
 80008a4:	4053      	eors	r3, r2
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	6879      	ldr	r1, [r7, #4]
 80008ae:	440b      	add	r3, r1
 80008b0:	78db      	ldrb	r3, [r3, #3]
 80008b2:	4053      	eors	r3, r2
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	60fb      	str	r3, [r7, #12]
		State[i][0] ^= XTime(State[i][0] ^ State[i][1]) ^ T2;
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	4413      	add	r3, r2
 80008c0:	781a      	ldrb	r2, [r3, #0]
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	6879      	ldr	r1, [r7, #4]
 80008c8:	440b      	add	r3, r1
 80008ca:	785b      	ldrb	r3, [r3, #1]
 80008cc:	4053      	eors	r3, r2
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff ffb2 	bl	800083a <XTime>
 80008d6:	4602      	mov	r2, r0
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	ea82 0103 	eor.w	r1, r2, r3
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	4413      	add	r3, r2
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	b25a      	sxtb	r2, r3
 80008ea:	b24b      	sxtb	r3, r1
 80008ec:	4053      	eors	r3, r2
 80008ee:	b259      	sxtb	r1, r3
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	687a      	ldr	r2, [r7, #4]
 80008f6:	4413      	add	r3, r2
 80008f8:	b2ca      	uxtb	r2, r1
 80008fa:	701a      	strb	r2, [r3, #0]
		State[i][1] ^= XTime(State[i][1] ^ State[i][2]) ^ T2;
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	687a      	ldr	r2, [r7, #4]
 8000902:	4413      	add	r3, r2
 8000904:	785a      	ldrb	r2, [r3, #1]
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	6879      	ldr	r1, [r7, #4]
 800090c:	440b      	add	r3, r1
 800090e:	789b      	ldrb	r3, [r3, #2]
 8000910:	4053      	eors	r3, r2
 8000912:	b2db      	uxtb	r3, r3
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ff90 	bl	800083a <XTime>
 800091a:	4602      	mov	r2, r0
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	ea82 0103 	eor.w	r1, r2, r3
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	4413      	add	r3, r2
 800092a:	785b      	ldrb	r3, [r3, #1]
 800092c:	b25a      	sxtb	r2, r3
 800092e:	b24b      	sxtb	r3, r1
 8000930:	4053      	eors	r3, r2
 8000932:	b259      	sxtb	r1, r3
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	4413      	add	r3, r2
 800093c:	b2ca      	uxtb	r2, r1
 800093e:	705a      	strb	r2, [r3, #1]
		State[i][2] ^= XTime(State[i][2] ^ State[i][3]) ^ T2;
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	687a      	ldr	r2, [r7, #4]
 8000946:	4413      	add	r3, r2
 8000948:	789a      	ldrb	r2, [r3, #2]
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	6879      	ldr	r1, [r7, #4]
 8000950:	440b      	add	r3, r1
 8000952:	78db      	ldrb	r3, [r3, #3]
 8000954:	4053      	eors	r3, r2
 8000956:	b2db      	uxtb	r3, r3
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff ff6e 	bl	800083a <XTime>
 800095e:	4602      	mov	r2, r0
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	ea82 0103 	eor.w	r1, r2, r3
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	687a      	ldr	r2, [r7, #4]
 800096c:	4413      	add	r3, r2
 800096e:	789b      	ldrb	r3, [r3, #2]
 8000970:	b25a      	sxtb	r2, r3
 8000972:	b24b      	sxtb	r3, r1
 8000974:	4053      	eors	r3, r2
 8000976:	b259      	sxtb	r1, r3
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	4413      	add	r3, r2
 8000980:	b2ca      	uxtb	r2, r1
 8000982:	709a      	strb	r2, [r3, #2]
		State[i][3] ^= XTime(State[i][3] ^ T1) ^ T2;
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	4413      	add	r3, r2
 800098c:	78db      	ldrb	r3, [r3, #3]
 800098e:	461a      	mov	r2, r3
 8000990:	693b      	ldr	r3, [r7, #16]
 8000992:	4053      	eors	r3, r2
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff ff50 	bl	800083a <XTime>
 800099a:	4602      	mov	r2, r0
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	ea82 0103 	eor.w	r1, r2, r3
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	687a      	ldr	r2, [r7, #4]
 80009a8:	4413      	add	r3, r2
 80009aa:	78db      	ldrb	r3, [r3, #3]
 80009ac:	b25a      	sxtb	r2, r3
 80009ae:	b24b      	sxtb	r3, r1
 80009b0:	4053      	eors	r3, r2
 80009b2:	b259      	sxtb	r1, r3
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	687a      	ldr	r2, [r7, #4]
 80009ba:	4413      	add	r3, r2
 80009bc:	b2ca      	uxtb	r2, r1
 80009be:	70da      	strb	r2, [r3, #3]
	for (int i = 0; i < 4; i++) {
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	3301      	adds	r3, #1
 80009c4:	617b      	str	r3, [r7, #20]
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	2b03      	cmp	r3, #3
 80009ca:	f77f af54 	ble.w	8000876 <MixColumns+0xe>
	}
}
 80009ce:	bf00      	nop
 80009d0:	bf00      	nop
 80009d2:	3718      	adds	r7, #24
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <Cipher>:

	for (int i = 0; i < 4; i++)
		for (int j = 0; j < 4; j++) State[j][i] = SBoxInvert[State[j][i]];
}

LOCAL(VOID) Cipher(BYTE State[4][4], LPBYTE ExpKey) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	6039      	str	r1, [r7, #0]
	AddRoundKey(State, ExpKey, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	6839      	ldr	r1, [r7, #0]
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff fe7a 	bl	80006e0 <AddRoundKey>

	for (int Round = 1; Round < Nr; Round++) {
 80009ec:	2301      	movs	r3, #1
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	e012      	b.n	8000a18 <Cipher+0x40>
		SubBytes(State);
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f7ff feb0 	bl	8000758 <SubBytes>
		ShiftRows(State);
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f7ff fec6 	bl	800078a <ShiftRows>
		MixColumns(State);
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f7ff ff32 	bl	8000868 <MixColumns>
		AddRoundKey(State, ExpKey, Round);
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	461a      	mov	r2, r3
 8000a0a:	6839      	ldr	r1, [r7, #0]
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f7ff fe67 	bl	80006e0 <AddRoundKey>
	for (int Round = 1; Round < Nr; Round++) {
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	3301      	adds	r3, #1
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	2b09      	cmp	r3, #9
 8000a1c:	dde9      	ble.n	80009f2 <Cipher+0x1a>
	}

	SubBytes(State);
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f7ff fe9a 	bl	8000758 <SubBytes>
	ShiftRows(State);
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f7ff feb0 	bl	800078a <ShiftRows>
	AddRoundKey(State, ExpKey, Nr);
 8000a2a:	220a      	movs	r2, #10
 8000a2c:	6839      	ldr	r1, [r7, #0]
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f7ff fe56 	bl	80006e0 <AddRoundKey>
}
 8000a34:	bf00      	nop
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <AES_ECB_Encrypt>:
}
#endif

// ECB
#if ECB
VOID WINAPI AES_ECB_Encrypt(LPCBYTE Input, LPCBYTE Key, LPBYTE Output, int Length) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b0b0      	sub	sp, #192	; 0xc0
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
 8000a48:	603b      	str	r3, [r7, #0]
	BYTE ExpKey[KEYEXPSIZE];

	memcpy(Output, Input, Length);
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	68f9      	ldr	r1, [r7, #12]
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f002 f9ed 	bl	8002e30 <memcpy>
	KeyExpansion(ExpKey, Key);
 8000a56:	f107 0310 	add.w	r3, r7, #16
 8000a5a:	68b9      	ldr	r1, [r7, #8]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fdc9 	bl	80005f4 <KeyExpansion>
	Cipher((BYTE(*)[4])Output, ExpKey);
 8000a62:	f107 0310 	add.w	r3, r7, #16
 8000a66:	4619      	mov	r1, r3
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f7ff ffb5 	bl	80009d8 <Cipher>
}
 8000a6e:	bf00      	nop
 8000a70:	37c0      	adds	r7, #192	; 0xc0
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <hexToAscii>:
}


//1byte 단위로 변환

char* hexToAscii(const char* hexString) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08a      	sub	sp, #40	; 0x28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
    int len = strlen(hexString);
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f7ff fbaf 	bl	80001e4 <strlen>
 8000a86:	4603      	mov	r3, r0
 8000a88:	61fb      	str	r3, [r7, #28]
    if (len % 2 != 0) {
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	f003 0301 	and.w	r3, r3, #1
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d00f      	beq.n	8000ab4 <hexToAscii+0x3c>
        char* error = malloc(strlen("error") + 1); // "error" 문자열을 저장할 메모리를 동적으로 할당
 8000a94:	2006      	movs	r0, #6
 8000a96:	f002 f9c3 	bl	8002e20 <malloc>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	613b      	str	r3, [r7, #16]
        if (error != NULL) {
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d005      	beq.n	8000ab0 <hexToAscii+0x38>
            strcpy(error, "error");
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	4a27      	ldr	r2, [pc, #156]	; (8000b44 <hexToAscii+0xcc>)
 8000aa8:	6810      	ldr	r0, [r2, #0]
 8000aaa:	6018      	str	r0, [r3, #0]
 8000aac:	8892      	ldrh	r2, [r2, #4]
 8000aae:	809a      	strh	r2, [r3, #4]
        }
        return error; // 동적으로 할당된 "error" 문자열을 포인터로 반환
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	e042      	b.n	8000b3a <hexToAscii+0xc2>
    }

    char* result = malloc(len / 2 + 1); // 변환된 문자열을 저장할 충분한 크기의 메모리를 동적으로 할당
 8000ab4:	69fb      	ldr	r3, [r7, #28]
 8000ab6:	0fda      	lsrs	r2, r3, #31
 8000ab8:	4413      	add	r3, r2
 8000aba:	105b      	asrs	r3, r3, #1
 8000abc:	3301      	adds	r3, #1
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f002 f9ae 	bl	8002e20 <malloc>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	61bb      	str	r3, [r7, #24]
    if (result == NULL) {
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d101      	bne.n	8000ad2 <hexToAscii+0x5a>
        return "memory allocation error";
 8000ace:	4b1e      	ldr	r3, [pc, #120]	; (8000b48 <hexToAscii+0xd0>)
 8000ad0:	e033      	b.n	8000b3a <hexToAscii+0xc2>
    }

    for (int i = 0, j = 0; i < len; i += 2, j++) {
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	623b      	str	r3, [r7, #32]
 8000ada:	e020      	b.n	8000b1e <hexToAscii+0xa6>
        char hex[3] = {hexString[i], hexString[i + 1], '\0'};
 8000adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	733b      	strb	r3, [r7, #12]
 8000ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae8:	3301      	adds	r3, #1
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	4413      	add	r3, r2
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	737b      	strb	r3, [r7, #13]
 8000af2:	2300      	movs	r3, #0
 8000af4:	73bb      	strb	r3, [r7, #14]
        int asciiValue = strtol(hex, NULL, 16);
 8000af6:	f107 030c 	add.w	r3, r7, #12
 8000afa:	2210      	movs	r2, #16
 8000afc:	2100      	movs	r1, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f002 fbe6 	bl	80032d0 <strtol>
 8000b04:	6178      	str	r0, [r7, #20]
        result[j] = (char)asciiValue;
 8000b06:	6a3b      	ldr	r3, [r7, #32]
 8000b08:	69ba      	ldr	r2, [r7, #24]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	697a      	ldr	r2, [r7, #20]
 8000b0e:	b2d2      	uxtb	r2, r2
 8000b10:	701a      	strb	r2, [r3, #0]
    for (int i = 0, j = 0; i < len; i += 2, j++) {
 8000b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b14:	3302      	adds	r3, #2
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
 8000b18:	6a3b      	ldr	r3, [r7, #32]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	623b      	str	r3, [r7, #32]
 8000b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	dbda      	blt.n	8000adc <hexToAscii+0x64>
    }
    result[len / 2] = '\0'; // 문자열의 끝을 나타내는 NULL 문자를 추가
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	0fda      	lsrs	r2, r3, #31
 8000b2a:	4413      	add	r3, r2
 8000b2c:	105b      	asrs	r3, r3, #1
 8000b2e:	461a      	mov	r2, r3
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	4413      	add	r3, r2
 8000b34:	2200      	movs	r2, #0
 8000b36:	701a      	strb	r2, [r3, #0]

    return result;
 8000b38:	69bb      	ldr	r3, [r7, #24]
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3728      	adds	r7, #40	; 0x28
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	08004cb4 	.word	0x08004cb4
 8000b48:	08004cbc 	.word	0x08004cbc

08000b4c <main>:
#include "AES.C"



int main(void)
{
 8000b4c:	b5b0      	push	{r4, r5, r7, lr}
 8000b4e:	f6ad 1d88 	subw	sp, sp, #2440	; 0x988
 8000b52:	af00      	add	r7, sp, #0
//	};
	/* USER CODE BEGIN 1 */
	/* USER CODE END 1 */
	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b54:	f001 f9d4 	bl	8001f00 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */
	/* Configure the system clock */
	SystemClock_Config();
 8000b58:	f000 fd42 	bl	80015e0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */
	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b5c:	f000 fd9e 	bl	800169c <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */
	TextlcdInit();
 8000b60:	f001 f972 	bl	8001e48 <TextlcdInit>
	bool condition1=true;
 8000b64:	2301      	movs	r3, #1
 8000b66:	f887 3987 	strb.w	r3, [r7, #2439]	; 0x987
	char value1[48];
	char value2[48];
	char value3[48];
	char value4[16];
	char value5[16];
	char* animation[16]={
 8000b6a:	f607 034c 	addw	r3, r7, #2124	; 0x84c
 8000b6e:	4ac3      	ldr	r2, [pc, #780]	; (8000e7c <main+0x330>)
 8000b70:	461c      	mov	r4, r3
 8000b72:	4615      	mov	r5, r2
 8000b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b80:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000b84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			"    \\       /   ",
			"     |       -  ",
			"      /       \\ ",
			"       -       |"
						};
	char *In = calloc(1024, sizeof(char));
 8000b88:	2101      	movs	r1, #1
 8000b8a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000b8e:	f002 f915 	bl	8002dbc <calloc>
 8000b92:	4603      	mov	r3, r0
 8000b94:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
	int init_len = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
	BYTE Key[] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
 8000b9e:	f607 033c 	addw	r3, r7, #2108	; 0x83c
 8000ba2:	4ab7      	ldr	r2, [pc, #732]	; (8000e80 <main+0x334>)
 8000ba4:	461c      	mov	r4, r3
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000baa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	BYTE ENC[1024];
	BYTE DEC[1024];

	//시작 화면
	clearScreen(ALL_LINE);
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f001 f8e3 	bl	8001d7a <clearScreen>
	writeTextLine(LINE_1, "Press any button");
 8000bb4:	49b3      	ldr	r1, [pc, #716]	; (8000e84 <main+0x338>)
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	f001 f94c 	bl	8001e54 <writeTextLine>
	int i=0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
	int j=0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
	writeTextLine(LINE_2, animation[0]);
 8000bc8:	f607 034c 	addw	r3, r7, #2124	; 0x84c
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4619      	mov	r1, r3
 8000bd0:	2002      	movs	r0, #2
 8000bd2:	f001 f93f 	bl	8001e54 <writeTextLine>
	while(PushBtnRead()==-1){
 8000bd6:	e021      	b.n	8000c1c <main+0xd0>
		i++;
 8000bd8:	f8d7 397c 	ldr.w	r3, [r7, #2428]	; 0x97c
 8000bdc:	3301      	adds	r3, #1
 8000bde:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
		if(i==2){
 8000be2:	f8d7 397c 	ldr.w	r3, [r7, #2428]	; 0x97c
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	d118      	bne.n	8000c1c <main+0xd0>
			i=0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
			j++;
 8000bf0:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
			writeTextLine(LINE_2, animation[j]);
 8000bfa:	f607 034c 	addw	r3, r7, #2124	; 0x84c
 8000bfe:	f8d7 2978 	ldr.w	r2, [r7, #2424]	; 0x978
 8000c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c06:	4619      	mov	r1, r3
 8000c08:	2002      	movs	r0, #2
 8000c0a:	f001 f923 	bl	8001e54 <writeTextLine>
			if(j==15){j=0;}
 8000c0e:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 8000c12:	2b0f      	cmp	r3, #15
 8000c14:	d102      	bne.n	8000c1c <main+0xd0>
 8000c16:	2300      	movs	r3, #0
 8000c18:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
	while(PushBtnRead()==-1){
 8000c1c:	f000 fd98 	bl	8001750 <PushBtnRead>
 8000c20:	4603      	mov	r3, r0
 8000c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c26:	d0d7      	beq.n	8000bd8 <main+0x8c>
		}

	}
	clearScreen(ALL_LINE);
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f001 f8a6 	bl	8001d7a <clearScreen>
	 writeTextLine(LINE_1, "<-This buttons ");
 8000c2e:	4996      	ldr	r1, [pc, #600]	; (8000e88 <main+0x33c>)
 8000c30:	2001      	movs	r0, #1
 8000c32:	f001 f90f 	bl	8001e54 <writeTextLine>
	 writeTextLine(LINE_2, "are 0~f hex.   /");
 8000c36:	4995      	ldr	r1, [pc, #596]	; (8000e8c <main+0x340>)
 8000c38:	2002      	movs	r0, #2
 8000c3a:	f001 f90b 	bl	8001e54 <writeTextLine>
	 HAL_Delay(3000);
 8000c3e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000c42:	f001 f9cf 	bl	8001fe4 <HAL_Delay>
	 clearScreen(ALL_LINE);
 8000c46:	2000      	movs	r0, #0
 8000c48:	f001 f897 	bl	8001d7a <clearScreen>
	 writeTextLine(LINE_1, "0)Find inverse");
 8000c4c:	4990      	ldr	r1, [pc, #576]	; (8000e90 <main+0x344>)
 8000c4e:	2001      	movs	r0, #1
 8000c50:	f001 f900 	bl	8001e54 <writeTextLine>
	 writeTextLine(LINE_2, "1)AES encryption");
 8000c54:	498f      	ldr	r1, [pc, #572]	; (8000e94 <main+0x348>)
 8000c56:	2002      	movs	r0, #2
 8000c58:	f001 f8fc 	bl	8001e54 <writeTextLine>



	while (condition1){
 8000c5c:	f000 bc9d 	b.w	800159a <main+0xa4e>
		button = PushBtnRead();
 8000c60:	f000 fd76 	bl	8001750 <PushBtnRead>
 8000c64:	f8c7 0980 	str.w	r0, [r7, #2432]	; 0x980

		//inverse 찾기
		if(button==0){
 8000c68:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	f040 8129 	bne.w	8000ec4 <main+0x378>
			while (PushBtnRead()==button){};
 8000c72:	bf00      	nop
 8000c74:	f000 fd6c 	bl	8001750 <PushBtnRead>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d0f8      	beq.n	8000c74 <main+0x128>
			int a;
			int b;
			clearScreen(ALL_LINE);
 8000c82:	2000      	movs	r0, #0
 8000c84:	f001 f879 	bl	8001d7a <clearScreen>
		    writeTextLine(LINE_1, "Press the button to");
 8000c88:	4983      	ldr	r1, [pc, #524]	; (8000e98 <main+0x34c>)
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	f001 f8e2 	bl	8001e54 <writeTextLine>
		    writeTextLine(LINE_2, "select the byte.");
 8000c90:	4982      	ldr	r1, [pc, #520]	; (8000e9c <main+0x350>)
 8000c92:	2002      	movs	r0, #2
 8000c94:	f001 f8de 	bl	8001e54 <writeTextLine>
			while (condition1){
 8000c98:	e03c      	b.n	8000d14 <main+0x1c8>
				button = PushBtnRead();
 8000c9a:	f000 fd59 	bl	8001750 <PushBtnRead>
 8000c9e:	f8c7 0980 	str.w	r0, [r7, #2432]	; 0x980
				if (button!=-1){
 8000ca2:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8000ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000caa:	d033      	beq.n	8000d14 <main+0x1c8>
					a=button;
 8000cac:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8000cb0:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
					sprintf(value3,"%s","1byte to calcula");
 8000cb4:	f607 03ac 	addw	r3, r7, #2220	; 0x8ac
 8000cb8:	4a79      	ldr	r2, [pc, #484]	; (8000ea0 <main+0x354>)
 8000cba:	497a      	ldr	r1, [pc, #488]	; (8000ea4 <main+0x358>)
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f002 f9c5 	bl	800304c <siprintf>
					sprintf(value4,"%s","-te:0x");
 8000cc2:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 8000cc6:	4a78      	ldr	r2, [pc, #480]	; (8000ea8 <main+0x35c>)
 8000cc8:	4976      	ldr	r1, [pc, #472]	; (8000ea4 <main+0x358>)
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f002 f9be 	bl	800304c <siprintf>
					sprintf(value1,"%x",button);
 8000cd0:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 8000cd4:	f8d7 2980 	ldr.w	r2, [r7, #2432]	; 0x980
 8000cd8:	4974      	ldr	r1, [pc, #464]	; (8000eac <main+0x360>)
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f002 f9b6 	bl	800304c <siprintf>
					strcat(value4, value1);
 8000ce0:	f607 120c 	addw	r2, r7, #2316	; 0x90c
 8000ce4:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 8000ce8:	4611      	mov	r1, r2
 8000cea:	4618      	mov	r0, r3
 8000cec:	f002 fa3f 	bl	800316e <strcat>
					clearScreen(ALL_LINE);
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	f001 f842 	bl	8001d7a <clearScreen>
				    writeTextLine(LINE_1, value3);
 8000cf6:	f607 03ac 	addw	r3, r7, #2220	; 0x8ac
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	f001 f8a9 	bl	8001e54 <writeTextLine>
				    writeTextLine(LINE_2, value4);
 8000d02:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 8000d06:	4619      	mov	r1, r3
 8000d08:	2002      	movs	r0, #2
 8000d0a:	f001 f8a3 	bl	8001e54 <writeTextLine>
				    condition1=false;}
 8000d0e:	2300      	movs	r3, #0
 8000d10:	f887 3987 	strb.w	r3, [r7, #2439]	; 0x987
			while (condition1){
 8000d14:	f897 3987 	ldrb.w	r3, [r7, #2439]	; 0x987
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d1be      	bne.n	8000c9a <main+0x14e>
			}
			while (PushBtnRead()==button){};
 8000d1c:	bf00      	nop
 8000d1e:	f000 fd17 	bl	8001750 <PushBtnRead>
 8000d22:	4602      	mov	r2, r0
 8000d24:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d0f8      	beq.n	8000d1e <main+0x1d2>
			condition1=true;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	f887 3987 	strb.w	r3, [r7, #2439]	; 0x987
			while (condition1){
 8000d32:	e025      	b.n	8000d80 <main+0x234>
				button = PushBtnRead();
 8000d34:	f000 fd0c 	bl	8001750 <PushBtnRead>
 8000d38:	f8c7 0980 	str.w	r0, [r7, #2432]	; 0x980
				if(button!=-1){
 8000d3c:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8000d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d44:	d01c      	beq.n	8000d80 <main+0x234>
					b=button;
 8000d46:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8000d4a:	f8c7 3970 	str.w	r3, [r7, #2416]	; 0x970
					sprintf(value2,"%x",button);
 8000d4e:	f607 03dc 	addw	r3, r7, #2268	; 0x8dc
 8000d52:	f8d7 2980 	ldr.w	r2, [r7, #2432]	; 0x980
 8000d56:	4955      	ldr	r1, [pc, #340]	; (8000eac <main+0x360>)
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f002 f977 	bl	800304c <siprintf>
					strcat(value4, value2);
 8000d5e:	f607 02dc 	addw	r2, r7, #2268	; 0x8dc
 8000d62:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 8000d66:	4611      	mov	r1, r2
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f002 fa00 	bl	800316e <strcat>
					writeTextLine(LINE_2, value4);
 8000d6e:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 8000d72:	4619      	mov	r1, r3
 8000d74:	2002      	movs	r0, #2
 8000d76:	f001 f86d 	bl	8001e54 <writeTextLine>
					condition1=false;}
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	f887 3987 	strb.w	r3, [r7, #2439]	; 0x987
			while (condition1){
 8000d80:	f897 3987 	ldrb.w	r3, [r7, #2439]	; 0x987
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d1d5      	bne.n	8000d34 <main+0x1e8>
			}


				HAL_Delay(1000);
 8000d88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d8c:	f001 f92a 	bl	8001fe4 <HAL_Delay>
				int c = 16 * a + b;
 8000d90:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 8000d94:	011b      	lsls	r3, r3, #4
 8000d96:	f8d7 2970 	ldr.w	r2, [r7, #2416]	; 0x970
 8000d9a:	4413      	add	r3, r2
 8000d9c:	f8c7 393c 	str.w	r3, [r7, #2364]	; 0x93c
				char hexadecimal[4];
				sprintf(hexadecimal, "%02x", c);
 8000da0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000da4:	f8d7 293c 	ldr.w	r2, [r7, #2364]	; 0x93c
 8000da8:	4941      	ldr	r1, [pc, #260]	; (8000eb0 <main+0x364>)
 8000daa:	4618      	mov	r0, r3
 8000dac:	f002 f94e 	bl	800304c <siprintf>
				clearScreen(ALL_LINE);
 8000db0:	2000      	movs	r0, #0
 8000db2:	f000 ffe2 	bl	8001d7a <clearScreen>
				unsigned char hex = 0x01;
 8000db6:	2301      	movs	r3, #1
 8000db8:	f887 396f 	strb.w	r3, [r7, #2415]	; 0x96f
				    do {
				        if (gmul(hex, c) == 1) {
 8000dbc:	f897 396f 	ldrb.w	r3, [r7, #2415]	; 0x96f
 8000dc0:	f8d7 193c 	ldr.w	r1, [r7, #2364]	; 0x93c
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f000 fce5 	bl	8001794 <gmul>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d149      	bne.n	8000e64 <main+0x318>
				            sprintf(value1,"%02x",hex);
 8000dd0:	f897 296f 	ldrb.w	r2, [r7, #2415]	; 0x96f
 8000dd4:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 8000dd8:	4935      	ldr	r1, [pc, #212]	; (8000eb0 <main+0x364>)
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f002 f936 	bl	800304c <siprintf>
				            sprintf(value2,"%s","0x");
 8000de0:	f607 03dc 	addw	r3, r7, #2268	; 0x8dc
 8000de4:	4a33      	ldr	r2, [pc, #204]	; (8000eb4 <main+0x368>)
 8000de6:	492f      	ldr	r1, [pc, #188]	; (8000ea4 <main+0x358>)
 8000de8:	4618      	mov	r0, r3
 8000dea:	f002 f92f 	bl	800304c <siprintf>
							strcat(value2, hexadecimal);
 8000dee:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000df2:	f607 03dc 	addw	r3, r7, #2268	; 0x8dc
 8000df6:	4611      	mov	r1, r2
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f002 f9b8 	bl	800316e <strcat>
							strcat(value2, " is 0x");
 8000dfe:	f607 03dc 	addw	r3, r7, #2268	; 0x8dc
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff f9ee 	bl	80001e4 <strlen>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	f607 03dc 	addw	r3, r7, #2268	; 0x8dc
 8000e10:	4413      	add	r3, r2
 8000e12:	4a29      	ldr	r2, [pc, #164]	; (8000eb8 <main+0x36c>)
 8000e14:	6810      	ldr	r0, [r2, #0]
 8000e16:	6018      	str	r0, [r3, #0]
 8000e18:	8891      	ldrh	r1, [r2, #4]
 8000e1a:	7992      	ldrb	r2, [r2, #6]
 8000e1c:	8099      	strh	r1, [r3, #4]
 8000e1e:	719a      	strb	r2, [r3, #6]
							strcat(value2, value1);
 8000e20:	f607 120c 	addw	r2, r7, #2316	; 0x90c
 8000e24:	f607 03dc 	addw	r3, r7, #2268	; 0x8dc
 8000e28:	4611      	mov	r1, r2
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f002 f99f 	bl	800316e <strcat>
							strcat(value2, ".");
 8000e30:	f607 03dc 	addw	r3, r7, #2268	; 0x8dc
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff f9d5 	bl	80001e4 <strlen>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	f607 03dc 	addw	r3, r7, #2268	; 0x8dc
 8000e42:	4413      	add	r3, r2
 8000e44:	491d      	ldr	r1, [pc, #116]	; (8000ebc <main+0x370>)
 8000e46:	461a      	mov	r2, r3
 8000e48:	460b      	mov	r3, r1
 8000e4a:	881b      	ldrh	r3, [r3, #0]
 8000e4c:	8013      	strh	r3, [r2, #0]
							writeTextLine(LINE_1, "The inverse of");
 8000e4e:	491c      	ldr	r1, [pc, #112]	; (8000ec0 <main+0x374>)
 8000e50:	2001      	movs	r0, #1
 8000e52:	f000 ffff 	bl	8001e54 <writeTextLine>
				            writeTextLine(LINE_2, value2);
 8000e56:	f607 03dc 	addw	r3, r7, #2268	; 0x8dc
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	f000 fff9 	bl	8001e54 <writeTextLine>
				            break;
 8000e62:	e008      	b.n	8000e76 <main+0x32a>
				        }
				        hex++;
 8000e64:	f897 396f 	ldrb.w	r3, [r7, #2415]	; 0x96f
 8000e68:	3301      	adds	r3, #1
 8000e6a:	f887 396f 	strb.w	r3, [r7, #2415]	; 0x96f
				    } while (hex != 0x01); // if it rolls back to 1, then 0x3b doesn't have an inverse
 8000e6e:	f897 396f 	ldrb.w	r3, [r7, #2415]	; 0x96f
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d1a2      	bne.n	8000dbc <main+0x270>

				    return 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	e395      	b.n	80015a6 <main+0xa5a>
 8000e7a:	bf00      	nop
 8000e7c:	08004e70 	.word	0x08004e70
 8000e80:	08004eb0 	.word	0x08004eb0
 8000e84:	08004cd4 	.word	0x08004cd4
 8000e88:	08004ce8 	.word	0x08004ce8
 8000e8c:	08004cf8 	.word	0x08004cf8
 8000e90:	08004d0c 	.word	0x08004d0c
 8000e94:	08004d1c 	.word	0x08004d1c
 8000e98:	08004d30 	.word	0x08004d30
 8000e9c:	08004d44 	.word	0x08004d44
 8000ea0:	08004d58 	.word	0x08004d58
 8000ea4:	08004d6c 	.word	0x08004d6c
 8000ea8:	08004d70 	.word	0x08004d70
 8000eac:	08004d78 	.word	0x08004d78
 8000eb0:	08004d7c 	.word	0x08004d7c
 8000eb4:	08004d84 	.word	0x08004d84
 8000eb8:	08004d88 	.word	0x08004d88
 8000ebc:	08004d90 	.word	0x08004d90
 8000ec0:	08004d94 	.word	0x08004d94

		}

		if(button==1){
 8000ec4:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	f040 8366 	bne.w	800159a <main+0xa4e>
			sprintf(value1,"%s","");
 8000ece:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 8000ed2:	4acb      	ldr	r2, [pc, #812]	; (8001200 <main+0x6b4>)
 8000ed4:	49cb      	ldr	r1, [pc, #812]	; (8001204 <main+0x6b8>)
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f002 f8b8 	bl	800304c <siprintf>
			sprintf(value2,"%s","");
 8000edc:	f607 03dc 	addw	r3, r7, #2268	; 0x8dc
 8000ee0:	4ac7      	ldr	r2, [pc, #796]	; (8001200 <main+0x6b4>)
 8000ee2:	49c8      	ldr	r1, [pc, #800]	; (8001204 <main+0x6b8>)
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f002 f8b1 	bl	800304c <siprintf>
			sprintf(value3,"%s","");
 8000eea:	f607 03ac 	addw	r3, r7, #2220	; 0x8ac
 8000eee:	4ac4      	ldr	r2, [pc, #784]	; (8001200 <main+0x6b4>)
 8000ef0:	49c4      	ldr	r1, [pc, #784]	; (8001204 <main+0x6b8>)
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f002 f8aa 	bl	800304c <siprintf>
			sprintf(value4,"%s","");
 8000ef8:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 8000efc:	4ac0      	ldr	r2, [pc, #768]	; (8001200 <main+0x6b4>)
 8000efe:	49c1      	ldr	r1, [pc, #772]	; (8001204 <main+0x6b8>)
 8000f00:	4618      	mov	r0, r3
 8000f02:	f002 f8a3 	bl	800304c <siprintf>
			int index=0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	f8c7 3968 	str.w	r3, [r7, #2408]	; 0x968
			int index2=0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
			int index3=0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
			char result[48];
			while (PushBtnRead()==button){};
 8000f18:	bf00      	nop
 8000f1a:	f000 fc19 	bl	8001750 <PushBtnRead>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d0f8      	beq.n	8000f1a <main+0x3ce>

			//분석할 원문 입력 형태 선택
			clearScreen(ALL_LINE);
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f000 ff26 	bl	8001d7a <clearScreen>
		    writeTextLine(LINE_1, "Select input opt");
 8000f2e:	49b6      	ldr	r1, [pc, #728]	; (8001208 <main+0x6bc>)
 8000f30:	2001      	movs	r0, #1
 8000f32:	f000 ff8f 	bl	8001e54 <writeTextLine>
		    writeTextLine(LINE_2, "-ion to encript");
 8000f36:	49b5      	ldr	r1, [pc, #724]	; (800120c <main+0x6c0>)
 8000f38:	2002      	movs	r0, #2
 8000f3a:	f000 ff8b 	bl	8001e54 <writeTextLine>
		    HAL_Delay(2500);
 8000f3e:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000f42:	f001 f84f 	bl	8001fe4 <HAL_Delay>
			clearScreen(ALL_LINE);
 8000f46:	2000      	movs	r0, #0
 8000f48:	f000 ff17 	bl	8001d7a <clearScreen>
		    writeTextLine(LINE_1, "0)characters");
 8000f4c:	49b0      	ldr	r1, [pc, #704]	; (8001210 <main+0x6c4>)
 8000f4e:	2001      	movs	r0, #1
 8000f50:	f000 ff80 	bl	8001e54 <writeTextLine>
		    writeTextLine(LINE_2, "1)hex values");
 8000f54:	49af      	ldr	r1, [pc, #700]	; (8001214 <main+0x6c8>)
 8000f56:	2002      	movs	r0, #2
 8000f58:	f000 ff7c 	bl	8001e54 <writeTextLine>
		    while (condition1){
 8000f5c:	e318      	b.n	8001590 <main+0xa44>
		    	button = PushBtnRead();
 8000f5e:	f000 fbf7 	bl	8001750 <PushBtnRead>
 8000f62:	f8c7 0980 	str.w	r0, [r7, #2432]	; 0x980

		    	//문자열 암호화
		    	if(button==0){
 8000f66:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f040 8191 	bne.w	8001292 <main+0x746>
					clearScreen(ALL_LINE);
 8000f70:	2000      	movs	r0, #0
 8000f72:	f000 ff02 	bl	8001d7a <clearScreen>
					writeTextLine(LINE_2, "ASCII CODE:0x");
 8000f76:	49a8      	ldr	r1, [pc, #672]	; (8001218 <main+0x6cc>)
 8000f78:	2002      	movs	r0, #2
 8000f7a:	f000 ff6b 	bl	8001e54 <writeTextLine>
		    		while (PushBtnRead()==button){};
 8000f7e:	bf00      	nop
 8000f80:	f000 fbe6 	bl	8001750 <PushBtnRead>
 8000f84:	4602      	mov	r2, r0
 8000f86:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d0f8      	beq.n	8000f80 <main+0x434>
				while (condition1){
 8000f8e:	e0e5      	b.n	800115c <main+0x610>
					button = PushBtnRead();
 8000f90:	f000 fbde 	bl	8001750 <PushBtnRead>
 8000f94:	f8c7 0980 	str.w	r0, [r7, #2432]	; 0x980

					//입력 후 6초간 입력이 없으면 자동으로 계산
					if (button==-1 && strcmp(value2, "") == 0 && strcmp(value3, "") != 0)
 8000f98:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8000f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa0:	d14c      	bne.n	800103c <main+0x4f0>
 8000fa2:	f897 38dc 	ldrb.w	r3, [r7, #2268]	; 0x8dc
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d148      	bne.n	800103c <main+0x4f0>
 8000faa:	f897 38ac 	ldrb.w	r3, [r7, #2220]	; 0x8ac
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d044      	beq.n	800103c <main+0x4f0>
					 {
						HAL_Delay(20);
 8000fb2:	2014      	movs	r0, #20
 8000fb4:	f001 f816 	bl	8001fe4 <HAL_Delay>
					 index3++;
 8000fb8:	f8d7 3960 	ldr.w	r3, [r7, #2400]	; 0x960
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
					 if(index3>300){
 8000fc2:	f8d7 3960 	ldr.w	r3, [r7, #2400]	; 0x960
 8000fc6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000fca:	dd37      	ble.n	800103c <main+0x4f0>
						 index3=0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
						sprintf(result,"%s",hexToAscii(value2));
 8000fd2:	f607 03dc 	addw	r3, r7, #2268	; 0x8dc
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff fd4e 	bl	8000a78 <hexToAscii>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	4988      	ldr	r1, [pc, #544]	; (8001204 <main+0x6b8>)
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f002 f832 	bl	800304c <siprintf>
						if (strcmp(result, "error")==0){
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	498c      	ldr	r1, [pc, #560]	; (800121c <main+0x6d0>)
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff f8ef 	bl	80001d0 <strcmp>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d11e      	bne.n	8001036 <main+0x4ea>
							clearScreen(ALL_LINE);
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f000 febe 	bl	8001d7a <clearScreen>
							writeTextLine(LINE_1, "Odd number of ");
 8000ffe:	4988      	ldr	r1, [pc, #544]	; (8001220 <main+0x6d4>)
 8001000:	2001      	movs	r0, #1
 8001002:	f000 ff27 	bl	8001e54 <writeTextLine>
							writeTextLine(LINE_2, "items entered");
 8001006:	4987      	ldr	r1, [pc, #540]	; (8001224 <main+0x6d8>)
 8001008:	2002      	movs	r0, #2
 800100a:	f000 ff23 	bl	8001e54 <writeTextLine>
							HAL_Delay(3000);
 800100e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001012:	f000 ffe7 	bl	8001fe4 <HAL_Delay>
							clearScreen(ALL_LINE);
 8001016:	2000      	movs	r0, #0
 8001018:	f000 feaf 	bl	8001d7a <clearScreen>
							writeTextLine(LINE_1, value3);
 800101c:	f607 03ac 	addw	r3, r7, #2220	; 0x8ac
 8001020:	4619      	mov	r1, r3
 8001022:	2001      	movs	r0, #1
 8001024:	f000 ff16 	bl	8001e54 <writeTextLine>
							writeTextLine(LINE_2, value4);
 8001028:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 800102c:	4619      	mov	r1, r3
 800102e:	2002      	movs	r0, #2
 8001030:	f000 ff10 	bl	8001e54 <writeTextLine>
 8001034:	e002      	b.n	800103c <main+0x4f0>
						}

						else {condition1=false;}
 8001036:	2300      	movs	r3, #0
 8001038:	f887 3987 	strb.w	r3, [r7, #2439]	; 0x987
					 }
					 }

					//
					if (button!=-1){
 800103c:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8001040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001044:	f000 808a 	beq.w	800115c <main+0x610>
						index3=0;
 8001048:	2300      	movs	r3, #0
 800104a:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
						sprintf(value4,"%s","ASCII CODE:0x");
 800104e:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 8001052:	4a71      	ldr	r2, [pc, #452]	; (8001218 <main+0x6cc>)
 8001054:	496b      	ldr	r1, [pc, #428]	; (8001204 <main+0x6b8>)
 8001056:	4618      	mov	r0, r3
 8001058:	f001 fff8 	bl	800304c <siprintf>
						sprintf(value1,"%x",button);
 800105c:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 8001060:	f8d7 2980 	ldr.w	r2, [r7, #2432]	; 0x980
 8001064:	4970      	ldr	r1, [pc, #448]	; (8001228 <main+0x6dc>)
 8001066:	4618      	mov	r0, r3
 8001068:	f001 fff0 	bl	800304c <siprintf>
						strcat(value2, value1);
 800106c:	f607 120c 	addw	r2, r7, #2316	; 0x90c
 8001070:	f607 03dc 	addw	r3, r7, #2268	; 0x8dc
 8001074:	4611      	mov	r1, r2
 8001076:	4618      	mov	r0, r3
 8001078:	f002 f879 	bl	800316e <strcat>
						strcat(value4, value2);
 800107c:	f607 02dc 	addw	r2, r7, #2268	; 0x8dc
 8001080:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 8001084:	4611      	mov	r1, r2
 8001086:	4618      	mov	r0, r3
 8001088:	f002 f871 	bl	800316e <strcat>
						writeTextLine(LINE_2, value4);
 800108c:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 8001090:	4619      	mov	r1, r3
 8001092:	2002      	movs	r0, #2
 8001094:	f000 fede 	bl	8001e54 <writeTextLine>
						index++;
 8001098:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 800109c:	3301      	adds	r3, #1
 800109e:	f8c7 3968 	str.w	r3, [r7, #2408]	; 0x968
						while (PushBtnRead()==button){};
 80010a2:	bf00      	nop
 80010a4:	f000 fb54 	bl	8001750 <PushBtnRead>
 80010a8:	4602      	mov	r2, r0
 80010aa:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d0f8      	beq.n	80010a4 <main+0x558>
						HAL_Delay(50);
 80010b2:	2032      	movs	r0, #50	; 0x32
 80010b4:	f000 ff96 	bl	8001fe4 <HAL_Delay>
						if (index==2){
 80010b8:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d137      	bne.n	8001130 <main+0x5e4>
							index=0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	f8c7 3968 	str.w	r3, [r7, #2408]	; 0x968
						    HAL_Delay(500);
 80010c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010ca:	f000 ff8b 	bl	8001fe4 <HAL_Delay>
							int k;
							sscanf(value2,"%x",&k);
 80010ce:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80010d2:	f607 03dc 	addw	r3, r7, #2268	; 0x8dc
 80010d6:	4954      	ldr	r1, [pc, #336]	; (8001228 <main+0x6dc>)
 80010d8:	4618      	mov	r0, r3
 80010da:	f001 ffd7 	bl	800308c <siscanf>
							sprintf(value2,"%c",(char)k);
 80010de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	461a      	mov	r2, r3
 80010e8:	f607 03dc 	addw	r3, r7, #2268	; 0x8dc
 80010ec:	494f      	ldr	r1, [pc, #316]	; (800122c <main+0x6e0>)
 80010ee:	4618      	mov	r0, r3
 80010f0:	f001 ffac 	bl	800304c <siprintf>
							strcat(value3, value2);
 80010f4:	f607 02dc 	addw	r2, r7, #2268	; 0x8dc
 80010f8:	f607 03ac 	addw	r3, r7, #2220	; 0x8ac
 80010fc:	4611      	mov	r1, r2
 80010fe:	4618      	mov	r0, r3
 8001100:	f002 f835 	bl	800316e <strcat>
							sprintf(value2,"%s","");
 8001104:	f607 03dc 	addw	r3, r7, #2268	; 0x8dc
 8001108:	4a3d      	ldr	r2, [pc, #244]	; (8001200 <main+0x6b4>)
 800110a:	493e      	ldr	r1, [pc, #248]	; (8001204 <main+0x6b8>)
 800110c:	4618      	mov	r0, r3
 800110e:	f001 ff9d 	bl	800304c <siprintf>
							writeTextLine(LINE_1, value3);
 8001112:	f607 03ac 	addw	r3, r7, #2220	; 0x8ac
 8001116:	4619      	mov	r1, r3
 8001118:	2001      	movs	r0, #1
 800111a:	f000 fe9b 	bl	8001e54 <writeTextLine>
							writeTextLine(LINE_2, "ASCII CODE:0x  ");
 800111e:	4944      	ldr	r1, [pc, #272]	; (8001230 <main+0x6e4>)
 8001120:	2002      	movs	r0, #2
 8001122:	f000 fe97 	bl	8001e54 <writeTextLine>
							index2++;
 8001126:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800112a:	3301      	adds	r3, #1
 800112c:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
					}
						if (index2==16){
 8001130:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8001134:	2b10      	cmp	r3, #16
 8001136:	d109      	bne.n	800114c <main+0x600>
							index2=0;
 8001138:	2300      	movs	r3, #0
 800113a:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
							condition1=false;
 800113e:	2300      	movs	r3, #0
 8001140:	f887 3987 	strb.w	r3, [r7, #2439]	; 0x987
							HAL_Delay(2000);
 8001144:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001148:	f000 ff4c 	bl	8001fe4 <HAL_Delay>

						}
						while (PushBtnRead()==button){};
 800114c:	bf00      	nop
 800114e:	f000 faff 	bl	8001750 <PushBtnRead>
 8001152:	4602      	mov	r2, r0
 8001154:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8001158:	4293      	cmp	r3, r2
 800115a:	d0f8      	beq.n	800114e <main+0x602>
				while (condition1){
 800115c:	f897 3987 	ldrb.w	r3, [r7, #2439]	; 0x987
 8001160:	2b00      	cmp	r3, #0
 8001162:	f47f af15 	bne.w	8000f90 <main+0x444>
		}



				//문자열 암호화 계산 및 출력
				clearScreen(ALL_LINE);
 8001166:	2000      	movs	r0, #0
 8001168:	f000 fe07 	bl	8001d7a <clearScreen>
			    strcpy(In, value3);
 800116c:	f607 03ac 	addw	r3, r7, #2220	; 0x8ac
 8001170:	4619      	mov	r1, r3
 8001172:	f8d7 094c 	ldr.w	r0, [r7, #2380]	; 0x94c
 8001176:	f002 f809 	bl	800318c <strcpy>
				init_len = strlen(In);
 800117a:	f8d7 094c 	ldr.w	r0, [r7, #2380]	; 0x94c
 800117e:	f7ff f831 	bl	80001e4 <strlen>
 8001182:	4603      	mov	r3, r0
 8001184:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
				while(strlen(In) % 16 != 0) In[strlen(In)] = '.';
 8001188:	e009      	b.n	800119e <main+0x652>
 800118a:	f8d7 094c 	ldr.w	r0, [r7, #2380]	; 0x94c
 800118e:	f7ff f829 	bl	80001e4 <strlen>
 8001192:	4602      	mov	r2, r0
 8001194:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 8001198:	4413      	add	r3, r2
 800119a:	222e      	movs	r2, #46	; 0x2e
 800119c:	701a      	strb	r2, [r3, #0]
 800119e:	f8d7 094c 	ldr.w	r0, [r7, #2380]	; 0x94c
 80011a2:	f7ff f81f 	bl	80001e4 <strlen>
 80011a6:	4603      	mov	r3, r0
 80011a8:	f003 030f 	and.w	r3, r3, #15
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d1ec      	bne.n	800118a <main+0x63e>

				int Len = strlen(In) + 1;
 80011b0:	f8d7 094c 	ldr.w	r0, [r7, #2380]	; 0x94c
 80011b4:	f7ff f816 	bl	80001e4 <strlen>
 80011b8:	4603      	mov	r3, r0
 80011ba:	3301      	adds	r3, #1
 80011bc:	f8c7 3944 	str.w	r3, [r7, #2372]	; 0x944
				AES_ECB_Encrypt(In, Key, ENC, Len);
 80011c0:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 80011c4:	f607 013c 	addw	r1, r7, #2108	; 0x83c
 80011c8:	f8d7 3944 	ldr.w	r3, [r7, #2372]	; 0x944
 80011cc:	f8d7 094c 	ldr.w	r0, [r7, #2380]	; 0x94c
 80011d0:	f7ff fc34 	bl	8000a3c <AES_ECB_Encrypt>


				printf("암호화:\t");
 80011d4:	4817      	ldr	r0, [pc, #92]	; (8001234 <main+0x6e8>)
 80011d6:	f001 fefb 	bl	8002fd0 <iprintf>
				sprintf(value1,"%s","");
 80011da:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 80011de:	4a08      	ldr	r2, [pc, #32]	; (8001200 <main+0x6b4>)
 80011e0:	4908      	ldr	r1, [pc, #32]	; (8001204 <main+0x6b8>)
 80011e2:	4618      	mov	r0, r3
 80011e4:	f001 ff32 	bl	800304c <siprintf>
				sprintf(value2,"%s","");
 80011e8:	f607 03dc 	addw	r3, r7, #2268	; 0x8dc
 80011ec:	4a04      	ldr	r2, [pc, #16]	; (8001200 <main+0x6b4>)
 80011ee:	4905      	ldr	r1, [pc, #20]	; (8001204 <main+0x6b8>)
 80011f0:	4618      	mov	r0, r3
 80011f2:	f001 ff2b 	bl	800304c <siprintf>
				for (int i = 0; i < Len; i++) {
 80011f6:	2300      	movs	r3, #0
 80011f8:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
 80011fc:	e036      	b.n	800126c <main+0x720>
 80011fe:	bf00      	nop
 8001200:	08004da4 	.word	0x08004da4
 8001204:	08004d6c 	.word	0x08004d6c
 8001208:	08004da8 	.word	0x08004da8
 800120c:	08004dbc 	.word	0x08004dbc
 8001210:	08004dcc 	.word	0x08004dcc
 8001214:	08004ddc 	.word	0x08004ddc
 8001218:	08004dec 	.word	0x08004dec
 800121c:	08004cb4 	.word	0x08004cb4
 8001220:	08004dfc 	.word	0x08004dfc
 8001224:	08004e0c 	.word	0x08004e0c
 8001228:	08004d78 	.word	0x08004d78
 800122c:	08004e1c 	.word	0x08004e1c
 8001230:	08004e20 	.word	0x08004e20
 8001234:	08004e30 	.word	0x08004e30
					sprintf(value1,"%c",ENC[i]);
 8001238:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 800123c:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 8001240:	4413      	add	r3, r2
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	461a      	mov	r2, r3
 8001246:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 800124a:	49d9      	ldr	r1, [pc, #868]	; (80015b0 <main+0xa64>)
 800124c:	4618      	mov	r0, r3
 800124e:	f001 fefd 	bl	800304c <siprintf>
					strcat(value2, value1);
 8001252:	f607 120c 	addw	r2, r7, #2316	; 0x90c
 8001256:	f607 03dc 	addw	r3, r7, #2268	; 0x8dc
 800125a:	4611      	mov	r1, r2
 800125c:	4618      	mov	r0, r3
 800125e:	f001 ff86 	bl	800316e <strcat>
				for (int i = 0; i < Len; i++) {
 8001262:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 8001266:	3301      	adds	r3, #1
 8001268:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
 800126c:	f8d7 295c 	ldr.w	r2, [r7, #2396]	; 0x95c
 8001270:	f8d7 3944 	ldr.w	r3, [r7, #2372]	; 0x944
 8001274:	429a      	cmp	r2, r3
 8001276:	dbdf      	blt.n	8001238 <main+0x6ec>
				};
				writeTextLine(LINE_1, "Encryption");
 8001278:	49ce      	ldr	r1, [pc, #824]	; (80015b4 <main+0xa68>)
 800127a:	2001      	movs	r0, #1
 800127c:	f000 fdea 	bl	8001e54 <writeTextLine>
				writeTextLine(LINE_2, value2);
 8001280:	f607 03dc 	addw	r3, r7, #2268	; 0x8dc
 8001284:	4619      	mov	r1, r3
 8001286:	2002      	movs	r0, #2
 8001288:	f000 fde4 	bl	8001e54 <writeTextLine>
				printf("\n");
 800128c:	200a      	movs	r0, #10
 800128e:	f001 feb7 	bl	8003000 <putchar>

		    	}


		    	//16진수 암호화
		    	if(button==1){
 8001292:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8001296:	2b01      	cmp	r3, #1
 8001298:	f040 817a 	bne.w	8001590 <main+0xa44>
		    		clearScreen(ALL_LINE);
 800129c:	2000      	movs	r0, #0
 800129e:	f000 fd6c 	bl	8001d7a <clearScreen>
				    writeTextLine(LINE_1, "Calculate per 1 ");
 80012a2:	49c5      	ldr	r1, [pc, #788]	; (80015b8 <main+0xa6c>)
 80012a4:	2001      	movs	r0, #1
 80012a6:	f000 fdd5 	bl	8001e54 <writeTextLine>
				    writeTextLine(LINE_2, "byte---Press Btn");
 80012aa:	49c4      	ldr	r1, [pc, #784]	; (80015bc <main+0xa70>)
 80012ac:	2002      	movs	r0, #2
 80012ae:	f000 fdd1 	bl	8001e54 <writeTextLine>
				    bool condition2=true;
 80012b2:	2301      	movs	r3, #1
 80012b4:	f887 395b 	strb.w	r3, [r7, #2395]	; 0x95b
		    		while (PushBtnRead()==button){};
 80012b8:	bf00      	nop
 80012ba:	f000 fa49 	bl	8001750 <PushBtnRead>
 80012be:	4602      	mov	r2, r0
 80012c0:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d0f8      	beq.n	80012ba <main+0x76e>


		    						while (condition1){
 80012c8:	e0b1      	b.n	800142e <main+0x8e2>
		    							button = PushBtnRead();
 80012ca:	f000 fa41 	bl	8001750 <PushBtnRead>
 80012ce:	f8c7 0980 	str.w	r0, [r7, #2432]	; 0x980

		    							//입력 후 6초간 입력이 없으면 자동으로 계산
		    							if (button==-1 && strcmp(value3, "") != 0)
 80012d2:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 80012d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012da:	d148      	bne.n	800136e <main+0x822>
 80012dc:	f897 38ac 	ldrb.w	r3, [r7, #2220]	; 0x8ac
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d044      	beq.n	800136e <main+0x822>
		    							 {
		    								HAL_Delay(20);
 80012e4:	2014      	movs	r0, #20
 80012e6:	f000 fe7d 	bl	8001fe4 <HAL_Delay>
		    							 index3++;
 80012ea:	f8d7 3960 	ldr.w	r3, [r7, #2400]	; 0x960
 80012ee:	3301      	adds	r3, #1
 80012f0:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
		    							 if(index3>300){
 80012f4:	f8d7 3960 	ldr.w	r3, [r7, #2400]	; 0x960
 80012f8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80012fc:	dd37      	ble.n	800136e <main+0x822>
		    								index3=0;
 80012fe:	2300      	movs	r3, #0
 8001300:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
		    								sprintf(result,"%s",hexToAscii(value3));
 8001304:	f607 03ac 	addw	r3, r7, #2220	; 0x8ac
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fbb5 	bl	8000a78 <hexToAscii>
 800130e:	4602      	mov	r2, r0
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	49ab      	ldr	r1, [pc, #684]	; (80015c0 <main+0xa74>)
 8001314:	4618      	mov	r0, r3
 8001316:	f001 fe99 	bl	800304c <siprintf>
		 		    						if (strcmp(result, "error")==0){
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	49a9      	ldr	r1, [pc, #676]	; (80015c4 <main+0xa78>)
 800131e:	4618      	mov	r0, r3
 8001320:	f7fe ff56 	bl	80001d0 <strcmp>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d11e      	bne.n	8001368 <main+0x81c>
		 		    							clearScreen(ALL_LINE);
 800132a:	2000      	movs	r0, #0
 800132c:	f000 fd25 	bl	8001d7a <clearScreen>
		 										writeTextLine(LINE_1, "Odd number of ");
 8001330:	49a5      	ldr	r1, [pc, #660]	; (80015c8 <main+0xa7c>)
 8001332:	2001      	movs	r0, #1
 8001334:	f000 fd8e 	bl	8001e54 <writeTextLine>
		 										writeTextLine(LINE_2, "items entered");
 8001338:	49a4      	ldr	r1, [pc, #656]	; (80015cc <main+0xa80>)
 800133a:	2002      	movs	r0, #2
 800133c:	f000 fd8a 	bl	8001e54 <writeTextLine>
		 										HAL_Delay(3000);
 8001340:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001344:	f000 fe4e 	bl	8001fe4 <HAL_Delay>
		 										clearScreen(ALL_LINE);
 8001348:	2000      	movs	r0, #0
 800134a:	f000 fd16 	bl	8001d7a <clearScreen>
		 										writeTextLine(LINE_1, value3);
 800134e:	f607 03ac 	addw	r3, r7, #2220	; 0x8ac
 8001352:	4619      	mov	r1, r3
 8001354:	2001      	movs	r0, #1
 8001356:	f000 fd7d 	bl	8001e54 <writeTextLine>
		 										writeTextLine(LINE_2, value4);
 800135a:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 800135e:	4619      	mov	r1, r3
 8001360:	2002      	movs	r0, #2
 8001362:	f000 fd77 	bl	8001e54 <writeTextLine>
 8001366:	e002      	b.n	800136e <main+0x822>
		 		    						}
		 		    						else {condition1=false;}
 8001368:	2300      	movs	r3, #0
 800136a:	f887 3987 	strb.w	r3, [r7, #2439]	; 0x987

		    							 }
		    							 }

		    							//
		    							if (button!=-1){
 800136e:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8001372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001376:	d05a      	beq.n	800142e <main+0x8e2>
		    								while(condition2){
 8001378:	e005      	b.n	8001386 <main+0x83a>
		    									clearScreen(ALL_LINE);
 800137a:	2000      	movs	r0, #0
 800137c:	f000 fcfd 	bl	8001d7a <clearScreen>
		    									condition2=false;
 8001380:	2300      	movs	r3, #0
 8001382:	f887 395b 	strb.w	r3, [r7, #2395]	; 0x95b
		    								while(condition2){
 8001386:	f897 395b 	ldrb.w	r3, [r7, #2395]	; 0x95b
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1f5      	bne.n	800137a <main+0x82e>
		    								}
		    								index3=0;
 800138e:	2300      	movs	r3, #0
 8001390:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
		    								index++;
 8001394:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 8001398:	3301      	adds	r3, #1
 800139a:	f8c7 3968 	str.w	r3, [r7, #2408]	; 0x968
		    								sprintf(value1,"%x",button);
 800139e:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 80013a2:	f8d7 2980 	ldr.w	r2, [r7, #2432]	; 0x980
 80013a6:	498a      	ldr	r1, [pc, #552]	; (80015d0 <main+0xa84>)
 80013a8:	4618      	mov	r0, r3
 80013aa:	f001 fe4f 	bl	800304c <siprintf>
		    								strcat(value3, value1);
 80013ae:	f607 120c 	addw	r2, r7, #2316	; 0x90c
 80013b2:	f607 03ac 	addw	r3, r7, #2220	; 0x8ac
 80013b6:	4611      	mov	r1, r2
 80013b8:	4618      	mov	r0, r3
 80013ba:	f001 fed8 	bl	800316e <strcat>
		    								if (index<=16){
 80013be:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 80013c2:	2b10      	cmp	r3, #16
 80013c4:	dc08      	bgt.n	80013d8 <main+0x88c>
		    									clearScreen(ALL_LINE);
 80013c6:	2000      	movs	r0, #0
 80013c8:	f000 fcd7 	bl	8001d7a <clearScreen>
			    								writeTextLine(LINE_1, value3);
 80013cc:	f607 03ac 	addw	r3, r7, #2220	; 0x8ac
 80013d0:	4619      	mov	r1, r3
 80013d2:	2001      	movs	r0, #1
 80013d4:	f000 fd3e 	bl	8001e54 <writeTextLine>
		    								}
		    								if (16<index){
 80013d8:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 80013dc:	2b10      	cmp	r3, #16
 80013de:	dd0d      	ble.n	80013fc <main+0x8b0>
		    									strcat(value4,value1);
 80013e0:	f607 120c 	addw	r2, r7, #2316	; 0x90c
 80013e4:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 80013e8:	4611      	mov	r1, r2
 80013ea:	4618      	mov	r0, r3
 80013ec:	f001 febf 	bl	800316e <strcat>
												writeTextLine(LINE_2, value4);
 80013f0:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 80013f4:	4619      	mov	r1, r3
 80013f6:	2002      	movs	r0, #2
 80013f8:	f000 fd2c 	bl	8001e54 <writeTextLine>
											}
		    								if (index==32){
 80013fc:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 8001400:	2b20      	cmp	r3, #32
 8001402:	d109      	bne.n	8001418 <main+0x8cc>
		    									index=0;
 8001404:	2300      	movs	r3, #0
 8001406:	f8c7 3968 	str.w	r3, [r7, #2408]	; 0x968
		    									HAL_Delay(1000);
 800140a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800140e:	f000 fde9 	bl	8001fe4 <HAL_Delay>
		    									condition1=false;
 8001412:	2300      	movs	r3, #0
 8001414:	f887 3987 	strb.w	r3, [r7, #2439]	; 0x987
		    								}
		    								HAL_Delay(30);
 8001418:	201e      	movs	r0, #30
 800141a:	f000 fde3 	bl	8001fe4 <HAL_Delay>
		    								while (PushBtnRead()==button){};
 800141e:	bf00      	nop
 8001420:	f000 f996 	bl	8001750 <PushBtnRead>
 8001424:	4602      	mov	r2, r0
 8001426:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 800142a:	4293      	cmp	r3, r2
 800142c:	d0f8      	beq.n	8001420 <main+0x8d4>
		    						while (condition1){
 800142e:	f897 3987 	ldrb.w	r3, [r7, #2439]	; 0x987
 8001432:	2b00      	cmp	r3, #0
 8001434:	f47f af49 	bne.w	80012ca <main+0x77e>
		    						}
		    				}
		    						clearScreen(ALL_LINE);
 8001438:	2000      	movs	r0, #0
 800143a:	f000 fc9e 	bl	8001d7a <clearScreen>
		    						//16진수를 1byte 단위로 변환
		    						sprintf(result,"%s",hexToAscii(value3));
 800143e:	f607 03ac 	addw	r3, r7, #2220	; 0x8ac
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fb18 	bl	8000a78 <hexToAscii>
 8001448:	4602      	mov	r2, r0
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	495c      	ldr	r1, [pc, #368]	; (80015c0 <main+0xa74>)
 800144e:	4618      	mov	r0, r3
 8001450:	f001 fdfc 	bl	800304c <siprintf>

		    						//문자열 암호화 계산 및 출력
									strcpy(In, result);
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	4619      	mov	r1, r3
 8001458:	f8d7 094c 	ldr.w	r0, [r7, #2380]	; 0x94c
 800145c:	f001 fe96 	bl	800318c <strcpy>
									init_len = strlen(In);
 8001460:	f8d7 094c 	ldr.w	r0, [r7, #2380]	; 0x94c
 8001464:	f7fe febe 	bl	80001e4 <strlen>
 8001468:	4603      	mov	r3, r0
 800146a:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
									while(strlen(In) % 16 != 0) In[strlen(In)] = '.';
 800146e:	e009      	b.n	8001484 <main+0x938>
 8001470:	f8d7 094c 	ldr.w	r0, [r7, #2380]	; 0x94c
 8001474:	f7fe feb6 	bl	80001e4 <strlen>
 8001478:	4602      	mov	r2, r0
 800147a:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 800147e:	4413      	add	r3, r2
 8001480:	222e      	movs	r2, #46	; 0x2e
 8001482:	701a      	strb	r2, [r3, #0]
 8001484:	f8d7 094c 	ldr.w	r0, [r7, #2380]	; 0x94c
 8001488:	f7fe feac 	bl	80001e4 <strlen>
 800148c:	4603      	mov	r3, r0
 800148e:	f003 030f 	and.w	r3, r3, #15
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1ec      	bne.n	8001470 <main+0x924>

									int Len = strlen(In) + 1;
 8001496:	f8d7 094c 	ldr.w	r0, [r7, #2380]	; 0x94c
 800149a:	f7fe fea3 	bl	80001e4 <strlen>
 800149e:	4603      	mov	r3, r0
 80014a0:	3301      	adds	r3, #1
 80014a2:	f8c7 3940 	str.w	r3, [r7, #2368]	; 0x940
									AES_ECB_Encrypt(In, Key, ENC, Len);
 80014a6:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 80014aa:	f607 013c 	addw	r1, r7, #2108	; 0x83c
 80014ae:	f8d7 3940 	ldr.w	r3, [r7, #2368]	; 0x940
 80014b2:	f8d7 094c 	ldr.w	r0, [r7, #2380]	; 0x94c
 80014b6:	f7ff fac1 	bl	8000a3c <AES_ECB_Encrypt>

									printf("암호화:\t");
 80014ba:	4846      	ldr	r0, [pc, #280]	; (80015d4 <main+0xa88>)
 80014bc:	f001 fd88 	bl	8002fd0 <iprintf>
									sprintf(value1,"%s","");
 80014c0:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 80014c4:	4a44      	ldr	r2, [pc, #272]	; (80015d8 <main+0xa8c>)
 80014c6:	493e      	ldr	r1, [pc, #248]	; (80015c0 <main+0xa74>)
 80014c8:	4618      	mov	r0, r3
 80014ca:	f001 fdbf 	bl	800304c <siprintf>
									sprintf(value2,"%s","");
 80014ce:	f607 03dc 	addw	r3, r7, #2268	; 0x8dc
 80014d2:	4a41      	ldr	r2, [pc, #260]	; (80015d8 <main+0xa8c>)
 80014d4:	493a      	ldr	r1, [pc, #232]	; (80015c0 <main+0xa74>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	f001 fdb8 	bl	800304c <siprintf>
									sprintf(value3,"%s","");
 80014dc:	f607 03ac 	addw	r3, r7, #2220	; 0x8ac
 80014e0:	4a3d      	ldr	r2, [pc, #244]	; (80015d8 <main+0xa8c>)
 80014e2:	4937      	ldr	r1, [pc, #220]	; (80015c0 <main+0xa74>)
 80014e4:	4618      	mov	r0, r3
 80014e6:	f001 fdb1 	bl	800304c <siprintf>
									for (int i = 0; i < 8; i++) {
 80014ea:	2300      	movs	r3, #0
 80014ec:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
 80014f0:	e019      	b.n	8001526 <main+0x9da>
										sprintf(value1,"%x",ENC[i]);
 80014f2:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 80014f6:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 80014fa:	4413      	add	r3, r2
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	461a      	mov	r2, r3
 8001500:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 8001504:	4932      	ldr	r1, [pc, #200]	; (80015d0 <main+0xa84>)
 8001506:	4618      	mov	r0, r3
 8001508:	f001 fda0 	bl	800304c <siprintf>
										strcat(value2, value1);
 800150c:	f607 120c 	addw	r2, r7, #2316	; 0x90c
 8001510:	f607 03dc 	addw	r3, r7, #2268	; 0x8dc
 8001514:	4611      	mov	r1, r2
 8001516:	4618      	mov	r0, r3
 8001518:	f001 fe29 	bl	800316e <strcat>
									for (int i = 0; i < 8; i++) {
 800151c:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 8001520:	3301      	adds	r3, #1
 8001522:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
 8001526:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 800152a:	2b07      	cmp	r3, #7
 800152c:	dde1      	ble.n	80014f2 <main+0x9a6>
									};
									for (int i = 8; i < 16; i++) {
 800152e:	2308      	movs	r3, #8
 8001530:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
 8001534:	e019      	b.n	800156a <main+0xa1e>
										sprintf(value1,"%02x",ENC[i]);
 8001536:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 800153a:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 800153e:	4413      	add	r3, r2
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	461a      	mov	r2, r3
 8001544:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 8001548:	4924      	ldr	r1, [pc, #144]	; (80015dc <main+0xa90>)
 800154a:	4618      	mov	r0, r3
 800154c:	f001 fd7e 	bl	800304c <siprintf>
										strcat(value3, value1);
 8001550:	f607 120c 	addw	r2, r7, #2316	; 0x90c
 8001554:	f607 03ac 	addw	r3, r7, #2220	; 0x8ac
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f001 fe07 	bl	800316e <strcat>
									for (int i = 8; i < 16; i++) {
 8001560:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 8001564:	3301      	adds	r3, #1
 8001566:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
 800156a:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 800156e:	2b0f      	cmp	r3, #15
 8001570:	dde1      	ble.n	8001536 <main+0x9ea>
									};
									writeTextLine(LINE_1, value2);
 8001572:	f607 03dc 	addw	r3, r7, #2268	; 0x8dc
 8001576:	4619      	mov	r1, r3
 8001578:	2001      	movs	r0, #1
 800157a:	f000 fc6b 	bl	8001e54 <writeTextLine>
									writeTextLine(LINE_2, value3);
 800157e:	f607 03ac 	addw	r3, r7, #2220	; 0x8ac
 8001582:	4619      	mov	r1, r3
 8001584:	2002      	movs	r0, #2
 8001586:	f000 fc65 	bl	8001e54 <writeTextLine>
									printf("\n");
 800158a:	200a      	movs	r0, #10
 800158c:	f001 fd38 	bl	8003000 <putchar>
		    while (condition1){
 8001590:	f897 3987 	ldrb.w	r3, [r7, #2439]	; 0x987
 8001594:	2b00      	cmp	r3, #0
 8001596:	f47f ace2 	bne.w	8000f5e <main+0x412>
	while (condition1){
 800159a:	f897 3987 	ldrb.w	r3, [r7, #2439]	; 0x987
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f47f ab5e 	bne.w	8000c60 <main+0x114>
 80015a4:	2300      	movs	r3, #0

	}


}
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	f607 1788 	addw	r7, r7, #2440	; 0x988
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bdb0      	pop	{r4, r5, r7, pc}
 80015b0:	08004e1c 	.word	0x08004e1c
 80015b4:	08004e3c 	.word	0x08004e3c
 80015b8:	08004e48 	.word	0x08004e48
 80015bc:	08004e5c 	.word	0x08004e5c
 80015c0:	08004d6c 	.word	0x08004d6c
 80015c4:	08004cb4 	.word	0x08004cb4
 80015c8:	08004dfc 	.word	0x08004dfc
 80015cc:	08004e0c 	.word	0x08004e0c
 80015d0:	08004d78 	.word	0x08004d78
 80015d4:	08004e30 	.word	0x08004e30
 80015d8:	08004da4 	.word	0x08004da4
 80015dc:	08004d7c 	.word	0x08004d7c

080015e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b094      	sub	sp, #80	; 0x50
 80015e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015e6:	f107 0320 	add.w	r3, r7, #32
 80015ea:	2230      	movs	r2, #48	; 0x30
 80015ec:	2100      	movs	r1, #0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f001 fc2c 	bl	8002e4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f4:	f107 030c 	add.w	r3, r7, #12
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001604:	2300      	movs	r3, #0
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	4b22      	ldr	r3, [pc, #136]	; (8001694 <SystemClock_Config+0xb4>)
 800160a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160c:	4a21      	ldr	r2, [pc, #132]	; (8001694 <SystemClock_Config+0xb4>)
 800160e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001612:	6413      	str	r3, [r2, #64]	; 0x40
 8001614:	4b1f      	ldr	r3, [pc, #124]	; (8001694 <SystemClock_Config+0xb4>)
 8001616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001620:	2300      	movs	r3, #0
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	4b1c      	ldr	r3, [pc, #112]	; (8001698 <SystemClock_Config+0xb8>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a1b      	ldr	r2, [pc, #108]	; (8001698 <SystemClock_Config+0xb8>)
 800162a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800162e:	6013      	str	r3, [r2, #0]
 8001630:	4b19      	ldr	r3, [pc, #100]	; (8001698 <SystemClock_Config+0xb8>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001638:	607b      	str	r3, [r7, #4]
 800163a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800163c:	2302      	movs	r3, #2
 800163e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001640:	2301      	movs	r3, #1
 8001642:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001644:	2310      	movs	r3, #16
 8001646:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001648:	2300      	movs	r3, #0
 800164a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800164c:	f107 0320 	add.w	r3, r7, #32
 8001650:	4618      	mov	r0, r3
 8001652:	f000 ff9f 	bl	8002594 <HAL_RCC_OscConfig>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800165c:	f000 f872 	bl	8001744 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001660:	230f      	movs	r3, #15
 8001662:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001664:	2300      	movs	r3, #0
 8001666:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800166c:	2300      	movs	r3, #0
 800166e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001670:	2300      	movs	r3, #0
 8001672:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001674:	f107 030c 	add.w	r3, r7, #12
 8001678:	2100      	movs	r1, #0
 800167a:	4618      	mov	r0, r3
 800167c:	f001 fa02 	bl	8002a84 <HAL_RCC_ClockConfig>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001686:	f000 f85d 	bl	8001744 <Error_Handler>
  }
}
 800168a:	bf00      	nop
 800168c:	3750      	adds	r7, #80	; 0x50
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40023800 	.word	0x40023800
 8001698:	40007000 	.word	0x40007000

0800169c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a2:	f107 030c 	add.w	r3, r7, #12
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	609a      	str	r2, [r3, #8]
 80016ae:	60da      	str	r2, [r3, #12]
 80016b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	4b20      	ldr	r3, [pc, #128]	; (8001738 <MX_GPIO_Init+0x9c>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	4a1f      	ldr	r2, [pc, #124]	; (8001738 <MX_GPIO_Init+0x9c>)
 80016bc:	f043 0304 	orr.w	r3, r3, #4
 80016c0:	6313      	str	r3, [r2, #48]	; 0x30
 80016c2:	4b1d      	ldr	r3, [pc, #116]	; (8001738 <MX_GPIO_Init+0x9c>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	f003 0304 	and.w	r3, r3, #4
 80016ca:	60bb      	str	r3, [r7, #8]
 80016cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	607b      	str	r3, [r7, #4]
 80016d2:	4b19      	ldr	r3, [pc, #100]	; (8001738 <MX_GPIO_Init+0x9c>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a18      	ldr	r2, [pc, #96]	; (8001738 <MX_GPIO_Init+0x9c>)
 80016d8:	f043 0308 	orr.w	r3, r3, #8
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b16      	ldr	r3, [pc, #88]	; (8001738 <MX_GPIO_Init+0x9c>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0308 	and.w	r3, r3, #8
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0
 80016ea:	2200      	movs	r2, #0
 80016ec:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80016f0:	4812      	ldr	r0, [pc, #72]	; (800173c <MX_GPIO_Init+0xa0>)
 80016f2:	f000 ff35 	bl	8002560 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80016f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016fa:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016fc:	2300      	movs	r3, #0
 80016fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001704:	f107 030c 	add.w	r3, r7, #12
 8001708:	4619      	mov	r1, r3
 800170a:	480d      	ldr	r0, [pc, #52]	; (8001740 <MX_GPIO_Init+0xa4>)
 800170c:	f000 fd74 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD0
                           PD1 PD2 PD3 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0
 8001710:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001714:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001716:	2301      	movs	r3, #1
 8001718:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171e:	2300      	movs	r3, #0
 8001720:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001722:	f107 030c 	add.w	r3, r7, #12
 8001726:	4619      	mov	r1, r3
 8001728:	4804      	ldr	r0, [pc, #16]	; (800173c <MX_GPIO_Init+0xa0>)
 800172a:	f000 fd65 	bl	80021f8 <HAL_GPIO_Init>

}
 800172e:	bf00      	nop
 8001730:	3720      	adds	r7, #32
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40023800 	.word	0x40023800
 800173c:	40020c00 	.word	0x40020c00
 8001740:	40020800 	.word	0x40020800

08001744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001748:	b672      	cpsid	i
}
 800174a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800174c:	e7fe      	b.n	800174c <Error_Handler+0x8>
	...

08001750 <PushBtnRead>:
#include "pushButton.h"
// 4)
// return the first detected button
// return -1 => no detection
int PushBtnRead()
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
int i;
for ( i = 0; i < nPUSH_BTN ; i++ )
 8001756:	2300      	movs	r3, #0
 8001758:	607b      	str	r3, [r7, #4]
 800175a:	e010      	b.n	800177e <PushBtnRead+0x2e>
{
if(!HAL_GPIO_ReadPin(GPIOC, (0x0001 << i)))       // PushButton Normal High, Push Low
 800175c:	2201      	movs	r2, #1
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	b29b      	uxth	r3, r3
 8001766:	4619      	mov	r1, r3
 8001768:	4809      	ldr	r0, [pc, #36]	; (8001790 <PushBtnRead+0x40>)
 800176a:	f000 fee1 	bl	8002530 <HAL_GPIO_ReadPin>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d101      	bne.n	8001778 <PushBtnRead+0x28>
return i;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	e007      	b.n	8001788 <PushBtnRead+0x38>
for ( i = 0; i < nPUSH_BTN ; i++ )
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3301      	adds	r3, #1
 800177c:	607b      	str	r3, [r7, #4]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b0f      	cmp	r3, #15
 8001782:	ddeb      	ble.n	800175c <PushBtnRead+0xc>
}
return -1;
 8001784:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001788:	4618      	mov	r0, r3
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40020800 	.word	0x40020800

08001794 <gmul>:

unsigned char gmul(unsigned char a, unsigned char b) {
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	460a      	mov	r2, r1
 800179e:	71fb      	strb	r3, [r7, #7]
 80017a0:	4613      	mov	r3, r2
 80017a2:	71bb      	strb	r3, [r7, #6]
    unsigned char p = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	73fb      	strb	r3, [r7, #15]
    unsigned char counter;
    unsigned char hi_bit_set;
    for (counter = 0; counter < 8; counter++) {
 80017a8:	2300      	movs	r3, #0
 80017aa:	73bb      	strb	r3, [r7, #14]
 80017ac:	e01c      	b.n	80017e8 <gmul+0x54>
        if ((b & 1) != 0) {
 80017ae:	79bb      	ldrb	r3, [r7, #6]
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d003      	beq.n	80017c0 <gmul+0x2c>
            p ^= a;
 80017b8:	7bfa      	ldrb	r2, [r7, #15]
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	4053      	eors	r3, r2
 80017be:	73fb      	strb	r3, [r7, #15]
        }
        hi_bit_set = (a & 0x80);
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80017c6:	737b      	strb	r3, [r7, #13]
        a <<= 1;
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	71fb      	strb	r3, [r7, #7]
        if (hi_bit_set != 0) {
 80017ce:	7b7b      	ldrb	r3, [r7, #13]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <gmul+0x48>
            a ^= 0x1b; /* x^8 + x^4 + x^3 + x + 1 */
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	f083 031b 	eor.w	r3, r3, #27
 80017da:	71fb      	strb	r3, [r7, #7]
        }
        b >>= 1;
 80017dc:	79bb      	ldrb	r3, [r7, #6]
 80017de:	085b      	lsrs	r3, r3, #1
 80017e0:	71bb      	strb	r3, [r7, #6]
    for (counter = 0; counter < 8; counter++) {
 80017e2:	7bbb      	ldrb	r3, [r7, #14]
 80017e4:	3301      	adds	r3, #1
 80017e6:	73bb      	strb	r3, [r7, #14]
 80017e8:	7bbb      	ldrb	r3, [r7, #14]
 80017ea:	2b07      	cmp	r3, #7
 80017ec:	d9df      	bls.n	80017ae <gmul+0x1a>
    }
    return p;
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	607b      	str	r3, [r7, #4]
 8001806:	4b10      	ldr	r3, [pc, #64]	; (8001848 <HAL_MspInit+0x4c>)
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	4a0f      	ldr	r2, [pc, #60]	; (8001848 <HAL_MspInit+0x4c>)
 800180c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001810:	6453      	str	r3, [r2, #68]	; 0x44
 8001812:	4b0d      	ldr	r3, [pc, #52]	; (8001848 <HAL_MspInit+0x4c>)
 8001814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	603b      	str	r3, [r7, #0]
 8001822:	4b09      	ldr	r3, [pc, #36]	; (8001848 <HAL_MspInit+0x4c>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	4a08      	ldr	r2, [pc, #32]	; (8001848 <HAL_MspInit+0x4c>)
 8001828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800182c:	6413      	str	r3, [r2, #64]	; 0x40
 800182e:	4b06      	ldr	r3, [pc, #24]	; (8001848 <HAL_MspInit+0x4c>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001836:	603b      	str	r3, [r7, #0]
 8001838:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	40023800 	.word	0x40023800

0800184c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <NMI_Handler+0x4>

08001852 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001856:	e7fe      	b.n	8001856 <HardFault_Handler+0x4>

08001858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800185c:	e7fe      	b.n	800185c <MemManage_Handler+0x4>

0800185e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001862:	e7fe      	b.n	8001862 <BusFault_Handler+0x4>

08001864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001868:	e7fe      	b.n	8001868 <UsageFault_Handler+0x4>

0800186a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001898:	f000 fb84 	bl	8001fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}

080018a0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]
 80018b0:	e00a      	b.n	80018c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018b2:	f3af 8000 	nop.w
 80018b6:	4601      	mov	r1, r0
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	1c5a      	adds	r2, r3, #1
 80018bc:	60ba      	str	r2, [r7, #8]
 80018be:	b2ca      	uxtb	r2, r1
 80018c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	3301      	adds	r3, #1
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	697a      	ldr	r2, [r7, #20]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	dbf0      	blt.n	80018b2 <_read+0x12>
	}

return len;
 80018d0:	687b      	ldr	r3, [r7, #4]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b086      	sub	sp, #24
 80018de:	af00      	add	r7, sp, #0
 80018e0:	60f8      	str	r0, [r7, #12]
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
 80018ea:	e009      	b.n	8001900 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	1c5a      	adds	r2, r3, #1
 80018f0:	60ba      	str	r2, [r7, #8]
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	3301      	adds	r3, #1
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	429a      	cmp	r2, r3
 8001906:	dbf1      	blt.n	80018ec <_write+0x12>
	}
	return len;
 8001908:	687b      	ldr	r3, [r7, #4]
}
 800190a:	4618      	mov	r0, r3
 800190c:	3718      	adds	r7, #24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <_close>:

int _close(int file)
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
	return -1;
 800191a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800191e:	4618      	mov	r0, r3
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
 8001932:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800193a:	605a      	str	r2, [r3, #4]
	return 0;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <_isatty>:

int _isatty(int file)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
	return 1;
 8001952:	2301      	movs	r3, #1
}
 8001954:	4618      	mov	r0, r3
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
	return 0;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
	...

0800197c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001984:	4a14      	ldr	r2, [pc, #80]	; (80019d8 <_sbrk+0x5c>)
 8001986:	4b15      	ldr	r3, [pc, #84]	; (80019dc <_sbrk+0x60>)
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001990:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <_sbrk+0x64>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d102      	bne.n	800199e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001998:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <_sbrk+0x64>)
 800199a:	4a12      	ldr	r2, [pc, #72]	; (80019e4 <_sbrk+0x68>)
 800199c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <_sbrk+0x64>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4413      	add	r3, r2
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d207      	bcs.n	80019bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019ac:	f001 fa0e 	bl	8002dcc <__errno>
 80019b0:	4603      	mov	r3, r0
 80019b2:	220c      	movs	r2, #12
 80019b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019b6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ba:	e009      	b.n	80019d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019bc:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <_sbrk+0x64>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019c2:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <_sbrk+0x64>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4413      	add	r3, r2
 80019ca:	4a05      	ldr	r2, [pc, #20]	; (80019e0 <_sbrk+0x64>)
 80019cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ce:	68fb      	ldr	r3, [r7, #12]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20020000 	.word	0x20020000
 80019dc:	00000400 	.word	0x00000400
 80019e0:	2000008c 	.word	0x2000008c
 80019e4:	200000b0 	.word	0x200000b0

080019e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019ec:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <SystemInit+0x20>)
 80019ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019f2:	4a05      	ldr	r2, [pc, #20]	; (8001a08 <SystemInit+0x20>)
 80019f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <dataportDirectionOut>:
#define E_LOW   {HAL_GPIO_WritePin(LCD_SIGNAL_CON, (0x0100 << LCD_E), GPIO_PIN_RESET);HAL_Delay(1);}
#define RS_HIGH   {HAL_GPIO_WritePin(LCD_SIGNAL_CON, (0x0100 << LCD_RS), GPIO_PIN_SET);HAL_Delay(1);}
#define RS_LOW   {HAL_GPIO_WritePin(LCD_SIGNAL_CON, (0x0100 << LCD_RS), GPIO_PIN_RESET);HAL_Delay(1);}
// TRUE=> out  , FALSE => In
void dataportDirectionOut(int bTrue)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b088      	sub	sp, #32
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001a14:	f107 030c 	add.w	r3, r7, #12
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
if ( bTrue)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d008      	beq.n	8001a3c <dataportDirectionOut+0x30>
{
GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a2a:	23ff      	movs	r3, #255	; 0xff
 8001a2c:	60fb      	str	r3, [r7, #12]
|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	613b      	str	r3, [r7, #16]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61bb      	str	r3, [r7, #24]
 8001a3a:	e005      	b.n	8001a48 <dataportDirectionOut+0x3c>
}
else
{
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a3c:	23ff      	movs	r3, #255	; 0xff
 8001a3e:	60fb      	str	r3, [r7, #12]
	|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a40:	2300      	movs	r3, #0
 8001a42:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
	}
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a48:	f107 030c 	add.w	r3, r7, #12
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4803      	ldr	r0, [pc, #12]	; (8001a5c <dataportDirectionOut+0x50>)
 8001a50:	f000 fbd2 	bl	80021f8 <HAL_GPIO_Init>
}
 8001a54:	bf00      	nop
 8001a56:	3720      	adds	r7, #32
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40020c00 	.word	0x40020c00

08001a60 <IsBusy>:
int IsBusy()
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
int  rdata;
dataportDirectionOut(FALSE);  // dataport mode: input set
 8001a66:	2000      	movs	r0, #0
 8001a68:	f7ff ffd0 	bl	8001a0c <dataportDirectionOut>
RW_HIGH
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a72:	481e      	ldr	r0, [pc, #120]	; (8001aec <IsBusy+0x8c>)
 8001a74:	f000 fd74 	bl	8002560 <HAL_GPIO_WritePin>
 8001a78:	2001      	movs	r0, #1
 8001a7a:	f000 fab3 	bl	8001fe4 <HAL_Delay>
RS_LOW
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a84:	4819      	ldr	r0, [pc, #100]	; (8001aec <IsBusy+0x8c>)
 8001a86:	f000 fd6b 	bl	8002560 <HAL_GPIO_WritePin>
 8001a8a:	2001      	movs	r0, #1
 8001a8c:	f000 faaa 	bl	8001fe4 <HAL_Delay>
E_HIGH
 8001a90:	2201      	movs	r2, #1
 8001a92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a96:	4815      	ldr	r0, [pc, #84]	; (8001aec <IsBusy+0x8c>)
 8001a98:	f000 fd62 	bl	8002560 <HAL_GPIO_WritePin>
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	f000 faa1 	bl	8001fe4 <HAL_Delay>
rdata = HAL_GPIO_ReadPin(LCD_DATA_CON, (0x0001 << BUSY_BIT_nTH)); // data port read
 8001aa2:	2180      	movs	r1, #128	; 0x80
 8001aa4:	4811      	ldr	r0, [pc, #68]	; (8001aec <IsBusy+0x8c>)
 8001aa6:	f000 fd43 	bl	8002530 <HAL_GPIO_ReadPin>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	607b      	str	r3, [r7, #4]
E_LOW
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ab4:	480d      	ldr	r0, [pc, #52]	; (8001aec <IsBusy+0x8c>)
 8001ab6:	f000 fd53 	bl	8002560 <HAL_GPIO_WritePin>
 8001aba:	2001      	movs	r0, #1
 8001abc:	f000 fa92 	bl	8001fe4 <HAL_Delay>
RW_LOW
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ac6:	4809      	ldr	r0, [pc, #36]	; (8001aec <IsBusy+0x8c>)
 8001ac8:	f000 fd4a 	bl	8002560 <HAL_GPIO_WritePin>
 8001acc:	2001      	movs	r0, #1
 8001ace:	f000 fa89 	bl	8001fe4 <HAL_Delay>
if (rdata & Busy_Flag)       // Busy Flag(BF) bit check
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f003 0310 	and.w	r3, r3, #16
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <IsBusy+0x80>
return TRUE;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e000      	b.n	8001ae2 <IsBusy+0x82>
return FALSE;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40020c00 	.word	0x40020c00

08001af0 <writeDataPort>:

void writeDataPort(int nData)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
int i;
for ( i = 0; i < 8 ; i++)
 8001af8:	2300      	movs	r3, #0
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	e01f      	b.n	8001b3e <writeDataPort+0x4e>
{
if ( (nData>>i) & 1 )
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	fa42 f303 	asr.w	r3, r2, r3
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00a      	beq.n	8001b24 <writeDataPort+0x34>
HAL_GPIO_WritePin(LCD_DATA_CON, (0x0001 << i), GPIO_PIN_SET);
 8001b0e:	2201      	movs	r2, #1
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	2201      	movs	r2, #1
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	480c      	ldr	r0, [pc, #48]	; (8001b50 <writeDataPort+0x60>)
 8001b1e:	f000 fd1f 	bl	8002560 <HAL_GPIO_WritePin>
 8001b22:	e009      	b.n	8001b38 <writeDataPort+0x48>
else
HAL_GPIO_WritePin(LCD_DATA_CON, (0x0001 << i), GPIO_PIN_RESET);
 8001b24:	2201      	movs	r2, #1
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	2200      	movs	r2, #0
 8001b30:	4619      	mov	r1, r3
 8001b32:	4807      	ldr	r0, [pc, #28]	; (8001b50 <writeDataPort+0x60>)
 8001b34:	f000 fd14 	bl	8002560 <HAL_GPIO_WritePin>
for ( i = 0; i < 8 ; i++)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2b07      	cmp	r3, #7
 8001b42:	dddc      	ble.n	8001afe <writeDataPort+0xe>
}
}
 8001b44:	bf00      	nop
 8001b46:	bf00      	nop
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40020c00 	.word	0x40020c00

08001b54 <writeCmd>:
int writeCmd(int nCmd)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
if ( IsBusy())
 8001b5c:	f7ff ff80 	bl	8001a60 <IsBusy>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <writeCmd+0x16>
return FALSE;
 8001b66:	2300      	movs	r3, #0
 8001b68:	e02d      	b.n	8001bc6 <writeCmd+0x72>
dataportDirectionOut(TRUE); // dataport output
 8001b6a:	2001      	movs	r0, #1
 8001b6c:	f7ff ff4e 	bl	8001a0c <dataportDirectionOut>

RW_LOW
 8001b70:	2200      	movs	r2, #0
 8001b72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b76:	4816      	ldr	r0, [pc, #88]	; (8001bd0 <writeCmd+0x7c>)
 8001b78:	f000 fcf2 	bl	8002560 <HAL_GPIO_WritePin>
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	f000 fa31 	bl	8001fe4 <HAL_Delay>
RS_LOW
 8001b82:	2200      	movs	r2, #0
 8001b84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b88:	4811      	ldr	r0, [pc, #68]	; (8001bd0 <writeCmd+0x7c>)
 8001b8a:	f000 fce9 	bl	8002560 <HAL_GPIO_WritePin>
 8001b8e:	2001      	movs	r0, #1
 8001b90:	f000 fa28 	bl	8001fe4 <HAL_Delay>
writeDataPort(nCmd);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff ffab 	bl	8001af0 <writeDataPort>
E_HIGH
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ba0:	480b      	ldr	r0, [pc, #44]	; (8001bd0 <writeCmd+0x7c>)
 8001ba2:	f000 fcdd 	bl	8002560 <HAL_GPIO_WritePin>
 8001ba6:	2001      	movs	r0, #1
 8001ba8:	f000 fa1c 	bl	8001fe4 <HAL_Delay>
E_LOW
 8001bac:	2200      	movs	r2, #0
 8001bae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bb2:	4807      	ldr	r0, [pc, #28]	; (8001bd0 <writeCmd+0x7c>)
 8001bb4:	f000 fcd4 	bl	8002560 <HAL_GPIO_WritePin>
 8001bb8:	2001      	movs	r0, #1
 8001bba:	f000 fa13 	bl	8001fe4 <HAL_Delay>
dataportDirectionOut(FALSE); // dataport input
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	f7ff ff24 	bl	8001a0c <dataportDirectionOut>
return TRUE;
 8001bc4:	2301      	movs	r3, #1
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40020c00 	.word	0x40020c00

08001bd4 <setDDRAMAddr>:
int setDDRAMAddr(int x , int y)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
int cmd = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	60fb      	str	r3, [r7, #12]
if(IsBusy())
 8001be2:	f7ff ff3d 	bl	8001a60 <IsBusy>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <setDDRAMAddr+0x1c>
return FALSE;
 8001bec:	2300      	movs	r3, #0
 8001bee:	e022      	b.n	8001c36 <setDDRAMAddr+0x62>
if ( y == 1 )
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d102      	bne.n	8001bfc <setDDRAMAddr+0x28>
cmd = DDRAM_ADDR_LINE_1 +x;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	e008      	b.n	8001c0e <setDDRAMAddr+0x3a>
else if(y == 2 )
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d103      	bne.n	8001c0a <setDDRAMAddr+0x36>
cmd = DDRAM_ADDR_LINE_2 +x;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	3340      	adds	r3, #64	; 0x40
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	e001      	b.n	8001c0e <setDDRAMAddr+0x3a>
else
return FALSE;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	e013      	b.n	8001c36 <setDDRAMAddr+0x62>
if ( cmd >= 0x80)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2b7f      	cmp	r3, #127	; 0x7f
 8001c12:	dd01      	ble.n	8001c18 <setDDRAMAddr+0x44>
return FALSE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	e00e      	b.n	8001c36 <setDDRAMAddr+0x62>
if (!writeCmd(cmd | SET_DDRAM_ADD_DEF))
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff ff98 	bl	8001b54 <writeCmd>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <setDDRAMAddr+0x5a>
return FALSE;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e003      	b.n	8001c36 <setDDRAMAddr+0x62>
HAL_Delay(1);
 8001c2e:	2001      	movs	r0, #1
 8001c30:	f000 f9d8 	bl	8001fe4 <HAL_Delay>
return TRUE;
 8001c34:	2301      	movs	r3, #1
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <displayMode>:
int displayMode(int bCursor, int bCursorblink, int blcd  )
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b086      	sub	sp, #24
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	60f8      	str	r0, [r7, #12]
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	607a      	str	r2, [r7, #4]
int cmd  = 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
if ( bCursor)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <displayMode+0x1a>
cmd = DIS_CURSOR;
 8001c54:	2302      	movs	r3, #2
 8001c56:	617b      	str	r3, [r7, #20]
if (bCursorblink )
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <displayMode+0x28>
cmd |= DIS_CUR_BLINK;
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	617b      	str	r3, [r7, #20]
if ( blcd )
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <displayMode+0x36>
cmd |= DIS_LCD;
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	f043 0304 	orr.w	r3, r3, #4
 8001c72:	617b      	str	r3, [r7, #20]
if (!writeCmd(cmd | DIS_DEF))
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	f043 0308 	orr.w	r3, r3, #8
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff ff6a 	bl	8001b54 <writeCmd>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <displayMode+0x4c>
return FALSE;
 8001c86:	2300      	movs	r3, #0
 8001c88:	e000      	b.n	8001c8c <displayMode+0x4e>
return TRUE;
 8001c8a:	2301      	movs	r3, #1
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3718      	adds	r7, #24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <writeCh>:
int writeCh(int ch)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
if ( IsBusy())
 8001c9c:	f7ff fee0 	bl	8001a60 <IsBusy>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <writeCh+0x16>
return FALSE;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	e027      	b.n	8001cfa <writeCh+0x66>
dataportDirectionOut(TRUE); // dataport output
 8001caa:	2001      	movs	r0, #1
 8001cac:	f7ff feae 	bl	8001a0c <dataportDirectionOut>
writeDataPort(ch);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff ff1d 	bl	8001af0 <writeDataPort>
RS_HIGH
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cbc:	4811      	ldr	r0, [pc, #68]	; (8001d04 <writeCh+0x70>)
 8001cbe:	f000 fc4f 	bl	8002560 <HAL_GPIO_WritePin>
 8001cc2:	2001      	movs	r0, #1
 8001cc4:	f000 f98e 	bl	8001fe4 <HAL_Delay>
E_HIGH
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cce:	480d      	ldr	r0, [pc, #52]	; (8001d04 <writeCh+0x70>)
 8001cd0:	f000 fc46 	bl	8002560 <HAL_GPIO_WritePin>
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	f000 f985 	bl	8001fe4 <HAL_Delay>
E_LOW
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ce0:	4808      	ldr	r0, [pc, #32]	; (8001d04 <writeCh+0x70>)
 8001ce2:	f000 fc3d 	bl	8002560 <HAL_GPIO_WritePin>
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	f000 f97c 	bl	8001fe4 <HAL_Delay>
HAL_Delay(1);
 8001cec:	2001      	movs	r0, #1
 8001cee:	f000 f979 	bl	8001fe4 <HAL_Delay>
dataportDirectionOut(FALSE); // dataport input
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	f7ff fe8a 	bl	8001a0c <dataportDirectionOut>
return TRUE;
 8001cf8:	2301      	movs	r3, #1
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40020c00 	.word	0x40020c00

08001d08 <functionSet>:
if (!writeCmd(cmd))
return FALSE;
return TRUE;
}
int functionSet(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
	int cmd = 0x0038; // 5*8 dot charater, 8bit interface, 2 line
 8001d0e:	2338      	movs	r3, #56	; 0x38
 8001d10:	607b      	str	r3, [r7, #4]
	if (!writeCmd(cmd))
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff ff1e 	bl	8001b54 <writeCmd>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <functionSet+0x1a>
	return FALSE;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	e000      	b.n	8001d24 <functionSet+0x1c>
	return TRUE;
 8001d22:	2301      	movs	r3, #1
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <writeStr>:
int writeStr(char* str)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
int cdata;
int i;
for(i =0; i < strlen(str) ;i++ )
 8001d34:	2300      	movs	r3, #0
 8001d36:	60bb      	str	r3, [r7, #8]
 8001d38:	e013      	b.n	8001d62 <writeStr+0x36>
{
if (str[i] == '_')
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	4413      	add	r3, r2
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	2b5f      	cmp	r3, #95	; 0x5f
 8001d44:	d102      	bne.n	8001d4c <writeStr+0x20>
cdata = (int)' ';
 8001d46:	2320      	movs	r3, #32
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	e004      	b.n	8001d56 <writeStr+0x2a>
else
cdata = (int)str[i];
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	4413      	add	r3, r2
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	60fb      	str	r3, [r7, #12]
writeCh(cdata);
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f7ff ff9c 	bl	8001c94 <writeCh>
for(i =0; i < strlen(str) ;i++ )
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7fe fa3e 	bl	80001e4 <strlen>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d8e4      	bhi.n	8001d3a <writeStr+0xe>
}
return TRUE;
 8001d70:	2301      	movs	r3, #1
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <clearScreen>:
// 0=> all line, 1= 1th line , 2 = 2th line
int clearScreen(int nline)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b084      	sub	sp, #16
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
int i;
if (nline == ALL_LINE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d110      	bne.n	8001daa <clearScreen+0x30>
{
if(IsBusy())                // Busy Flag Check
 8001d88:	f7ff fe6a 	bl	8001a60 <IsBusy>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <clearScreen+0x1c>
return FALSE;
 8001d92:	2300      	movs	r3, #0
 8001d94:	e039      	b.n	8001e0a <clearScreen+0x90>
if (!writeCmd(CLEAR_DISPLAY))       // clear display 실행 여부
 8001d96:	2001      	movs	r0, #1
 8001d98:	f7ff fedc 	bl	8001b54 <writeCmd>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <clearScreen+0x2c>
return FALSE;
 8001da2:	2300      	movs	r3, #0
 8001da4:	e031      	b.n	8001e0a <clearScreen+0x90>
return TRUE;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e02f      	b.n	8001e0a <clearScreen+0x90>
}
else if (nline == LINE_1)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d114      	bne.n	8001dda <clearScreen+0x60>
{
setDDRAMAddr(0,1);          // 0x80 - Set DDRAM Address
 8001db0:	2101      	movs	r1, #1
 8001db2:	2000      	movs	r0, #0
 8001db4:	f7ff ff0e 	bl	8001bd4 <setDDRAMAddr>
for(i = 0; i <= COLUMN_NUM ;i++ )
 8001db8:	2300      	movs	r3, #0
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	e005      	b.n	8001dca <clearScreen+0x50>
writeCh((unsigned char)' ');
 8001dbe:	2020      	movs	r0, #32
 8001dc0:	f7ff ff68 	bl	8001c94 <writeCh>
for(i = 0; i <= COLUMN_NUM ;i++ )
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2b10      	cmp	r3, #16
 8001dce:	ddf6      	ble.n	8001dbe <clearScreen+0x44>
setDDRAMAddr(0,1);
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	f7ff fefe 	bl	8001bd4 <setDDRAMAddr>
 8001dd8:	e016      	b.n	8001e08 <clearScreen+0x8e>
}
else if (nline == LINE_2)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d113      	bne.n	8001e08 <clearScreen+0x8e>
{
	setDDRAMAddr(0,2);          // 0xC0 - Move into 2nd Line
 8001de0:	2102      	movs	r1, #2
 8001de2:	2000      	movs	r0, #0
 8001de4:	f7ff fef6 	bl	8001bd4 <setDDRAMAddr>
	for(i = 0; i <= COLUMN_NUM ;i++ )
 8001de8:	2300      	movs	r3, #0
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	e005      	b.n	8001dfa <clearScreen+0x80>
	writeCh((unsigned char)' ');
 8001dee:	2020      	movs	r0, #32
 8001df0:	f7ff ff50 	bl	8001c94 <writeCh>
	for(i = 0; i <= COLUMN_NUM ;i++ )
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	3301      	adds	r3, #1
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2b10      	cmp	r3, #16
 8001dfe:	ddf6      	ble.n	8001dee <clearScreen+0x74>
	setDDRAMAddr(0,2);
 8001e00:	2102      	movs	r1, #2
 8001e02:	2000      	movs	r0, #0
 8001e04:	f7ff fee6 	bl	8001bd4 <setDDRAMAddr>
	}
	return TRUE;
 8001e08:	2301      	movs	r3, #1
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
	...

08001e14 <initlcd>:
int initlcd(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
E_LOW
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e1e:	4809      	ldr	r0, [pc, #36]	; (8001e44 <initlcd+0x30>)
 8001e20:	f000 fb9e 	bl	8002560 <HAL_GPIO_WritePin>
 8001e24:	2001      	movs	r0, #1
 8001e26:	f000 f8dd 	bl	8001fe4 <HAL_Delay>
functionSet();
 8001e2a:	f7ff ff6d 	bl	8001d08 <functionSet>
HAL_Delay(1);
 8001e2e:	2001      	movs	r0, #1
 8001e30:	f000 f8d8 	bl	8001fe4 <HAL_Delay>
displayMode(1,1,1);
 8001e34:	2201      	movs	r2, #1
 8001e36:	2101      	movs	r1, #1
 8001e38:	2001      	movs	r0, #1
 8001e3a:	f7ff ff00 	bl	8001c3e <displayMode>
return 1;
 8001e3e:	2301      	movs	r3, #1
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40020c00 	.word	0x40020c00

08001e48 <TextlcdInit>:
void TextlcdInit()
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
initlcd();
 8001e4c:	f7ff ffe2 	bl	8001e14 <initlcd>
}
 8001e50:	bf00      	nop
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <writeTextLine>:
// line argument =>must be 1 or 2 .
int writeTextLine(int line ,const char* str)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b088      	sub	sp, #32
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
char strWtext[COLUMN_NUM+1];
if (strlen(str) > COLUMN_NUM )
 8001e5e:	6838      	ldr	r0, [r7, #0]
 8001e60:	f7fe f9c0 	bl	80001e4 <strlen>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b10      	cmp	r3, #16
 8001e68:	d909      	bls.n	8001e7e <writeTextLine+0x2a>
{
strncpy(strWtext,str,COLUMN_NUM);
 8001e6a:	f107 030c 	add.w	r3, r7, #12
 8001e6e:	2210      	movs	r2, #16
 8001e70:	6839      	ldr	r1, [r7, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f001 f992 	bl	800319c <strncpy>
strWtext[COLUMN_NUM] = '\0';
 8001e78:	2300      	movs	r3, #0
 8001e7a:	773b      	strb	r3, [r7, #28]
 8001e7c:	e005      	b.n	8001e8a <writeTextLine+0x36>
}
else
{
strcpy(strWtext,str);
 8001e7e:	f107 030c 	add.w	r3, r7, #12
 8001e82:	6839      	ldr	r1, [r7, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f001 f981 	bl	800318c <strcpy>
}
setDDRAMAddr(0, line);
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	f7ff fea1 	bl	8001bd4 <setDDRAMAddr>
HAL_Delay(2);
 8001e92:	2002      	movs	r0, #2
 8001e94:	f000 f8a6 	bl	8001fe4 <HAL_Delay>
writeStr(strWtext);
 8001e98:	f107 030c 	add.w	r3, r7, #12
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff ff45 	bl	8001d2c <writeStr>
return 1;
 8001ea2:	2301      	movs	r3, #1
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3720      	adds	r7, #32
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001eac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ee4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001eb0:	480d      	ldr	r0, [pc, #52]	; (8001ee8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001eb2:	490e      	ldr	r1, [pc, #56]	; (8001eec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001eb4:	4a0e      	ldr	r2, [pc, #56]	; (8001ef0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eb8:	e002      	b.n	8001ec0 <LoopCopyDataInit>

08001eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ebe:	3304      	adds	r3, #4

08001ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ec4:	d3f9      	bcc.n	8001eba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ec6:	4a0b      	ldr	r2, [pc, #44]	; (8001ef4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ec8:	4c0b      	ldr	r4, [pc, #44]	; (8001ef8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ecc:	e001      	b.n	8001ed2 <LoopFillZerobss>

08001ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ed0:	3204      	adds	r2, #4

08001ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ed4:	d3fb      	bcc.n	8001ece <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ed6:	f7ff fd87 	bl	80019e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eda:	f000 ff7d 	bl	8002dd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ede:	f7fe fe35 	bl	8000b4c <main>
  bx  lr    
 8001ee2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ee4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ee8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001ef0:	080051b0 	.word	0x080051b0
  ldr r2, =_sbss
 8001ef4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001ef8:	200000ac 	.word	0x200000ac

08001efc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001efc:	e7fe      	b.n	8001efc <ADC_IRQHandler>
	...

08001f00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f04:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <HAL_Init+0x40>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a0d      	ldr	r2, [pc, #52]	; (8001f40 <HAL_Init+0x40>)
 8001f0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f10:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <HAL_Init+0x40>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a0a      	ldr	r2, [pc, #40]	; (8001f40 <HAL_Init+0x40>)
 8001f16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f1c:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <HAL_Init+0x40>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a07      	ldr	r2, [pc, #28]	; (8001f40 <HAL_Init+0x40>)
 8001f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f28:	2003      	movs	r0, #3
 8001f2a:	f000 f931 	bl	8002190 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f2e:	2000      	movs	r0, #0
 8001f30:	f000 f808 	bl	8001f44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f34:	f7ff fc62 	bl	80017fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40023c00 	.word	0x40023c00

08001f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f4c:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <HAL_InitTick+0x54>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <HAL_InitTick+0x58>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	4619      	mov	r1, r3
 8001f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 f93b 	bl	80021de <HAL_SYSTICK_Config>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e00e      	b.n	8001f90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b0f      	cmp	r3, #15
 8001f76:	d80a      	bhi.n	8001f8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f78:	2200      	movs	r2, #0
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f80:	f000 f911 	bl	80021a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f84:	4a06      	ldr	r2, [pc, #24]	; (8001fa0 <HAL_InitTick+0x5c>)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	e000      	b.n	8001f90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000000 	.word	0x20000000
 8001f9c:	20000008 	.word	0x20000008
 8001fa0:	20000004 	.word	0x20000004

08001fa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_IncTick+0x20>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <HAL_IncTick+0x24>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	4a04      	ldr	r2, [pc, #16]	; (8001fc8 <HAL_IncTick+0x24>)
 8001fb6:	6013      	str	r3, [r2, #0]
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	20000008 	.word	0x20000008
 8001fc8:	20000098 	.word	0x20000098

08001fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd0:	4b03      	ldr	r3, [pc, #12]	; (8001fe0 <HAL_GetTick+0x14>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	20000098 	.word	0x20000098

08001fe4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fec:	f7ff ffee 	bl	8001fcc <HAL_GetTick>
 8001ff0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ffc:	d005      	beq.n	800200a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ffe:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <HAL_Delay+0x44>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	461a      	mov	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4413      	add	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800200a:	bf00      	nop
 800200c:	f7ff ffde 	bl	8001fcc <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	429a      	cmp	r2, r3
 800201a:	d8f7      	bhi.n	800200c <HAL_Delay+0x28>
  {
  }
}
 800201c:	bf00      	nop
 800201e:	bf00      	nop
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000008 	.word	0x20000008

0800202c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800203c:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <__NVIC_SetPriorityGrouping+0x44>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002048:	4013      	ands	r3, r2
 800204a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800205c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800205e:	4a04      	ldr	r2, [pc, #16]	; (8002070 <__NVIC_SetPriorityGrouping+0x44>)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	60d3      	str	r3, [r2, #12]
}
 8002064:	bf00      	nop
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002078:	4b04      	ldr	r3, [pc, #16]	; (800208c <__NVIC_GetPriorityGrouping+0x18>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	0a1b      	lsrs	r3, r3, #8
 800207e:	f003 0307 	and.w	r3, r3, #7
}
 8002082:	4618      	mov	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	6039      	str	r1, [r7, #0]
 800209a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	db0a      	blt.n	80020ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	490c      	ldr	r1, [pc, #48]	; (80020dc <__NVIC_SetPriority+0x4c>)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	0112      	lsls	r2, r2, #4
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	440b      	add	r3, r1
 80020b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b8:	e00a      	b.n	80020d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	4908      	ldr	r1, [pc, #32]	; (80020e0 <__NVIC_SetPriority+0x50>)
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	3b04      	subs	r3, #4
 80020c8:	0112      	lsls	r2, r2, #4
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	440b      	add	r3, r1
 80020ce:	761a      	strb	r2, [r3, #24]
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	e000e100 	.word	0xe000e100
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b089      	sub	sp, #36	; 0x24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f1c3 0307 	rsb	r3, r3, #7
 80020fe:	2b04      	cmp	r3, #4
 8002100:	bf28      	it	cs
 8002102:	2304      	movcs	r3, #4
 8002104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3304      	adds	r3, #4
 800210a:	2b06      	cmp	r3, #6
 800210c:	d902      	bls.n	8002114 <NVIC_EncodePriority+0x30>
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3b03      	subs	r3, #3
 8002112:	e000      	b.n	8002116 <NVIC_EncodePriority+0x32>
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002118:	f04f 32ff 	mov.w	r2, #4294967295
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43da      	mvns	r2, r3
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	401a      	ands	r2, r3
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800212c:	f04f 31ff 	mov.w	r1, #4294967295
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	fa01 f303 	lsl.w	r3, r1, r3
 8002136:	43d9      	mvns	r1, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800213c:	4313      	orrs	r3, r2
         );
}
 800213e:	4618      	mov	r0, r3
 8002140:	3724      	adds	r7, #36	; 0x24
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
	...

0800214c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3b01      	subs	r3, #1
 8002158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800215c:	d301      	bcc.n	8002162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800215e:	2301      	movs	r3, #1
 8002160:	e00f      	b.n	8002182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002162:	4a0a      	ldr	r2, [pc, #40]	; (800218c <SysTick_Config+0x40>)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3b01      	subs	r3, #1
 8002168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800216a:	210f      	movs	r1, #15
 800216c:	f04f 30ff 	mov.w	r0, #4294967295
 8002170:	f7ff ff8e 	bl	8002090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002174:	4b05      	ldr	r3, [pc, #20]	; (800218c <SysTick_Config+0x40>)
 8002176:	2200      	movs	r2, #0
 8002178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800217a:	4b04      	ldr	r3, [pc, #16]	; (800218c <SysTick_Config+0x40>)
 800217c:	2207      	movs	r2, #7
 800217e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	e000e010 	.word	0xe000e010

08002190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7ff ff47 	bl	800202c <__NVIC_SetPriorityGrouping>
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b086      	sub	sp, #24
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	4603      	mov	r3, r0
 80021ae:	60b9      	str	r1, [r7, #8]
 80021b0:	607a      	str	r2, [r7, #4]
 80021b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021b8:	f7ff ff5c 	bl	8002074 <__NVIC_GetPriorityGrouping>
 80021bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	68b9      	ldr	r1, [r7, #8]
 80021c2:	6978      	ldr	r0, [r7, #20]
 80021c4:	f7ff ff8e 	bl	80020e4 <NVIC_EncodePriority>
 80021c8:	4602      	mov	r2, r0
 80021ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ce:	4611      	mov	r1, r2
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ff5d 	bl	8002090 <__NVIC_SetPriority>
}
 80021d6:	bf00      	nop
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff ffb0 	bl	800214c <SysTick_Config>
 80021ec:	4603      	mov	r3, r0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b089      	sub	sp, #36	; 0x24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002202:	2300      	movs	r3, #0
 8002204:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002206:	2300      	movs	r3, #0
 8002208:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800220a:	2300      	movs	r3, #0
 800220c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]
 8002212:	e16b      	b.n	80024ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002214:	2201      	movs	r2, #1
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	4013      	ands	r3, r2
 8002226:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	429a      	cmp	r2, r3
 800222e:	f040 815a 	bne.w	80024e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	2b01      	cmp	r3, #1
 800223c:	d005      	beq.n	800224a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002246:	2b02      	cmp	r3, #2
 8002248:	d130      	bne.n	80022ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	2203      	movs	r2, #3
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	43db      	mvns	r3, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4013      	ands	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	68da      	ldr	r2, [r3, #12]
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4313      	orrs	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002280:	2201      	movs	r2, #1
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	091b      	lsrs	r3, r3, #4
 8002296:	f003 0201 	and.w	r2, r3, #1
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	2b03      	cmp	r3, #3
 80022b6:	d017      	beq.n	80022e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	2203      	movs	r2, #3
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4313      	orrs	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d123      	bne.n	800233c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	08da      	lsrs	r2, r3, #3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3208      	adds	r2, #8
 80022fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002300:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	220f      	movs	r2, #15
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	691a      	ldr	r2, [r3, #16]
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	08da      	lsrs	r2, r3, #3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	3208      	adds	r2, #8
 8002336:	69b9      	ldr	r1, [r7, #24]
 8002338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	2203      	movs	r2, #3
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 0203 	and.w	r2, r3, #3
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4313      	orrs	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 80b4 	beq.w	80024e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	4b60      	ldr	r3, [pc, #384]	; (8002504 <HAL_GPIO_Init+0x30c>)
 8002384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002386:	4a5f      	ldr	r2, [pc, #380]	; (8002504 <HAL_GPIO_Init+0x30c>)
 8002388:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800238c:	6453      	str	r3, [r2, #68]	; 0x44
 800238e:	4b5d      	ldr	r3, [pc, #372]	; (8002504 <HAL_GPIO_Init+0x30c>)
 8002390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800239a:	4a5b      	ldr	r2, [pc, #364]	; (8002508 <HAL_GPIO_Init+0x310>)
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	089b      	lsrs	r3, r3, #2
 80023a0:	3302      	adds	r3, #2
 80023a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	220f      	movs	r2, #15
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4013      	ands	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a52      	ldr	r2, [pc, #328]	; (800250c <HAL_GPIO_Init+0x314>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d02b      	beq.n	800241e <HAL_GPIO_Init+0x226>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a51      	ldr	r2, [pc, #324]	; (8002510 <HAL_GPIO_Init+0x318>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d025      	beq.n	800241a <HAL_GPIO_Init+0x222>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a50      	ldr	r2, [pc, #320]	; (8002514 <HAL_GPIO_Init+0x31c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d01f      	beq.n	8002416 <HAL_GPIO_Init+0x21e>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a4f      	ldr	r2, [pc, #316]	; (8002518 <HAL_GPIO_Init+0x320>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d019      	beq.n	8002412 <HAL_GPIO_Init+0x21a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a4e      	ldr	r2, [pc, #312]	; (800251c <HAL_GPIO_Init+0x324>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d013      	beq.n	800240e <HAL_GPIO_Init+0x216>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a4d      	ldr	r2, [pc, #308]	; (8002520 <HAL_GPIO_Init+0x328>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d00d      	beq.n	800240a <HAL_GPIO_Init+0x212>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a4c      	ldr	r2, [pc, #304]	; (8002524 <HAL_GPIO_Init+0x32c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d007      	beq.n	8002406 <HAL_GPIO_Init+0x20e>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a4b      	ldr	r2, [pc, #300]	; (8002528 <HAL_GPIO_Init+0x330>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d101      	bne.n	8002402 <HAL_GPIO_Init+0x20a>
 80023fe:	2307      	movs	r3, #7
 8002400:	e00e      	b.n	8002420 <HAL_GPIO_Init+0x228>
 8002402:	2308      	movs	r3, #8
 8002404:	e00c      	b.n	8002420 <HAL_GPIO_Init+0x228>
 8002406:	2306      	movs	r3, #6
 8002408:	e00a      	b.n	8002420 <HAL_GPIO_Init+0x228>
 800240a:	2305      	movs	r3, #5
 800240c:	e008      	b.n	8002420 <HAL_GPIO_Init+0x228>
 800240e:	2304      	movs	r3, #4
 8002410:	e006      	b.n	8002420 <HAL_GPIO_Init+0x228>
 8002412:	2303      	movs	r3, #3
 8002414:	e004      	b.n	8002420 <HAL_GPIO_Init+0x228>
 8002416:	2302      	movs	r3, #2
 8002418:	e002      	b.n	8002420 <HAL_GPIO_Init+0x228>
 800241a:	2301      	movs	r3, #1
 800241c:	e000      	b.n	8002420 <HAL_GPIO_Init+0x228>
 800241e:	2300      	movs	r3, #0
 8002420:	69fa      	ldr	r2, [r7, #28]
 8002422:	f002 0203 	and.w	r2, r2, #3
 8002426:	0092      	lsls	r2, r2, #2
 8002428:	4093      	lsls	r3, r2
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4313      	orrs	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002430:	4935      	ldr	r1, [pc, #212]	; (8002508 <HAL_GPIO_Init+0x310>)
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	089b      	lsrs	r3, r3, #2
 8002436:	3302      	adds	r3, #2
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800243e:	4b3b      	ldr	r3, [pc, #236]	; (800252c <HAL_GPIO_Init+0x334>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	43db      	mvns	r3, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4013      	ands	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4313      	orrs	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002462:	4a32      	ldr	r2, [pc, #200]	; (800252c <HAL_GPIO_Init+0x334>)
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002468:	4b30      	ldr	r3, [pc, #192]	; (800252c <HAL_GPIO_Init+0x334>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	43db      	mvns	r3, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4013      	ands	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	4313      	orrs	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800248c:	4a27      	ldr	r2, [pc, #156]	; (800252c <HAL_GPIO_Init+0x334>)
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002492:	4b26      	ldr	r3, [pc, #152]	; (800252c <HAL_GPIO_Init+0x334>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	43db      	mvns	r3, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4013      	ands	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024b6:	4a1d      	ldr	r2, [pc, #116]	; (800252c <HAL_GPIO_Init+0x334>)
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024bc:	4b1b      	ldr	r3, [pc, #108]	; (800252c <HAL_GPIO_Init+0x334>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	43db      	mvns	r3, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	4313      	orrs	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024e0:	4a12      	ldr	r2, [pc, #72]	; (800252c <HAL_GPIO_Init+0x334>)
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	3301      	adds	r3, #1
 80024ea:	61fb      	str	r3, [r7, #28]
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	2b0f      	cmp	r3, #15
 80024f0:	f67f ae90 	bls.w	8002214 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024f4:	bf00      	nop
 80024f6:	bf00      	nop
 80024f8:	3724      	adds	r7, #36	; 0x24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40023800 	.word	0x40023800
 8002508:	40013800 	.word	0x40013800
 800250c:	40020000 	.word	0x40020000
 8002510:	40020400 	.word	0x40020400
 8002514:	40020800 	.word	0x40020800
 8002518:	40020c00 	.word	0x40020c00
 800251c:	40021000 	.word	0x40021000
 8002520:	40021400 	.word	0x40021400
 8002524:	40021800 	.word	0x40021800
 8002528:	40021c00 	.word	0x40021c00
 800252c:	40013c00 	.word	0x40013c00

08002530 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691a      	ldr	r2, [r3, #16]
 8002540:	887b      	ldrh	r3, [r7, #2]
 8002542:	4013      	ands	r3, r2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d002      	beq.n	800254e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002548:	2301      	movs	r3, #1
 800254a:	73fb      	strb	r3, [r7, #15]
 800254c:	e001      	b.n	8002552 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800254e:	2300      	movs	r3, #0
 8002550:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002552:	7bfb      	ldrb	r3, [r7, #15]
}
 8002554:	4618      	mov	r0, r3
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	807b      	strh	r3, [r7, #2]
 800256c:	4613      	mov	r3, r2
 800256e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002570:	787b      	ldrb	r3, [r7, #1]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002576:	887a      	ldrh	r2, [r7, #2]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800257c:	e003      	b.n	8002586 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800257e:	887b      	ldrh	r3, [r7, #2]
 8002580:	041a      	lsls	r2, r3, #16
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	619a      	str	r2, [r3, #24]
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
	...

08002594 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e264      	b.n	8002a70 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d075      	beq.n	800269e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025b2:	4ba3      	ldr	r3, [pc, #652]	; (8002840 <HAL_RCC_OscConfig+0x2ac>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 030c 	and.w	r3, r3, #12
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d00c      	beq.n	80025d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025be:	4ba0      	ldr	r3, [pc, #640]	; (8002840 <HAL_RCC_OscConfig+0x2ac>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025c6:	2b08      	cmp	r3, #8
 80025c8:	d112      	bne.n	80025f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ca:	4b9d      	ldr	r3, [pc, #628]	; (8002840 <HAL_RCC_OscConfig+0x2ac>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025d6:	d10b      	bne.n	80025f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d8:	4b99      	ldr	r3, [pc, #612]	; (8002840 <HAL_RCC_OscConfig+0x2ac>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d05b      	beq.n	800269c <HAL_RCC_OscConfig+0x108>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d157      	bne.n	800269c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e23f      	b.n	8002a70 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f8:	d106      	bne.n	8002608 <HAL_RCC_OscConfig+0x74>
 80025fa:	4b91      	ldr	r3, [pc, #580]	; (8002840 <HAL_RCC_OscConfig+0x2ac>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a90      	ldr	r2, [pc, #576]	; (8002840 <HAL_RCC_OscConfig+0x2ac>)
 8002600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002604:	6013      	str	r3, [r2, #0]
 8002606:	e01d      	b.n	8002644 <HAL_RCC_OscConfig+0xb0>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002610:	d10c      	bne.n	800262c <HAL_RCC_OscConfig+0x98>
 8002612:	4b8b      	ldr	r3, [pc, #556]	; (8002840 <HAL_RCC_OscConfig+0x2ac>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a8a      	ldr	r2, [pc, #552]	; (8002840 <HAL_RCC_OscConfig+0x2ac>)
 8002618:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	4b88      	ldr	r3, [pc, #544]	; (8002840 <HAL_RCC_OscConfig+0x2ac>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a87      	ldr	r2, [pc, #540]	; (8002840 <HAL_RCC_OscConfig+0x2ac>)
 8002624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	e00b      	b.n	8002644 <HAL_RCC_OscConfig+0xb0>
 800262c:	4b84      	ldr	r3, [pc, #528]	; (8002840 <HAL_RCC_OscConfig+0x2ac>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a83      	ldr	r2, [pc, #524]	; (8002840 <HAL_RCC_OscConfig+0x2ac>)
 8002632:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002636:	6013      	str	r3, [r2, #0]
 8002638:	4b81      	ldr	r3, [pc, #516]	; (8002840 <HAL_RCC_OscConfig+0x2ac>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a80      	ldr	r2, [pc, #512]	; (8002840 <HAL_RCC_OscConfig+0x2ac>)
 800263e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002642:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d013      	beq.n	8002674 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264c:	f7ff fcbe 	bl	8001fcc <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002654:	f7ff fcba 	bl	8001fcc <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b64      	cmp	r3, #100	; 0x64
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e204      	b.n	8002a70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002666:	4b76      	ldr	r3, [pc, #472]	; (8002840 <HAL_RCC_OscConfig+0x2ac>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0f0      	beq.n	8002654 <HAL_RCC_OscConfig+0xc0>
 8002672:	e014      	b.n	800269e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002674:	f7ff fcaa 	bl	8001fcc <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800267c:	f7ff fca6 	bl	8001fcc <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b64      	cmp	r3, #100	; 0x64
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e1f0      	b.n	8002a70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800268e:	4b6c      	ldr	r3, [pc, #432]	; (8002840 <HAL_RCC_OscConfig+0x2ac>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f0      	bne.n	800267c <HAL_RCC_OscConfig+0xe8>
 800269a:	e000      	b.n	800269e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800269c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d063      	beq.n	8002772 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026aa:	4b65      	ldr	r3, [pc, #404]	; (8002840 <HAL_RCC_OscConfig+0x2ac>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 030c 	and.w	r3, r3, #12
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00b      	beq.n	80026ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026b6:	4b62      	ldr	r3, [pc, #392]	; (8002840 <HAL_RCC_OscConfig+0x2ac>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026be:	2b08      	cmp	r3, #8
 80026c0:	d11c      	bne.n	80026fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026c2:	4b5f      	ldr	r3, [pc, #380]	; (8002840 <HAL_RCC_OscConfig+0x2ac>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d116      	bne.n	80026fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ce:	4b5c      	ldr	r3, [pc, #368]	; (8002840 <HAL_RCC_OscConfig+0x2ac>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d005      	beq.n	80026e6 <HAL_RCC_OscConfig+0x152>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d001      	beq.n	80026e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e1c4      	b.n	8002a70 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e6:	4b56      	ldr	r3, [pc, #344]	; (8002840 <HAL_RCC_OscConfig+0x2ac>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	4952      	ldr	r1, [pc, #328]	; (8002840 <HAL_RCC_OscConfig+0x2ac>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026fa:	e03a      	b.n	8002772 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d020      	beq.n	8002746 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002704:	4b4f      	ldr	r3, [pc, #316]	; (8002844 <HAL_RCC_OscConfig+0x2b0>)
 8002706:	2201      	movs	r2, #1
 8002708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270a:	f7ff fc5f 	bl	8001fcc <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002712:	f7ff fc5b 	bl	8001fcc <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e1a5      	b.n	8002a70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002724:	4b46      	ldr	r3, [pc, #280]	; (8002840 <HAL_RCC_OscConfig+0x2ac>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0f0      	beq.n	8002712 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002730:	4b43      	ldr	r3, [pc, #268]	; (8002840 <HAL_RCC_OscConfig+0x2ac>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	4940      	ldr	r1, [pc, #256]	; (8002840 <HAL_RCC_OscConfig+0x2ac>)
 8002740:	4313      	orrs	r3, r2
 8002742:	600b      	str	r3, [r1, #0]
 8002744:	e015      	b.n	8002772 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002746:	4b3f      	ldr	r3, [pc, #252]	; (8002844 <HAL_RCC_OscConfig+0x2b0>)
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274c:	f7ff fc3e 	bl	8001fcc <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002754:	f7ff fc3a 	bl	8001fcc <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e184      	b.n	8002a70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002766:	4b36      	ldr	r3, [pc, #216]	; (8002840 <HAL_RCC_OscConfig+0x2ac>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1f0      	bne.n	8002754 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0308 	and.w	r3, r3, #8
 800277a:	2b00      	cmp	r3, #0
 800277c:	d030      	beq.n	80027e0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d016      	beq.n	80027b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002786:	4b30      	ldr	r3, [pc, #192]	; (8002848 <HAL_RCC_OscConfig+0x2b4>)
 8002788:	2201      	movs	r2, #1
 800278a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800278c:	f7ff fc1e 	bl	8001fcc <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002794:	f7ff fc1a 	bl	8001fcc <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e164      	b.n	8002a70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027a6:	4b26      	ldr	r3, [pc, #152]	; (8002840 <HAL_RCC_OscConfig+0x2ac>)
 80027a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d0f0      	beq.n	8002794 <HAL_RCC_OscConfig+0x200>
 80027b2:	e015      	b.n	80027e0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027b4:	4b24      	ldr	r3, [pc, #144]	; (8002848 <HAL_RCC_OscConfig+0x2b4>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ba:	f7ff fc07 	bl	8001fcc <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027c0:	e008      	b.n	80027d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027c2:	f7ff fc03 	bl	8001fcc <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e14d      	b.n	8002a70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d4:	4b1a      	ldr	r3, [pc, #104]	; (8002840 <HAL_RCC_OscConfig+0x2ac>)
 80027d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1f0      	bne.n	80027c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0304 	and.w	r3, r3, #4
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 80a0 	beq.w	800292e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ee:	2300      	movs	r3, #0
 80027f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027f2:	4b13      	ldr	r3, [pc, #76]	; (8002840 <HAL_RCC_OscConfig+0x2ac>)
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10f      	bne.n	800281e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	60bb      	str	r3, [r7, #8]
 8002802:	4b0f      	ldr	r3, [pc, #60]	; (8002840 <HAL_RCC_OscConfig+0x2ac>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	4a0e      	ldr	r2, [pc, #56]	; (8002840 <HAL_RCC_OscConfig+0x2ac>)
 8002808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800280c:	6413      	str	r3, [r2, #64]	; 0x40
 800280e:	4b0c      	ldr	r3, [pc, #48]	; (8002840 <HAL_RCC_OscConfig+0x2ac>)
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002816:	60bb      	str	r3, [r7, #8]
 8002818:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800281a:	2301      	movs	r3, #1
 800281c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281e:	4b0b      	ldr	r3, [pc, #44]	; (800284c <HAL_RCC_OscConfig+0x2b8>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002826:	2b00      	cmp	r3, #0
 8002828:	d121      	bne.n	800286e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800282a:	4b08      	ldr	r3, [pc, #32]	; (800284c <HAL_RCC_OscConfig+0x2b8>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a07      	ldr	r2, [pc, #28]	; (800284c <HAL_RCC_OscConfig+0x2b8>)
 8002830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002834:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002836:	f7ff fbc9 	bl	8001fcc <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800283c:	e011      	b.n	8002862 <HAL_RCC_OscConfig+0x2ce>
 800283e:	bf00      	nop
 8002840:	40023800 	.word	0x40023800
 8002844:	42470000 	.word	0x42470000
 8002848:	42470e80 	.word	0x42470e80
 800284c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002850:	f7ff fbbc 	bl	8001fcc <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e106      	b.n	8002a70 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002862:	4b85      	ldr	r3, [pc, #532]	; (8002a78 <HAL_RCC_OscConfig+0x4e4>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f0      	beq.n	8002850 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d106      	bne.n	8002884 <HAL_RCC_OscConfig+0x2f0>
 8002876:	4b81      	ldr	r3, [pc, #516]	; (8002a7c <HAL_RCC_OscConfig+0x4e8>)
 8002878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287a:	4a80      	ldr	r2, [pc, #512]	; (8002a7c <HAL_RCC_OscConfig+0x4e8>)
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	6713      	str	r3, [r2, #112]	; 0x70
 8002882:	e01c      	b.n	80028be <HAL_RCC_OscConfig+0x32a>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	2b05      	cmp	r3, #5
 800288a:	d10c      	bne.n	80028a6 <HAL_RCC_OscConfig+0x312>
 800288c:	4b7b      	ldr	r3, [pc, #492]	; (8002a7c <HAL_RCC_OscConfig+0x4e8>)
 800288e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002890:	4a7a      	ldr	r2, [pc, #488]	; (8002a7c <HAL_RCC_OscConfig+0x4e8>)
 8002892:	f043 0304 	orr.w	r3, r3, #4
 8002896:	6713      	str	r3, [r2, #112]	; 0x70
 8002898:	4b78      	ldr	r3, [pc, #480]	; (8002a7c <HAL_RCC_OscConfig+0x4e8>)
 800289a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289c:	4a77      	ldr	r2, [pc, #476]	; (8002a7c <HAL_RCC_OscConfig+0x4e8>)
 800289e:	f043 0301 	orr.w	r3, r3, #1
 80028a2:	6713      	str	r3, [r2, #112]	; 0x70
 80028a4:	e00b      	b.n	80028be <HAL_RCC_OscConfig+0x32a>
 80028a6:	4b75      	ldr	r3, [pc, #468]	; (8002a7c <HAL_RCC_OscConfig+0x4e8>)
 80028a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028aa:	4a74      	ldr	r2, [pc, #464]	; (8002a7c <HAL_RCC_OscConfig+0x4e8>)
 80028ac:	f023 0301 	bic.w	r3, r3, #1
 80028b0:	6713      	str	r3, [r2, #112]	; 0x70
 80028b2:	4b72      	ldr	r3, [pc, #456]	; (8002a7c <HAL_RCC_OscConfig+0x4e8>)
 80028b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b6:	4a71      	ldr	r2, [pc, #452]	; (8002a7c <HAL_RCC_OscConfig+0x4e8>)
 80028b8:	f023 0304 	bic.w	r3, r3, #4
 80028bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d015      	beq.n	80028f2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c6:	f7ff fb81 	bl	8001fcc <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028cc:	e00a      	b.n	80028e4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028ce:	f7ff fb7d 	bl	8001fcc <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028dc:	4293      	cmp	r3, r2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e0c5      	b.n	8002a70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e4:	4b65      	ldr	r3, [pc, #404]	; (8002a7c <HAL_RCC_OscConfig+0x4e8>)
 80028e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0ee      	beq.n	80028ce <HAL_RCC_OscConfig+0x33a>
 80028f0:	e014      	b.n	800291c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f2:	f7ff fb6b 	bl	8001fcc <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028f8:	e00a      	b.n	8002910 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028fa:	f7ff fb67 	bl	8001fcc <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	f241 3288 	movw	r2, #5000	; 0x1388
 8002908:	4293      	cmp	r3, r2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e0af      	b.n	8002a70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002910:	4b5a      	ldr	r3, [pc, #360]	; (8002a7c <HAL_RCC_OscConfig+0x4e8>)
 8002912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1ee      	bne.n	80028fa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800291c:	7dfb      	ldrb	r3, [r7, #23]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d105      	bne.n	800292e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002922:	4b56      	ldr	r3, [pc, #344]	; (8002a7c <HAL_RCC_OscConfig+0x4e8>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	4a55      	ldr	r2, [pc, #340]	; (8002a7c <HAL_RCC_OscConfig+0x4e8>)
 8002928:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800292c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 809b 	beq.w	8002a6e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002938:	4b50      	ldr	r3, [pc, #320]	; (8002a7c <HAL_RCC_OscConfig+0x4e8>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f003 030c 	and.w	r3, r3, #12
 8002940:	2b08      	cmp	r3, #8
 8002942:	d05c      	beq.n	80029fe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	2b02      	cmp	r3, #2
 800294a:	d141      	bne.n	80029d0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800294c:	4b4c      	ldr	r3, [pc, #304]	; (8002a80 <HAL_RCC_OscConfig+0x4ec>)
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002952:	f7ff fb3b 	bl	8001fcc <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800295a:	f7ff fb37 	bl	8001fcc <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e081      	b.n	8002a70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800296c:	4b43      	ldr	r3, [pc, #268]	; (8002a7c <HAL_RCC_OscConfig+0x4e8>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1f0      	bne.n	800295a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	69da      	ldr	r2, [r3, #28]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	431a      	orrs	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002986:	019b      	lsls	r3, r3, #6
 8002988:	431a      	orrs	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298e:	085b      	lsrs	r3, r3, #1
 8002990:	3b01      	subs	r3, #1
 8002992:	041b      	lsls	r3, r3, #16
 8002994:	431a      	orrs	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299a:	061b      	lsls	r3, r3, #24
 800299c:	4937      	ldr	r1, [pc, #220]	; (8002a7c <HAL_RCC_OscConfig+0x4e8>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029a2:	4b37      	ldr	r3, [pc, #220]	; (8002a80 <HAL_RCC_OscConfig+0x4ec>)
 80029a4:	2201      	movs	r2, #1
 80029a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a8:	f7ff fb10 	bl	8001fcc <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b0:	f7ff fb0c 	bl	8001fcc <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e056      	b.n	8002a70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c2:	4b2e      	ldr	r3, [pc, #184]	; (8002a7c <HAL_RCC_OscConfig+0x4e8>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0f0      	beq.n	80029b0 <HAL_RCC_OscConfig+0x41c>
 80029ce:	e04e      	b.n	8002a6e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d0:	4b2b      	ldr	r3, [pc, #172]	; (8002a80 <HAL_RCC_OscConfig+0x4ec>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d6:	f7ff faf9 	bl	8001fcc <HAL_GetTick>
 80029da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029de:	f7ff faf5 	bl	8001fcc <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e03f      	b.n	8002a70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029f0:	4b22      	ldr	r3, [pc, #136]	; (8002a7c <HAL_RCC_OscConfig+0x4e8>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1f0      	bne.n	80029de <HAL_RCC_OscConfig+0x44a>
 80029fc:	e037      	b.n	8002a6e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d101      	bne.n	8002a0a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e032      	b.n	8002a70 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a0a:	4b1c      	ldr	r3, [pc, #112]	; (8002a7c <HAL_RCC_OscConfig+0x4e8>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d028      	beq.n	8002a6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d121      	bne.n	8002a6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d11a      	bne.n	8002a6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a40:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d111      	bne.n	8002a6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a50:	085b      	lsrs	r3, r3, #1
 8002a52:	3b01      	subs	r3, #1
 8002a54:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d107      	bne.n	8002a6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a64:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d001      	beq.n	8002a6e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e000      	b.n	8002a70 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3718      	adds	r7, #24
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40007000 	.word	0x40007000
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	42470060 	.word	0x42470060

08002a84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e0cc      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a98:	4b68      	ldr	r3, [pc, #416]	; (8002c3c <HAL_RCC_ClockConfig+0x1b8>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d90c      	bls.n	8002ac0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa6:	4b65      	ldr	r3, [pc, #404]	; (8002c3c <HAL_RCC_ClockConfig+0x1b8>)
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	b2d2      	uxtb	r2, r2
 8002aac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aae:	4b63      	ldr	r3, [pc, #396]	; (8002c3c <HAL_RCC_ClockConfig+0x1b8>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0307 	and.w	r3, r3, #7
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d001      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e0b8      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d020      	beq.n	8002b0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d005      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ad8:	4b59      	ldr	r3, [pc, #356]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	4a58      	ldr	r2, [pc, #352]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002ade:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ae2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0308 	and.w	r3, r3, #8
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d005      	beq.n	8002afc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002af0:	4b53      	ldr	r3, [pc, #332]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	4a52      	ldr	r2, [pc, #328]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002af6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002afa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002afc:	4b50      	ldr	r3, [pc, #320]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	494d      	ldr	r1, [pc, #308]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d044      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d107      	bne.n	8002b32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b22:	4b47      	ldr	r3, [pc, #284]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d119      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e07f      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d003      	beq.n	8002b42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b3e:	2b03      	cmp	r3, #3
 8002b40:	d107      	bne.n	8002b52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b42:	4b3f      	ldr	r3, [pc, #252]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d109      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e06f      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b52:	4b3b      	ldr	r3, [pc, #236]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e067      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b62:	4b37      	ldr	r3, [pc, #220]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f023 0203 	bic.w	r2, r3, #3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	4934      	ldr	r1, [pc, #208]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b74:	f7ff fa2a 	bl	8001fcc <HAL_GetTick>
 8002b78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b7a:	e00a      	b.n	8002b92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b7c:	f7ff fa26 	bl	8001fcc <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e04f      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b92:	4b2b      	ldr	r3, [pc, #172]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 020c 	and.w	r2, r3, #12
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d1eb      	bne.n	8002b7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ba4:	4b25      	ldr	r3, [pc, #148]	; (8002c3c <HAL_RCC_ClockConfig+0x1b8>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d20c      	bcs.n	8002bcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb2:	4b22      	ldr	r3, [pc, #136]	; (8002c3c <HAL_RCC_ClockConfig+0x1b8>)
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bba:	4b20      	ldr	r3, [pc, #128]	; (8002c3c <HAL_RCC_ClockConfig+0x1b8>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0307 	and.w	r3, r3, #7
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d001      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e032      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d008      	beq.n	8002bea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bd8:	4b19      	ldr	r3, [pc, #100]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	4916      	ldr	r1, [pc, #88]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d009      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bf6:	4b12      	ldr	r3, [pc, #72]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	490e      	ldr	r1, [pc, #56]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c0a:	f000 f821 	bl	8002c50 <HAL_RCC_GetSysClockFreq>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	091b      	lsrs	r3, r3, #4
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	490a      	ldr	r1, [pc, #40]	; (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002c1c:	5ccb      	ldrb	r3, [r1, r3]
 8002c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c22:	4a09      	ldr	r2, [pc, #36]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002c24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c26:	4b09      	ldr	r3, [pc, #36]	; (8002c4c <HAL_RCC_ClockConfig+0x1c8>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff f98a 	bl	8001f44 <HAL_InitTick>

  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40023c00 	.word	0x40023c00
 8002c40:	40023800 	.word	0x40023800
 8002c44:	08004fd8 	.word	0x08004fd8
 8002c48:	20000000 	.word	0x20000000
 8002c4c:	20000004 	.word	0x20000004

08002c50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c50:	b5b0      	push	{r4, r5, r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c56:	2100      	movs	r1, #0
 8002c58:	6079      	str	r1, [r7, #4]
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	60f9      	str	r1, [r7, #12]
 8002c5e:	2100      	movs	r1, #0
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002c62:	2100      	movs	r1, #0
 8002c64:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c66:	4952      	ldr	r1, [pc, #328]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c68:	6889      	ldr	r1, [r1, #8]
 8002c6a:	f001 010c 	and.w	r1, r1, #12
 8002c6e:	2908      	cmp	r1, #8
 8002c70:	d00d      	beq.n	8002c8e <HAL_RCC_GetSysClockFreq+0x3e>
 8002c72:	2908      	cmp	r1, #8
 8002c74:	f200 8094 	bhi.w	8002da0 <HAL_RCC_GetSysClockFreq+0x150>
 8002c78:	2900      	cmp	r1, #0
 8002c7a:	d002      	beq.n	8002c82 <HAL_RCC_GetSysClockFreq+0x32>
 8002c7c:	2904      	cmp	r1, #4
 8002c7e:	d003      	beq.n	8002c88 <HAL_RCC_GetSysClockFreq+0x38>
 8002c80:	e08e      	b.n	8002da0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c82:	4b4c      	ldr	r3, [pc, #304]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x164>)
 8002c84:	60bb      	str	r3, [r7, #8]
       break;
 8002c86:	e08e      	b.n	8002da6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c88:	4b4b      	ldr	r3, [pc, #300]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x168>)
 8002c8a:	60bb      	str	r3, [r7, #8]
      break;
 8002c8c:	e08b      	b.n	8002da6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c8e:	4948      	ldr	r1, [pc, #288]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c90:	6849      	ldr	r1, [r1, #4]
 8002c92:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002c96:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c98:	4945      	ldr	r1, [pc, #276]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c9a:	6849      	ldr	r1, [r1, #4]
 8002c9c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002ca0:	2900      	cmp	r1, #0
 8002ca2:	d024      	beq.n	8002cee <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ca4:	4942      	ldr	r1, [pc, #264]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ca6:	6849      	ldr	r1, [r1, #4]
 8002ca8:	0989      	lsrs	r1, r1, #6
 8002caa:	4608      	mov	r0, r1
 8002cac:	f04f 0100 	mov.w	r1, #0
 8002cb0:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002cb4:	f04f 0500 	mov.w	r5, #0
 8002cb8:	ea00 0204 	and.w	r2, r0, r4
 8002cbc:	ea01 0305 	and.w	r3, r1, r5
 8002cc0:	493d      	ldr	r1, [pc, #244]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x168>)
 8002cc2:	fb01 f003 	mul.w	r0, r1, r3
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	fb01 f102 	mul.w	r1, r1, r2
 8002ccc:	1844      	adds	r4, r0, r1
 8002cce:	493a      	ldr	r1, [pc, #232]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x168>)
 8002cd0:	fba2 0101 	umull	r0, r1, r2, r1
 8002cd4:	1863      	adds	r3, r4, r1
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	f04f 0300 	mov.w	r3, #0
 8002ce0:	f7fd fade 	bl	80002a0 <__aeabi_uldivmod>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	4613      	mov	r3, r2
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	e04a      	b.n	8002d84 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cee:	4b30      	ldr	r3, [pc, #192]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	099b      	lsrs	r3, r3, #6
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	f04f 0300 	mov.w	r3, #0
 8002cfa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002cfe:	f04f 0100 	mov.w	r1, #0
 8002d02:	ea02 0400 	and.w	r4, r2, r0
 8002d06:	ea03 0501 	and.w	r5, r3, r1
 8002d0a:	4620      	mov	r0, r4
 8002d0c:	4629      	mov	r1, r5
 8002d0e:	f04f 0200 	mov.w	r2, #0
 8002d12:	f04f 0300 	mov.w	r3, #0
 8002d16:	014b      	lsls	r3, r1, #5
 8002d18:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d1c:	0142      	lsls	r2, r0, #5
 8002d1e:	4610      	mov	r0, r2
 8002d20:	4619      	mov	r1, r3
 8002d22:	1b00      	subs	r0, r0, r4
 8002d24:	eb61 0105 	sbc.w	r1, r1, r5
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	f04f 0300 	mov.w	r3, #0
 8002d30:	018b      	lsls	r3, r1, #6
 8002d32:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d36:	0182      	lsls	r2, r0, #6
 8002d38:	1a12      	subs	r2, r2, r0
 8002d3a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d3e:	f04f 0000 	mov.w	r0, #0
 8002d42:	f04f 0100 	mov.w	r1, #0
 8002d46:	00d9      	lsls	r1, r3, #3
 8002d48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d4c:	00d0      	lsls	r0, r2, #3
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	1912      	adds	r2, r2, r4
 8002d54:	eb45 0303 	adc.w	r3, r5, r3
 8002d58:	f04f 0000 	mov.w	r0, #0
 8002d5c:	f04f 0100 	mov.w	r1, #0
 8002d60:	0299      	lsls	r1, r3, #10
 8002d62:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002d66:	0290      	lsls	r0, r2, #10
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4610      	mov	r0, r2
 8002d6e:	4619      	mov	r1, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	461a      	mov	r2, r3
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	f7fd fa92 	bl	80002a0 <__aeabi_uldivmod>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	4613      	mov	r3, r2
 8002d82:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d84:	4b0a      	ldr	r3, [pc, #40]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	0c1b      	lsrs	r3, r3, #16
 8002d8a:	f003 0303 	and.w	r3, r3, #3
 8002d8e:	3301      	adds	r3, #1
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9c:	60bb      	str	r3, [r7, #8]
      break;
 8002d9e:	e002      	b.n	8002da6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002da0:	4b04      	ldr	r3, [pc, #16]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x164>)
 8002da2:	60bb      	str	r3, [r7, #8]
      break;
 8002da4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002da6:	68bb      	ldr	r3, [r7, #8]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bdb0      	pop	{r4, r5, r7, pc}
 8002db0:	40023800 	.word	0x40023800
 8002db4:	00f42400 	.word	0x00f42400
 8002db8:	017d7840 	.word	0x017d7840

08002dbc <calloc>:
 8002dbc:	4b02      	ldr	r3, [pc, #8]	; (8002dc8 <calloc+0xc>)
 8002dbe:	460a      	mov	r2, r1
 8002dc0:	4601      	mov	r1, r0
 8002dc2:	6818      	ldr	r0, [r3, #0]
 8002dc4:	f000 b84a 	b.w	8002e5c <_calloc_r>
 8002dc8:	2000000c 	.word	0x2000000c

08002dcc <__errno>:
 8002dcc:	4b01      	ldr	r3, [pc, #4]	; (8002dd4 <__errno+0x8>)
 8002dce:	6818      	ldr	r0, [r3, #0]
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	2000000c 	.word	0x2000000c

08002dd8 <__libc_init_array>:
 8002dd8:	b570      	push	{r4, r5, r6, lr}
 8002dda:	4d0d      	ldr	r5, [pc, #52]	; (8002e10 <__libc_init_array+0x38>)
 8002ddc:	4c0d      	ldr	r4, [pc, #52]	; (8002e14 <__libc_init_array+0x3c>)
 8002dde:	1b64      	subs	r4, r4, r5
 8002de0:	10a4      	asrs	r4, r4, #2
 8002de2:	2600      	movs	r6, #0
 8002de4:	42a6      	cmp	r6, r4
 8002de6:	d109      	bne.n	8002dfc <__libc_init_array+0x24>
 8002de8:	4d0b      	ldr	r5, [pc, #44]	; (8002e18 <__libc_init_array+0x40>)
 8002dea:	4c0c      	ldr	r4, [pc, #48]	; (8002e1c <__libc_init_array+0x44>)
 8002dec:	f001 feb6 	bl	8004b5c <_init>
 8002df0:	1b64      	subs	r4, r4, r5
 8002df2:	10a4      	asrs	r4, r4, #2
 8002df4:	2600      	movs	r6, #0
 8002df6:	42a6      	cmp	r6, r4
 8002df8:	d105      	bne.n	8002e06 <__libc_init_array+0x2e>
 8002dfa:	bd70      	pop	{r4, r5, r6, pc}
 8002dfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e00:	4798      	blx	r3
 8002e02:	3601      	adds	r6, #1
 8002e04:	e7ee      	b.n	8002de4 <__libc_init_array+0xc>
 8002e06:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e0a:	4798      	blx	r3
 8002e0c:	3601      	adds	r6, #1
 8002e0e:	e7f2      	b.n	8002df6 <__libc_init_array+0x1e>
 8002e10:	080051a8 	.word	0x080051a8
 8002e14:	080051a8 	.word	0x080051a8
 8002e18:	080051a8 	.word	0x080051a8
 8002e1c:	080051ac 	.word	0x080051ac

08002e20 <malloc>:
 8002e20:	4b02      	ldr	r3, [pc, #8]	; (8002e2c <malloc+0xc>)
 8002e22:	4601      	mov	r1, r0
 8002e24:	6818      	ldr	r0, [r3, #0]
 8002e26:	f000 b879 	b.w	8002f1c <_malloc_r>
 8002e2a:	bf00      	nop
 8002e2c:	2000000c 	.word	0x2000000c

08002e30 <memcpy>:
 8002e30:	440a      	add	r2, r1
 8002e32:	4291      	cmp	r1, r2
 8002e34:	f100 33ff 	add.w	r3, r0, #4294967295
 8002e38:	d100      	bne.n	8002e3c <memcpy+0xc>
 8002e3a:	4770      	bx	lr
 8002e3c:	b510      	push	{r4, lr}
 8002e3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002e46:	4291      	cmp	r1, r2
 8002e48:	d1f9      	bne.n	8002e3e <memcpy+0xe>
 8002e4a:	bd10      	pop	{r4, pc}

08002e4c <memset>:
 8002e4c:	4402      	add	r2, r0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d100      	bne.n	8002e56 <memset+0xa>
 8002e54:	4770      	bx	lr
 8002e56:	f803 1b01 	strb.w	r1, [r3], #1
 8002e5a:	e7f9      	b.n	8002e50 <memset+0x4>

08002e5c <_calloc_r>:
 8002e5c:	b513      	push	{r0, r1, r4, lr}
 8002e5e:	434a      	muls	r2, r1
 8002e60:	4611      	mov	r1, r2
 8002e62:	9201      	str	r2, [sp, #4]
 8002e64:	f000 f85a 	bl	8002f1c <_malloc_r>
 8002e68:	4604      	mov	r4, r0
 8002e6a:	b118      	cbz	r0, 8002e74 <_calloc_r+0x18>
 8002e6c:	9a01      	ldr	r2, [sp, #4]
 8002e6e:	2100      	movs	r1, #0
 8002e70:	f7ff ffec 	bl	8002e4c <memset>
 8002e74:	4620      	mov	r0, r4
 8002e76:	b002      	add	sp, #8
 8002e78:	bd10      	pop	{r4, pc}
	...

08002e7c <_free_r>:
 8002e7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002e7e:	2900      	cmp	r1, #0
 8002e80:	d048      	beq.n	8002f14 <_free_r+0x98>
 8002e82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e86:	9001      	str	r0, [sp, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f1a1 0404 	sub.w	r4, r1, #4
 8002e8e:	bfb8      	it	lt
 8002e90:	18e4      	addlt	r4, r4, r3
 8002e92:	f000 fb53 	bl	800353c <__malloc_lock>
 8002e96:	4a20      	ldr	r2, [pc, #128]	; (8002f18 <_free_r+0x9c>)
 8002e98:	9801      	ldr	r0, [sp, #4]
 8002e9a:	6813      	ldr	r3, [r2, #0]
 8002e9c:	4615      	mov	r5, r2
 8002e9e:	b933      	cbnz	r3, 8002eae <_free_r+0x32>
 8002ea0:	6063      	str	r3, [r4, #4]
 8002ea2:	6014      	str	r4, [r2, #0]
 8002ea4:	b003      	add	sp, #12
 8002ea6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002eaa:	f000 bb4d 	b.w	8003548 <__malloc_unlock>
 8002eae:	42a3      	cmp	r3, r4
 8002eb0:	d90b      	bls.n	8002eca <_free_r+0x4e>
 8002eb2:	6821      	ldr	r1, [r4, #0]
 8002eb4:	1862      	adds	r2, r4, r1
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	bf04      	itt	eq
 8002eba:	681a      	ldreq	r2, [r3, #0]
 8002ebc:	685b      	ldreq	r3, [r3, #4]
 8002ebe:	6063      	str	r3, [r4, #4]
 8002ec0:	bf04      	itt	eq
 8002ec2:	1852      	addeq	r2, r2, r1
 8002ec4:	6022      	streq	r2, [r4, #0]
 8002ec6:	602c      	str	r4, [r5, #0]
 8002ec8:	e7ec      	b.n	8002ea4 <_free_r+0x28>
 8002eca:	461a      	mov	r2, r3
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	b10b      	cbz	r3, 8002ed4 <_free_r+0x58>
 8002ed0:	42a3      	cmp	r3, r4
 8002ed2:	d9fa      	bls.n	8002eca <_free_r+0x4e>
 8002ed4:	6811      	ldr	r1, [r2, #0]
 8002ed6:	1855      	adds	r5, r2, r1
 8002ed8:	42a5      	cmp	r5, r4
 8002eda:	d10b      	bne.n	8002ef4 <_free_r+0x78>
 8002edc:	6824      	ldr	r4, [r4, #0]
 8002ede:	4421      	add	r1, r4
 8002ee0:	1854      	adds	r4, r2, r1
 8002ee2:	42a3      	cmp	r3, r4
 8002ee4:	6011      	str	r1, [r2, #0]
 8002ee6:	d1dd      	bne.n	8002ea4 <_free_r+0x28>
 8002ee8:	681c      	ldr	r4, [r3, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	6053      	str	r3, [r2, #4]
 8002eee:	4421      	add	r1, r4
 8002ef0:	6011      	str	r1, [r2, #0]
 8002ef2:	e7d7      	b.n	8002ea4 <_free_r+0x28>
 8002ef4:	d902      	bls.n	8002efc <_free_r+0x80>
 8002ef6:	230c      	movs	r3, #12
 8002ef8:	6003      	str	r3, [r0, #0]
 8002efa:	e7d3      	b.n	8002ea4 <_free_r+0x28>
 8002efc:	6825      	ldr	r5, [r4, #0]
 8002efe:	1961      	adds	r1, r4, r5
 8002f00:	428b      	cmp	r3, r1
 8002f02:	bf04      	itt	eq
 8002f04:	6819      	ldreq	r1, [r3, #0]
 8002f06:	685b      	ldreq	r3, [r3, #4]
 8002f08:	6063      	str	r3, [r4, #4]
 8002f0a:	bf04      	itt	eq
 8002f0c:	1949      	addeq	r1, r1, r5
 8002f0e:	6021      	streq	r1, [r4, #0]
 8002f10:	6054      	str	r4, [r2, #4]
 8002f12:	e7c7      	b.n	8002ea4 <_free_r+0x28>
 8002f14:	b003      	add	sp, #12
 8002f16:	bd30      	pop	{r4, r5, pc}
 8002f18:	20000090 	.word	0x20000090

08002f1c <_malloc_r>:
 8002f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f1e:	1ccd      	adds	r5, r1, #3
 8002f20:	f025 0503 	bic.w	r5, r5, #3
 8002f24:	3508      	adds	r5, #8
 8002f26:	2d0c      	cmp	r5, #12
 8002f28:	bf38      	it	cc
 8002f2a:	250c      	movcc	r5, #12
 8002f2c:	2d00      	cmp	r5, #0
 8002f2e:	4606      	mov	r6, r0
 8002f30:	db01      	blt.n	8002f36 <_malloc_r+0x1a>
 8002f32:	42a9      	cmp	r1, r5
 8002f34:	d903      	bls.n	8002f3e <_malloc_r+0x22>
 8002f36:	230c      	movs	r3, #12
 8002f38:	6033      	str	r3, [r6, #0]
 8002f3a:	2000      	movs	r0, #0
 8002f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f3e:	f000 fafd 	bl	800353c <__malloc_lock>
 8002f42:	4921      	ldr	r1, [pc, #132]	; (8002fc8 <_malloc_r+0xac>)
 8002f44:	680a      	ldr	r2, [r1, #0]
 8002f46:	4614      	mov	r4, r2
 8002f48:	b99c      	cbnz	r4, 8002f72 <_malloc_r+0x56>
 8002f4a:	4f20      	ldr	r7, [pc, #128]	; (8002fcc <_malloc_r+0xb0>)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	b923      	cbnz	r3, 8002f5a <_malloc_r+0x3e>
 8002f50:	4621      	mov	r1, r4
 8002f52:	4630      	mov	r0, r6
 8002f54:	f000 f86a 	bl	800302c <_sbrk_r>
 8002f58:	6038      	str	r0, [r7, #0]
 8002f5a:	4629      	mov	r1, r5
 8002f5c:	4630      	mov	r0, r6
 8002f5e:	f000 f865 	bl	800302c <_sbrk_r>
 8002f62:	1c43      	adds	r3, r0, #1
 8002f64:	d123      	bne.n	8002fae <_malloc_r+0x92>
 8002f66:	230c      	movs	r3, #12
 8002f68:	6033      	str	r3, [r6, #0]
 8002f6a:	4630      	mov	r0, r6
 8002f6c:	f000 faec 	bl	8003548 <__malloc_unlock>
 8002f70:	e7e3      	b.n	8002f3a <_malloc_r+0x1e>
 8002f72:	6823      	ldr	r3, [r4, #0]
 8002f74:	1b5b      	subs	r3, r3, r5
 8002f76:	d417      	bmi.n	8002fa8 <_malloc_r+0x8c>
 8002f78:	2b0b      	cmp	r3, #11
 8002f7a:	d903      	bls.n	8002f84 <_malloc_r+0x68>
 8002f7c:	6023      	str	r3, [r4, #0]
 8002f7e:	441c      	add	r4, r3
 8002f80:	6025      	str	r5, [r4, #0]
 8002f82:	e004      	b.n	8002f8e <_malloc_r+0x72>
 8002f84:	6863      	ldr	r3, [r4, #4]
 8002f86:	42a2      	cmp	r2, r4
 8002f88:	bf0c      	ite	eq
 8002f8a:	600b      	streq	r3, [r1, #0]
 8002f8c:	6053      	strne	r3, [r2, #4]
 8002f8e:	4630      	mov	r0, r6
 8002f90:	f000 fada 	bl	8003548 <__malloc_unlock>
 8002f94:	f104 000b 	add.w	r0, r4, #11
 8002f98:	1d23      	adds	r3, r4, #4
 8002f9a:	f020 0007 	bic.w	r0, r0, #7
 8002f9e:	1ac2      	subs	r2, r0, r3
 8002fa0:	d0cc      	beq.n	8002f3c <_malloc_r+0x20>
 8002fa2:	1a1b      	subs	r3, r3, r0
 8002fa4:	50a3      	str	r3, [r4, r2]
 8002fa6:	e7c9      	b.n	8002f3c <_malloc_r+0x20>
 8002fa8:	4622      	mov	r2, r4
 8002faa:	6864      	ldr	r4, [r4, #4]
 8002fac:	e7cc      	b.n	8002f48 <_malloc_r+0x2c>
 8002fae:	1cc4      	adds	r4, r0, #3
 8002fb0:	f024 0403 	bic.w	r4, r4, #3
 8002fb4:	42a0      	cmp	r0, r4
 8002fb6:	d0e3      	beq.n	8002f80 <_malloc_r+0x64>
 8002fb8:	1a21      	subs	r1, r4, r0
 8002fba:	4630      	mov	r0, r6
 8002fbc:	f000 f836 	bl	800302c <_sbrk_r>
 8002fc0:	3001      	adds	r0, #1
 8002fc2:	d1dd      	bne.n	8002f80 <_malloc_r+0x64>
 8002fc4:	e7cf      	b.n	8002f66 <_malloc_r+0x4a>
 8002fc6:	bf00      	nop
 8002fc8:	20000090 	.word	0x20000090
 8002fcc:	20000094 	.word	0x20000094

08002fd0 <iprintf>:
 8002fd0:	b40f      	push	{r0, r1, r2, r3}
 8002fd2:	4b0a      	ldr	r3, [pc, #40]	; (8002ffc <iprintf+0x2c>)
 8002fd4:	b513      	push	{r0, r1, r4, lr}
 8002fd6:	681c      	ldr	r4, [r3, #0]
 8002fd8:	b124      	cbz	r4, 8002fe4 <iprintf+0x14>
 8002fda:	69a3      	ldr	r3, [r4, #24]
 8002fdc:	b913      	cbnz	r3, 8002fe4 <iprintf+0x14>
 8002fde:	4620      	mov	r0, r4
 8002fe0:	f000 f9fa 	bl	80033d8 <__sinit>
 8002fe4:	ab05      	add	r3, sp, #20
 8002fe6:	9a04      	ldr	r2, [sp, #16]
 8002fe8:	68a1      	ldr	r1, [r4, #8]
 8002fea:	9301      	str	r3, [sp, #4]
 8002fec:	4620      	mov	r0, r4
 8002fee:	f000 fe09 	bl	8003c04 <_vfiprintf_r>
 8002ff2:	b002      	add	sp, #8
 8002ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ff8:	b004      	add	sp, #16
 8002ffa:	4770      	bx	lr
 8002ffc:	2000000c 	.word	0x2000000c

08003000 <putchar>:
 8003000:	4b09      	ldr	r3, [pc, #36]	; (8003028 <putchar+0x28>)
 8003002:	b513      	push	{r0, r1, r4, lr}
 8003004:	681c      	ldr	r4, [r3, #0]
 8003006:	4601      	mov	r1, r0
 8003008:	b134      	cbz	r4, 8003018 <putchar+0x18>
 800300a:	69a3      	ldr	r3, [r4, #24]
 800300c:	b923      	cbnz	r3, 8003018 <putchar+0x18>
 800300e:	9001      	str	r0, [sp, #4]
 8003010:	4620      	mov	r0, r4
 8003012:	f000 f9e1 	bl	80033d8 <__sinit>
 8003016:	9901      	ldr	r1, [sp, #4]
 8003018:	68a2      	ldr	r2, [r4, #8]
 800301a:	4620      	mov	r0, r4
 800301c:	b002      	add	sp, #8
 800301e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003022:	f001 b9ff 	b.w	8004424 <_putc_r>
 8003026:	bf00      	nop
 8003028:	2000000c 	.word	0x2000000c

0800302c <_sbrk_r>:
 800302c:	b538      	push	{r3, r4, r5, lr}
 800302e:	4d06      	ldr	r5, [pc, #24]	; (8003048 <_sbrk_r+0x1c>)
 8003030:	2300      	movs	r3, #0
 8003032:	4604      	mov	r4, r0
 8003034:	4608      	mov	r0, r1
 8003036:	602b      	str	r3, [r5, #0]
 8003038:	f7fe fca0 	bl	800197c <_sbrk>
 800303c:	1c43      	adds	r3, r0, #1
 800303e:	d102      	bne.n	8003046 <_sbrk_r+0x1a>
 8003040:	682b      	ldr	r3, [r5, #0]
 8003042:	b103      	cbz	r3, 8003046 <_sbrk_r+0x1a>
 8003044:	6023      	str	r3, [r4, #0]
 8003046:	bd38      	pop	{r3, r4, r5, pc}
 8003048:	200000a8 	.word	0x200000a8

0800304c <siprintf>:
 800304c:	b40e      	push	{r1, r2, r3}
 800304e:	b500      	push	{lr}
 8003050:	b09c      	sub	sp, #112	; 0x70
 8003052:	ab1d      	add	r3, sp, #116	; 0x74
 8003054:	9002      	str	r0, [sp, #8]
 8003056:	9006      	str	r0, [sp, #24]
 8003058:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800305c:	4809      	ldr	r0, [pc, #36]	; (8003084 <siprintf+0x38>)
 800305e:	9107      	str	r1, [sp, #28]
 8003060:	9104      	str	r1, [sp, #16]
 8003062:	4909      	ldr	r1, [pc, #36]	; (8003088 <siprintf+0x3c>)
 8003064:	f853 2b04 	ldr.w	r2, [r3], #4
 8003068:	9105      	str	r1, [sp, #20]
 800306a:	6800      	ldr	r0, [r0, #0]
 800306c:	9301      	str	r3, [sp, #4]
 800306e:	a902      	add	r1, sp, #8
 8003070:	f000 facc 	bl	800360c <_svfiprintf_r>
 8003074:	9b02      	ldr	r3, [sp, #8]
 8003076:	2200      	movs	r2, #0
 8003078:	701a      	strb	r2, [r3, #0]
 800307a:	b01c      	add	sp, #112	; 0x70
 800307c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003080:	b003      	add	sp, #12
 8003082:	4770      	bx	lr
 8003084:	2000000c 	.word	0x2000000c
 8003088:	ffff0208 	.word	0xffff0208

0800308c <siscanf>:
 800308c:	b40e      	push	{r1, r2, r3}
 800308e:	b510      	push	{r4, lr}
 8003090:	b09f      	sub	sp, #124	; 0x7c
 8003092:	ac21      	add	r4, sp, #132	; 0x84
 8003094:	f44f 7101 	mov.w	r1, #516	; 0x204
 8003098:	f854 2b04 	ldr.w	r2, [r4], #4
 800309c:	9201      	str	r2, [sp, #4]
 800309e:	f8ad 101c 	strh.w	r1, [sp, #28]
 80030a2:	9004      	str	r0, [sp, #16]
 80030a4:	9008      	str	r0, [sp, #32]
 80030a6:	f7fd f89d 	bl	80001e4 <strlen>
 80030aa:	4b0c      	ldr	r3, [pc, #48]	; (80030dc <siscanf+0x50>)
 80030ac:	9005      	str	r0, [sp, #20]
 80030ae:	9009      	str	r0, [sp, #36]	; 0x24
 80030b0:	930d      	str	r3, [sp, #52]	; 0x34
 80030b2:	480b      	ldr	r0, [pc, #44]	; (80030e0 <siscanf+0x54>)
 80030b4:	9a01      	ldr	r2, [sp, #4]
 80030b6:	6800      	ldr	r0, [r0, #0]
 80030b8:	9403      	str	r4, [sp, #12]
 80030ba:	2300      	movs	r3, #0
 80030bc:	9311      	str	r3, [sp, #68]	; 0x44
 80030be:	9316      	str	r3, [sp, #88]	; 0x58
 80030c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030c4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80030c8:	a904      	add	r1, sp, #16
 80030ca:	4623      	mov	r3, r4
 80030cc:	f000 fbf8 	bl	80038c0 <__ssvfiscanf_r>
 80030d0:	b01f      	add	sp, #124	; 0x7c
 80030d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030d6:	b003      	add	sp, #12
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	08003107 	.word	0x08003107
 80030e0:	2000000c 	.word	0x2000000c

080030e4 <__sread>:
 80030e4:	b510      	push	{r4, lr}
 80030e6:	460c      	mov	r4, r1
 80030e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030ec:	f001 f9e2 	bl	80044b4 <_read_r>
 80030f0:	2800      	cmp	r0, #0
 80030f2:	bfab      	itete	ge
 80030f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80030f6:	89a3      	ldrhlt	r3, [r4, #12]
 80030f8:	181b      	addge	r3, r3, r0
 80030fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80030fe:	bfac      	ite	ge
 8003100:	6563      	strge	r3, [r4, #84]	; 0x54
 8003102:	81a3      	strhlt	r3, [r4, #12]
 8003104:	bd10      	pop	{r4, pc}

08003106 <__seofread>:
 8003106:	2000      	movs	r0, #0
 8003108:	4770      	bx	lr

0800310a <__swrite>:
 800310a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800310e:	461f      	mov	r7, r3
 8003110:	898b      	ldrh	r3, [r1, #12]
 8003112:	05db      	lsls	r3, r3, #23
 8003114:	4605      	mov	r5, r0
 8003116:	460c      	mov	r4, r1
 8003118:	4616      	mov	r6, r2
 800311a:	d505      	bpl.n	8003128 <__swrite+0x1e>
 800311c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003120:	2302      	movs	r3, #2
 8003122:	2200      	movs	r2, #0
 8003124:	f000 f9f8 	bl	8003518 <_lseek_r>
 8003128:	89a3      	ldrh	r3, [r4, #12]
 800312a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800312e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003132:	81a3      	strh	r3, [r4, #12]
 8003134:	4632      	mov	r2, r6
 8003136:	463b      	mov	r3, r7
 8003138:	4628      	mov	r0, r5
 800313a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800313e:	f000 b8d1 	b.w	80032e4 <_write_r>

08003142 <__sseek>:
 8003142:	b510      	push	{r4, lr}
 8003144:	460c      	mov	r4, r1
 8003146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800314a:	f000 f9e5 	bl	8003518 <_lseek_r>
 800314e:	1c43      	adds	r3, r0, #1
 8003150:	89a3      	ldrh	r3, [r4, #12]
 8003152:	bf15      	itete	ne
 8003154:	6560      	strne	r0, [r4, #84]	; 0x54
 8003156:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800315a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800315e:	81a3      	strheq	r3, [r4, #12]
 8003160:	bf18      	it	ne
 8003162:	81a3      	strhne	r3, [r4, #12]
 8003164:	bd10      	pop	{r4, pc}

08003166 <__sclose>:
 8003166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800316a:	f000 b8cd 	b.w	8003308 <_close_r>

0800316e <strcat>:
 800316e:	b510      	push	{r4, lr}
 8003170:	4602      	mov	r2, r0
 8003172:	7814      	ldrb	r4, [r2, #0]
 8003174:	4613      	mov	r3, r2
 8003176:	3201      	adds	r2, #1
 8003178:	2c00      	cmp	r4, #0
 800317a:	d1fa      	bne.n	8003172 <strcat+0x4>
 800317c:	3b01      	subs	r3, #1
 800317e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003182:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003186:	2a00      	cmp	r2, #0
 8003188:	d1f9      	bne.n	800317e <strcat+0x10>
 800318a:	bd10      	pop	{r4, pc}

0800318c <strcpy>:
 800318c:	4603      	mov	r3, r0
 800318e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003192:	f803 2b01 	strb.w	r2, [r3], #1
 8003196:	2a00      	cmp	r2, #0
 8003198:	d1f9      	bne.n	800318e <strcpy+0x2>
 800319a:	4770      	bx	lr

0800319c <strncpy>:
 800319c:	b510      	push	{r4, lr}
 800319e:	3901      	subs	r1, #1
 80031a0:	4603      	mov	r3, r0
 80031a2:	b132      	cbz	r2, 80031b2 <strncpy+0x16>
 80031a4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80031a8:	f803 4b01 	strb.w	r4, [r3], #1
 80031ac:	3a01      	subs	r2, #1
 80031ae:	2c00      	cmp	r4, #0
 80031b0:	d1f7      	bne.n	80031a2 <strncpy+0x6>
 80031b2:	441a      	add	r2, r3
 80031b4:	2100      	movs	r1, #0
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d100      	bne.n	80031bc <strncpy+0x20>
 80031ba:	bd10      	pop	{r4, pc}
 80031bc:	f803 1b01 	strb.w	r1, [r3], #1
 80031c0:	e7f9      	b.n	80031b6 <strncpy+0x1a>
	...

080031c4 <_strtol_l.isra.0>:
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031ca:	d001      	beq.n	80031d0 <_strtol_l.isra.0+0xc>
 80031cc:	2b24      	cmp	r3, #36	; 0x24
 80031ce:	d906      	bls.n	80031de <_strtol_l.isra.0+0x1a>
 80031d0:	f7ff fdfc 	bl	8002dcc <__errno>
 80031d4:	2316      	movs	r3, #22
 80031d6:	6003      	str	r3, [r0, #0]
 80031d8:	2000      	movs	r0, #0
 80031da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031de:	4f3a      	ldr	r7, [pc, #232]	; (80032c8 <_strtol_l.isra.0+0x104>)
 80031e0:	468e      	mov	lr, r1
 80031e2:	4676      	mov	r6, lr
 80031e4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80031e8:	5de5      	ldrb	r5, [r4, r7]
 80031ea:	f015 0508 	ands.w	r5, r5, #8
 80031ee:	d1f8      	bne.n	80031e2 <_strtol_l.isra.0+0x1e>
 80031f0:	2c2d      	cmp	r4, #45	; 0x2d
 80031f2:	d134      	bne.n	800325e <_strtol_l.isra.0+0x9a>
 80031f4:	f89e 4000 	ldrb.w	r4, [lr]
 80031f8:	f04f 0801 	mov.w	r8, #1
 80031fc:	f106 0e02 	add.w	lr, r6, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d05c      	beq.n	80032be <_strtol_l.isra.0+0xfa>
 8003204:	2b10      	cmp	r3, #16
 8003206:	d10c      	bne.n	8003222 <_strtol_l.isra.0+0x5e>
 8003208:	2c30      	cmp	r4, #48	; 0x30
 800320a:	d10a      	bne.n	8003222 <_strtol_l.isra.0+0x5e>
 800320c:	f89e 4000 	ldrb.w	r4, [lr]
 8003210:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003214:	2c58      	cmp	r4, #88	; 0x58
 8003216:	d14d      	bne.n	80032b4 <_strtol_l.isra.0+0xf0>
 8003218:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800321c:	2310      	movs	r3, #16
 800321e:	f10e 0e02 	add.w	lr, lr, #2
 8003222:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8003226:	f10c 3cff 	add.w	ip, ip, #4294967295
 800322a:	2600      	movs	r6, #0
 800322c:	fbbc f9f3 	udiv	r9, ip, r3
 8003230:	4635      	mov	r5, r6
 8003232:	fb03 ca19 	mls	sl, r3, r9, ip
 8003236:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800323a:	2f09      	cmp	r7, #9
 800323c:	d818      	bhi.n	8003270 <_strtol_l.isra.0+0xac>
 800323e:	463c      	mov	r4, r7
 8003240:	42a3      	cmp	r3, r4
 8003242:	dd24      	ble.n	800328e <_strtol_l.isra.0+0xca>
 8003244:	2e00      	cmp	r6, #0
 8003246:	db1f      	blt.n	8003288 <_strtol_l.isra.0+0xc4>
 8003248:	45a9      	cmp	r9, r5
 800324a:	d31d      	bcc.n	8003288 <_strtol_l.isra.0+0xc4>
 800324c:	d101      	bne.n	8003252 <_strtol_l.isra.0+0x8e>
 800324e:	45a2      	cmp	sl, r4
 8003250:	db1a      	blt.n	8003288 <_strtol_l.isra.0+0xc4>
 8003252:	fb05 4503 	mla	r5, r5, r3, r4
 8003256:	2601      	movs	r6, #1
 8003258:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800325c:	e7eb      	b.n	8003236 <_strtol_l.isra.0+0x72>
 800325e:	2c2b      	cmp	r4, #43	; 0x2b
 8003260:	bf08      	it	eq
 8003262:	f89e 4000 	ldrbeq.w	r4, [lr]
 8003266:	46a8      	mov	r8, r5
 8003268:	bf08      	it	eq
 800326a:	f106 0e02 	addeq.w	lr, r6, #2
 800326e:	e7c7      	b.n	8003200 <_strtol_l.isra.0+0x3c>
 8003270:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8003274:	2f19      	cmp	r7, #25
 8003276:	d801      	bhi.n	800327c <_strtol_l.isra.0+0xb8>
 8003278:	3c37      	subs	r4, #55	; 0x37
 800327a:	e7e1      	b.n	8003240 <_strtol_l.isra.0+0x7c>
 800327c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8003280:	2f19      	cmp	r7, #25
 8003282:	d804      	bhi.n	800328e <_strtol_l.isra.0+0xca>
 8003284:	3c57      	subs	r4, #87	; 0x57
 8003286:	e7db      	b.n	8003240 <_strtol_l.isra.0+0x7c>
 8003288:	f04f 36ff 	mov.w	r6, #4294967295
 800328c:	e7e4      	b.n	8003258 <_strtol_l.isra.0+0x94>
 800328e:	2e00      	cmp	r6, #0
 8003290:	da05      	bge.n	800329e <_strtol_l.isra.0+0xda>
 8003292:	2322      	movs	r3, #34	; 0x22
 8003294:	6003      	str	r3, [r0, #0]
 8003296:	4665      	mov	r5, ip
 8003298:	b942      	cbnz	r2, 80032ac <_strtol_l.isra.0+0xe8>
 800329a:	4628      	mov	r0, r5
 800329c:	e79d      	b.n	80031da <_strtol_l.isra.0+0x16>
 800329e:	f1b8 0f00 	cmp.w	r8, #0
 80032a2:	d000      	beq.n	80032a6 <_strtol_l.isra.0+0xe2>
 80032a4:	426d      	negs	r5, r5
 80032a6:	2a00      	cmp	r2, #0
 80032a8:	d0f7      	beq.n	800329a <_strtol_l.isra.0+0xd6>
 80032aa:	b10e      	cbz	r6, 80032b0 <_strtol_l.isra.0+0xec>
 80032ac:	f10e 31ff 	add.w	r1, lr, #4294967295
 80032b0:	6011      	str	r1, [r2, #0]
 80032b2:	e7f2      	b.n	800329a <_strtol_l.isra.0+0xd6>
 80032b4:	2430      	movs	r4, #48	; 0x30
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1b3      	bne.n	8003222 <_strtol_l.isra.0+0x5e>
 80032ba:	2308      	movs	r3, #8
 80032bc:	e7b1      	b.n	8003222 <_strtol_l.isra.0+0x5e>
 80032be:	2c30      	cmp	r4, #48	; 0x30
 80032c0:	d0a4      	beq.n	800320c <_strtol_l.isra.0+0x48>
 80032c2:	230a      	movs	r3, #10
 80032c4:	e7ad      	b.n	8003222 <_strtol_l.isra.0+0x5e>
 80032c6:	bf00      	nop
 80032c8:	08004fed 	.word	0x08004fed

080032cc <_strtol_r>:
 80032cc:	f7ff bf7a 	b.w	80031c4 <_strtol_l.isra.0>

080032d0 <strtol>:
 80032d0:	4613      	mov	r3, r2
 80032d2:	460a      	mov	r2, r1
 80032d4:	4601      	mov	r1, r0
 80032d6:	4802      	ldr	r0, [pc, #8]	; (80032e0 <strtol+0x10>)
 80032d8:	6800      	ldr	r0, [r0, #0]
 80032da:	f7ff bf73 	b.w	80031c4 <_strtol_l.isra.0>
 80032de:	bf00      	nop
 80032e0:	2000000c 	.word	0x2000000c

080032e4 <_write_r>:
 80032e4:	b538      	push	{r3, r4, r5, lr}
 80032e6:	4d07      	ldr	r5, [pc, #28]	; (8003304 <_write_r+0x20>)
 80032e8:	4604      	mov	r4, r0
 80032ea:	4608      	mov	r0, r1
 80032ec:	4611      	mov	r1, r2
 80032ee:	2200      	movs	r2, #0
 80032f0:	602a      	str	r2, [r5, #0]
 80032f2:	461a      	mov	r2, r3
 80032f4:	f7fe faf1 	bl	80018da <_write>
 80032f8:	1c43      	adds	r3, r0, #1
 80032fa:	d102      	bne.n	8003302 <_write_r+0x1e>
 80032fc:	682b      	ldr	r3, [r5, #0]
 80032fe:	b103      	cbz	r3, 8003302 <_write_r+0x1e>
 8003300:	6023      	str	r3, [r4, #0]
 8003302:	bd38      	pop	{r3, r4, r5, pc}
 8003304:	200000a8 	.word	0x200000a8

08003308 <_close_r>:
 8003308:	b538      	push	{r3, r4, r5, lr}
 800330a:	4d06      	ldr	r5, [pc, #24]	; (8003324 <_close_r+0x1c>)
 800330c:	2300      	movs	r3, #0
 800330e:	4604      	mov	r4, r0
 8003310:	4608      	mov	r0, r1
 8003312:	602b      	str	r3, [r5, #0]
 8003314:	f7fe fafd 	bl	8001912 <_close>
 8003318:	1c43      	adds	r3, r0, #1
 800331a:	d102      	bne.n	8003322 <_close_r+0x1a>
 800331c:	682b      	ldr	r3, [r5, #0]
 800331e:	b103      	cbz	r3, 8003322 <_close_r+0x1a>
 8003320:	6023      	str	r3, [r4, #0]
 8003322:	bd38      	pop	{r3, r4, r5, pc}
 8003324:	200000a8 	.word	0x200000a8

08003328 <std>:
 8003328:	2300      	movs	r3, #0
 800332a:	b510      	push	{r4, lr}
 800332c:	4604      	mov	r4, r0
 800332e:	e9c0 3300 	strd	r3, r3, [r0]
 8003332:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003336:	6083      	str	r3, [r0, #8]
 8003338:	8181      	strh	r1, [r0, #12]
 800333a:	6643      	str	r3, [r0, #100]	; 0x64
 800333c:	81c2      	strh	r2, [r0, #14]
 800333e:	6183      	str	r3, [r0, #24]
 8003340:	4619      	mov	r1, r3
 8003342:	2208      	movs	r2, #8
 8003344:	305c      	adds	r0, #92	; 0x5c
 8003346:	f7ff fd81 	bl	8002e4c <memset>
 800334a:	4b05      	ldr	r3, [pc, #20]	; (8003360 <std+0x38>)
 800334c:	6263      	str	r3, [r4, #36]	; 0x24
 800334e:	4b05      	ldr	r3, [pc, #20]	; (8003364 <std+0x3c>)
 8003350:	62a3      	str	r3, [r4, #40]	; 0x28
 8003352:	4b05      	ldr	r3, [pc, #20]	; (8003368 <std+0x40>)
 8003354:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003356:	4b05      	ldr	r3, [pc, #20]	; (800336c <std+0x44>)
 8003358:	6224      	str	r4, [r4, #32]
 800335a:	6323      	str	r3, [r4, #48]	; 0x30
 800335c:	bd10      	pop	{r4, pc}
 800335e:	bf00      	nop
 8003360:	080030e5 	.word	0x080030e5
 8003364:	0800310b 	.word	0x0800310b
 8003368:	08003143 	.word	0x08003143
 800336c:	08003167 	.word	0x08003167

08003370 <_cleanup_r>:
 8003370:	4901      	ldr	r1, [pc, #4]	; (8003378 <_cleanup_r+0x8>)
 8003372:	f000 b8af 	b.w	80034d4 <_fwalk_reent>
 8003376:	bf00      	nop
 8003378:	08004949 	.word	0x08004949

0800337c <__sfmoreglue>:
 800337c:	b570      	push	{r4, r5, r6, lr}
 800337e:	1e4a      	subs	r2, r1, #1
 8003380:	2568      	movs	r5, #104	; 0x68
 8003382:	4355      	muls	r5, r2
 8003384:	460e      	mov	r6, r1
 8003386:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800338a:	f7ff fdc7 	bl	8002f1c <_malloc_r>
 800338e:	4604      	mov	r4, r0
 8003390:	b140      	cbz	r0, 80033a4 <__sfmoreglue+0x28>
 8003392:	2100      	movs	r1, #0
 8003394:	e9c0 1600 	strd	r1, r6, [r0]
 8003398:	300c      	adds	r0, #12
 800339a:	60a0      	str	r0, [r4, #8]
 800339c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80033a0:	f7ff fd54 	bl	8002e4c <memset>
 80033a4:	4620      	mov	r0, r4
 80033a6:	bd70      	pop	{r4, r5, r6, pc}

080033a8 <__sfp_lock_acquire>:
 80033a8:	4801      	ldr	r0, [pc, #4]	; (80033b0 <__sfp_lock_acquire+0x8>)
 80033aa:	f000 b8b3 	b.w	8003514 <__retarget_lock_acquire_recursive>
 80033ae:	bf00      	nop
 80033b0:	200000a4 	.word	0x200000a4

080033b4 <__sfp_lock_release>:
 80033b4:	4801      	ldr	r0, [pc, #4]	; (80033bc <__sfp_lock_release+0x8>)
 80033b6:	f000 b8ae 	b.w	8003516 <__retarget_lock_release_recursive>
 80033ba:	bf00      	nop
 80033bc:	200000a4 	.word	0x200000a4

080033c0 <__sinit_lock_acquire>:
 80033c0:	4801      	ldr	r0, [pc, #4]	; (80033c8 <__sinit_lock_acquire+0x8>)
 80033c2:	f000 b8a7 	b.w	8003514 <__retarget_lock_acquire_recursive>
 80033c6:	bf00      	nop
 80033c8:	2000009f 	.word	0x2000009f

080033cc <__sinit_lock_release>:
 80033cc:	4801      	ldr	r0, [pc, #4]	; (80033d4 <__sinit_lock_release+0x8>)
 80033ce:	f000 b8a2 	b.w	8003516 <__retarget_lock_release_recursive>
 80033d2:	bf00      	nop
 80033d4:	2000009f 	.word	0x2000009f

080033d8 <__sinit>:
 80033d8:	b510      	push	{r4, lr}
 80033da:	4604      	mov	r4, r0
 80033dc:	f7ff fff0 	bl	80033c0 <__sinit_lock_acquire>
 80033e0:	69a3      	ldr	r3, [r4, #24]
 80033e2:	b11b      	cbz	r3, 80033ec <__sinit+0x14>
 80033e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033e8:	f7ff bff0 	b.w	80033cc <__sinit_lock_release>
 80033ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80033f0:	6523      	str	r3, [r4, #80]	; 0x50
 80033f2:	4b13      	ldr	r3, [pc, #76]	; (8003440 <__sinit+0x68>)
 80033f4:	4a13      	ldr	r2, [pc, #76]	; (8003444 <__sinit+0x6c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80033fa:	42a3      	cmp	r3, r4
 80033fc:	bf04      	itt	eq
 80033fe:	2301      	moveq	r3, #1
 8003400:	61a3      	streq	r3, [r4, #24]
 8003402:	4620      	mov	r0, r4
 8003404:	f000 f820 	bl	8003448 <__sfp>
 8003408:	6060      	str	r0, [r4, #4]
 800340a:	4620      	mov	r0, r4
 800340c:	f000 f81c 	bl	8003448 <__sfp>
 8003410:	60a0      	str	r0, [r4, #8]
 8003412:	4620      	mov	r0, r4
 8003414:	f000 f818 	bl	8003448 <__sfp>
 8003418:	2200      	movs	r2, #0
 800341a:	60e0      	str	r0, [r4, #12]
 800341c:	2104      	movs	r1, #4
 800341e:	6860      	ldr	r0, [r4, #4]
 8003420:	f7ff ff82 	bl	8003328 <std>
 8003424:	68a0      	ldr	r0, [r4, #8]
 8003426:	2201      	movs	r2, #1
 8003428:	2109      	movs	r1, #9
 800342a:	f7ff ff7d 	bl	8003328 <std>
 800342e:	68e0      	ldr	r0, [r4, #12]
 8003430:	2202      	movs	r2, #2
 8003432:	2112      	movs	r1, #18
 8003434:	f7ff ff78 	bl	8003328 <std>
 8003438:	2301      	movs	r3, #1
 800343a:	61a3      	str	r3, [r4, #24]
 800343c:	e7d2      	b.n	80033e4 <__sinit+0xc>
 800343e:	bf00      	nop
 8003440:	08004fe8 	.word	0x08004fe8
 8003444:	08003371 	.word	0x08003371

08003448 <__sfp>:
 8003448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800344a:	4607      	mov	r7, r0
 800344c:	f7ff ffac 	bl	80033a8 <__sfp_lock_acquire>
 8003450:	4b1e      	ldr	r3, [pc, #120]	; (80034cc <__sfp+0x84>)
 8003452:	681e      	ldr	r6, [r3, #0]
 8003454:	69b3      	ldr	r3, [r6, #24]
 8003456:	b913      	cbnz	r3, 800345e <__sfp+0x16>
 8003458:	4630      	mov	r0, r6
 800345a:	f7ff ffbd 	bl	80033d8 <__sinit>
 800345e:	3648      	adds	r6, #72	; 0x48
 8003460:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003464:	3b01      	subs	r3, #1
 8003466:	d503      	bpl.n	8003470 <__sfp+0x28>
 8003468:	6833      	ldr	r3, [r6, #0]
 800346a:	b30b      	cbz	r3, 80034b0 <__sfp+0x68>
 800346c:	6836      	ldr	r6, [r6, #0]
 800346e:	e7f7      	b.n	8003460 <__sfp+0x18>
 8003470:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003474:	b9d5      	cbnz	r5, 80034ac <__sfp+0x64>
 8003476:	4b16      	ldr	r3, [pc, #88]	; (80034d0 <__sfp+0x88>)
 8003478:	60e3      	str	r3, [r4, #12]
 800347a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800347e:	6665      	str	r5, [r4, #100]	; 0x64
 8003480:	f000 f847 	bl	8003512 <__retarget_lock_init_recursive>
 8003484:	f7ff ff96 	bl	80033b4 <__sfp_lock_release>
 8003488:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800348c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003490:	6025      	str	r5, [r4, #0]
 8003492:	61a5      	str	r5, [r4, #24]
 8003494:	2208      	movs	r2, #8
 8003496:	4629      	mov	r1, r5
 8003498:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800349c:	f7ff fcd6 	bl	8002e4c <memset>
 80034a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80034a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80034a8:	4620      	mov	r0, r4
 80034aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034ac:	3468      	adds	r4, #104	; 0x68
 80034ae:	e7d9      	b.n	8003464 <__sfp+0x1c>
 80034b0:	2104      	movs	r1, #4
 80034b2:	4638      	mov	r0, r7
 80034b4:	f7ff ff62 	bl	800337c <__sfmoreglue>
 80034b8:	4604      	mov	r4, r0
 80034ba:	6030      	str	r0, [r6, #0]
 80034bc:	2800      	cmp	r0, #0
 80034be:	d1d5      	bne.n	800346c <__sfp+0x24>
 80034c0:	f7ff ff78 	bl	80033b4 <__sfp_lock_release>
 80034c4:	230c      	movs	r3, #12
 80034c6:	603b      	str	r3, [r7, #0]
 80034c8:	e7ee      	b.n	80034a8 <__sfp+0x60>
 80034ca:	bf00      	nop
 80034cc:	08004fe8 	.word	0x08004fe8
 80034d0:	ffff0001 	.word	0xffff0001

080034d4 <_fwalk_reent>:
 80034d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034d8:	4606      	mov	r6, r0
 80034da:	4688      	mov	r8, r1
 80034dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80034e0:	2700      	movs	r7, #0
 80034e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80034e6:	f1b9 0901 	subs.w	r9, r9, #1
 80034ea:	d505      	bpl.n	80034f8 <_fwalk_reent+0x24>
 80034ec:	6824      	ldr	r4, [r4, #0]
 80034ee:	2c00      	cmp	r4, #0
 80034f0:	d1f7      	bne.n	80034e2 <_fwalk_reent+0xe>
 80034f2:	4638      	mov	r0, r7
 80034f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034f8:	89ab      	ldrh	r3, [r5, #12]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d907      	bls.n	800350e <_fwalk_reent+0x3a>
 80034fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003502:	3301      	adds	r3, #1
 8003504:	d003      	beq.n	800350e <_fwalk_reent+0x3a>
 8003506:	4629      	mov	r1, r5
 8003508:	4630      	mov	r0, r6
 800350a:	47c0      	blx	r8
 800350c:	4307      	orrs	r7, r0
 800350e:	3568      	adds	r5, #104	; 0x68
 8003510:	e7e9      	b.n	80034e6 <_fwalk_reent+0x12>

08003512 <__retarget_lock_init_recursive>:
 8003512:	4770      	bx	lr

08003514 <__retarget_lock_acquire_recursive>:
 8003514:	4770      	bx	lr

08003516 <__retarget_lock_release_recursive>:
 8003516:	4770      	bx	lr

08003518 <_lseek_r>:
 8003518:	b538      	push	{r3, r4, r5, lr}
 800351a:	4d07      	ldr	r5, [pc, #28]	; (8003538 <_lseek_r+0x20>)
 800351c:	4604      	mov	r4, r0
 800351e:	4608      	mov	r0, r1
 8003520:	4611      	mov	r1, r2
 8003522:	2200      	movs	r2, #0
 8003524:	602a      	str	r2, [r5, #0]
 8003526:	461a      	mov	r2, r3
 8003528:	f7fe fa1a 	bl	8001960 <_lseek>
 800352c:	1c43      	adds	r3, r0, #1
 800352e:	d102      	bne.n	8003536 <_lseek_r+0x1e>
 8003530:	682b      	ldr	r3, [r5, #0]
 8003532:	b103      	cbz	r3, 8003536 <_lseek_r+0x1e>
 8003534:	6023      	str	r3, [r4, #0]
 8003536:	bd38      	pop	{r3, r4, r5, pc}
 8003538:	200000a8 	.word	0x200000a8

0800353c <__malloc_lock>:
 800353c:	4801      	ldr	r0, [pc, #4]	; (8003544 <__malloc_lock+0x8>)
 800353e:	f7ff bfe9 	b.w	8003514 <__retarget_lock_acquire_recursive>
 8003542:	bf00      	nop
 8003544:	200000a0 	.word	0x200000a0

08003548 <__malloc_unlock>:
 8003548:	4801      	ldr	r0, [pc, #4]	; (8003550 <__malloc_unlock+0x8>)
 800354a:	f7ff bfe4 	b.w	8003516 <__retarget_lock_release_recursive>
 800354e:	bf00      	nop
 8003550:	200000a0 	.word	0x200000a0

08003554 <__ssputs_r>:
 8003554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003558:	688e      	ldr	r6, [r1, #8]
 800355a:	429e      	cmp	r6, r3
 800355c:	4682      	mov	sl, r0
 800355e:	460c      	mov	r4, r1
 8003560:	4690      	mov	r8, r2
 8003562:	461f      	mov	r7, r3
 8003564:	d838      	bhi.n	80035d8 <__ssputs_r+0x84>
 8003566:	898a      	ldrh	r2, [r1, #12]
 8003568:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800356c:	d032      	beq.n	80035d4 <__ssputs_r+0x80>
 800356e:	6825      	ldr	r5, [r4, #0]
 8003570:	6909      	ldr	r1, [r1, #16]
 8003572:	eba5 0901 	sub.w	r9, r5, r1
 8003576:	6965      	ldr	r5, [r4, #20]
 8003578:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800357c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003580:	3301      	adds	r3, #1
 8003582:	444b      	add	r3, r9
 8003584:	106d      	asrs	r5, r5, #1
 8003586:	429d      	cmp	r5, r3
 8003588:	bf38      	it	cc
 800358a:	461d      	movcc	r5, r3
 800358c:	0553      	lsls	r3, r2, #21
 800358e:	d531      	bpl.n	80035f4 <__ssputs_r+0xa0>
 8003590:	4629      	mov	r1, r5
 8003592:	f7ff fcc3 	bl	8002f1c <_malloc_r>
 8003596:	4606      	mov	r6, r0
 8003598:	b950      	cbnz	r0, 80035b0 <__ssputs_r+0x5c>
 800359a:	230c      	movs	r3, #12
 800359c:	f8ca 3000 	str.w	r3, [sl]
 80035a0:	89a3      	ldrh	r3, [r4, #12]
 80035a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035a6:	81a3      	strh	r3, [r4, #12]
 80035a8:	f04f 30ff 	mov.w	r0, #4294967295
 80035ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035b0:	6921      	ldr	r1, [r4, #16]
 80035b2:	464a      	mov	r2, r9
 80035b4:	f7ff fc3c 	bl	8002e30 <memcpy>
 80035b8:	89a3      	ldrh	r3, [r4, #12]
 80035ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80035be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035c2:	81a3      	strh	r3, [r4, #12]
 80035c4:	6126      	str	r6, [r4, #16]
 80035c6:	6165      	str	r5, [r4, #20]
 80035c8:	444e      	add	r6, r9
 80035ca:	eba5 0509 	sub.w	r5, r5, r9
 80035ce:	6026      	str	r6, [r4, #0]
 80035d0:	60a5      	str	r5, [r4, #8]
 80035d2:	463e      	mov	r6, r7
 80035d4:	42be      	cmp	r6, r7
 80035d6:	d900      	bls.n	80035da <__ssputs_r+0x86>
 80035d8:	463e      	mov	r6, r7
 80035da:	4632      	mov	r2, r6
 80035dc:	6820      	ldr	r0, [r4, #0]
 80035de:	4641      	mov	r1, r8
 80035e0:	f001 fa52 	bl	8004a88 <memmove>
 80035e4:	68a3      	ldr	r3, [r4, #8]
 80035e6:	6822      	ldr	r2, [r4, #0]
 80035e8:	1b9b      	subs	r3, r3, r6
 80035ea:	4432      	add	r2, r6
 80035ec:	60a3      	str	r3, [r4, #8]
 80035ee:	6022      	str	r2, [r4, #0]
 80035f0:	2000      	movs	r0, #0
 80035f2:	e7db      	b.n	80035ac <__ssputs_r+0x58>
 80035f4:	462a      	mov	r2, r5
 80035f6:	f001 fa61 	bl	8004abc <_realloc_r>
 80035fa:	4606      	mov	r6, r0
 80035fc:	2800      	cmp	r0, #0
 80035fe:	d1e1      	bne.n	80035c4 <__ssputs_r+0x70>
 8003600:	6921      	ldr	r1, [r4, #16]
 8003602:	4650      	mov	r0, sl
 8003604:	f7ff fc3a 	bl	8002e7c <_free_r>
 8003608:	e7c7      	b.n	800359a <__ssputs_r+0x46>
	...

0800360c <_svfiprintf_r>:
 800360c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003610:	4698      	mov	r8, r3
 8003612:	898b      	ldrh	r3, [r1, #12]
 8003614:	061b      	lsls	r3, r3, #24
 8003616:	b09d      	sub	sp, #116	; 0x74
 8003618:	4607      	mov	r7, r0
 800361a:	460d      	mov	r5, r1
 800361c:	4614      	mov	r4, r2
 800361e:	d50e      	bpl.n	800363e <_svfiprintf_r+0x32>
 8003620:	690b      	ldr	r3, [r1, #16]
 8003622:	b963      	cbnz	r3, 800363e <_svfiprintf_r+0x32>
 8003624:	2140      	movs	r1, #64	; 0x40
 8003626:	f7ff fc79 	bl	8002f1c <_malloc_r>
 800362a:	6028      	str	r0, [r5, #0]
 800362c:	6128      	str	r0, [r5, #16]
 800362e:	b920      	cbnz	r0, 800363a <_svfiprintf_r+0x2e>
 8003630:	230c      	movs	r3, #12
 8003632:	603b      	str	r3, [r7, #0]
 8003634:	f04f 30ff 	mov.w	r0, #4294967295
 8003638:	e0d1      	b.n	80037de <_svfiprintf_r+0x1d2>
 800363a:	2340      	movs	r3, #64	; 0x40
 800363c:	616b      	str	r3, [r5, #20]
 800363e:	2300      	movs	r3, #0
 8003640:	9309      	str	r3, [sp, #36]	; 0x24
 8003642:	2320      	movs	r3, #32
 8003644:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003648:	f8cd 800c 	str.w	r8, [sp, #12]
 800364c:	2330      	movs	r3, #48	; 0x30
 800364e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80037f8 <_svfiprintf_r+0x1ec>
 8003652:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003656:	f04f 0901 	mov.w	r9, #1
 800365a:	4623      	mov	r3, r4
 800365c:	469a      	mov	sl, r3
 800365e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003662:	b10a      	cbz	r2, 8003668 <_svfiprintf_r+0x5c>
 8003664:	2a25      	cmp	r2, #37	; 0x25
 8003666:	d1f9      	bne.n	800365c <_svfiprintf_r+0x50>
 8003668:	ebba 0b04 	subs.w	fp, sl, r4
 800366c:	d00b      	beq.n	8003686 <_svfiprintf_r+0x7a>
 800366e:	465b      	mov	r3, fp
 8003670:	4622      	mov	r2, r4
 8003672:	4629      	mov	r1, r5
 8003674:	4638      	mov	r0, r7
 8003676:	f7ff ff6d 	bl	8003554 <__ssputs_r>
 800367a:	3001      	adds	r0, #1
 800367c:	f000 80aa 	beq.w	80037d4 <_svfiprintf_r+0x1c8>
 8003680:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003682:	445a      	add	r2, fp
 8003684:	9209      	str	r2, [sp, #36]	; 0x24
 8003686:	f89a 3000 	ldrb.w	r3, [sl]
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 80a2 	beq.w	80037d4 <_svfiprintf_r+0x1c8>
 8003690:	2300      	movs	r3, #0
 8003692:	f04f 32ff 	mov.w	r2, #4294967295
 8003696:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800369a:	f10a 0a01 	add.w	sl, sl, #1
 800369e:	9304      	str	r3, [sp, #16]
 80036a0:	9307      	str	r3, [sp, #28]
 80036a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036a6:	931a      	str	r3, [sp, #104]	; 0x68
 80036a8:	4654      	mov	r4, sl
 80036aa:	2205      	movs	r2, #5
 80036ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036b0:	4851      	ldr	r0, [pc, #324]	; (80037f8 <_svfiprintf_r+0x1ec>)
 80036b2:	f7fc fda5 	bl	8000200 <memchr>
 80036b6:	9a04      	ldr	r2, [sp, #16]
 80036b8:	b9d8      	cbnz	r0, 80036f2 <_svfiprintf_r+0xe6>
 80036ba:	06d0      	lsls	r0, r2, #27
 80036bc:	bf44      	itt	mi
 80036be:	2320      	movmi	r3, #32
 80036c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036c4:	0711      	lsls	r1, r2, #28
 80036c6:	bf44      	itt	mi
 80036c8:	232b      	movmi	r3, #43	; 0x2b
 80036ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036ce:	f89a 3000 	ldrb.w	r3, [sl]
 80036d2:	2b2a      	cmp	r3, #42	; 0x2a
 80036d4:	d015      	beq.n	8003702 <_svfiprintf_r+0xf6>
 80036d6:	9a07      	ldr	r2, [sp, #28]
 80036d8:	4654      	mov	r4, sl
 80036da:	2000      	movs	r0, #0
 80036dc:	f04f 0c0a 	mov.w	ip, #10
 80036e0:	4621      	mov	r1, r4
 80036e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80036e6:	3b30      	subs	r3, #48	; 0x30
 80036e8:	2b09      	cmp	r3, #9
 80036ea:	d94e      	bls.n	800378a <_svfiprintf_r+0x17e>
 80036ec:	b1b0      	cbz	r0, 800371c <_svfiprintf_r+0x110>
 80036ee:	9207      	str	r2, [sp, #28]
 80036f0:	e014      	b.n	800371c <_svfiprintf_r+0x110>
 80036f2:	eba0 0308 	sub.w	r3, r0, r8
 80036f6:	fa09 f303 	lsl.w	r3, r9, r3
 80036fa:	4313      	orrs	r3, r2
 80036fc:	9304      	str	r3, [sp, #16]
 80036fe:	46a2      	mov	sl, r4
 8003700:	e7d2      	b.n	80036a8 <_svfiprintf_r+0x9c>
 8003702:	9b03      	ldr	r3, [sp, #12]
 8003704:	1d19      	adds	r1, r3, #4
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	9103      	str	r1, [sp, #12]
 800370a:	2b00      	cmp	r3, #0
 800370c:	bfbb      	ittet	lt
 800370e:	425b      	neglt	r3, r3
 8003710:	f042 0202 	orrlt.w	r2, r2, #2
 8003714:	9307      	strge	r3, [sp, #28]
 8003716:	9307      	strlt	r3, [sp, #28]
 8003718:	bfb8      	it	lt
 800371a:	9204      	strlt	r2, [sp, #16]
 800371c:	7823      	ldrb	r3, [r4, #0]
 800371e:	2b2e      	cmp	r3, #46	; 0x2e
 8003720:	d10c      	bne.n	800373c <_svfiprintf_r+0x130>
 8003722:	7863      	ldrb	r3, [r4, #1]
 8003724:	2b2a      	cmp	r3, #42	; 0x2a
 8003726:	d135      	bne.n	8003794 <_svfiprintf_r+0x188>
 8003728:	9b03      	ldr	r3, [sp, #12]
 800372a:	1d1a      	adds	r2, r3, #4
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	9203      	str	r2, [sp, #12]
 8003730:	2b00      	cmp	r3, #0
 8003732:	bfb8      	it	lt
 8003734:	f04f 33ff 	movlt.w	r3, #4294967295
 8003738:	3402      	adds	r4, #2
 800373a:	9305      	str	r3, [sp, #20]
 800373c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003808 <_svfiprintf_r+0x1fc>
 8003740:	7821      	ldrb	r1, [r4, #0]
 8003742:	2203      	movs	r2, #3
 8003744:	4650      	mov	r0, sl
 8003746:	f7fc fd5b 	bl	8000200 <memchr>
 800374a:	b140      	cbz	r0, 800375e <_svfiprintf_r+0x152>
 800374c:	2340      	movs	r3, #64	; 0x40
 800374e:	eba0 000a 	sub.w	r0, r0, sl
 8003752:	fa03 f000 	lsl.w	r0, r3, r0
 8003756:	9b04      	ldr	r3, [sp, #16]
 8003758:	4303      	orrs	r3, r0
 800375a:	3401      	adds	r4, #1
 800375c:	9304      	str	r3, [sp, #16]
 800375e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003762:	4826      	ldr	r0, [pc, #152]	; (80037fc <_svfiprintf_r+0x1f0>)
 8003764:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003768:	2206      	movs	r2, #6
 800376a:	f7fc fd49 	bl	8000200 <memchr>
 800376e:	2800      	cmp	r0, #0
 8003770:	d038      	beq.n	80037e4 <_svfiprintf_r+0x1d8>
 8003772:	4b23      	ldr	r3, [pc, #140]	; (8003800 <_svfiprintf_r+0x1f4>)
 8003774:	bb1b      	cbnz	r3, 80037be <_svfiprintf_r+0x1b2>
 8003776:	9b03      	ldr	r3, [sp, #12]
 8003778:	3307      	adds	r3, #7
 800377a:	f023 0307 	bic.w	r3, r3, #7
 800377e:	3308      	adds	r3, #8
 8003780:	9303      	str	r3, [sp, #12]
 8003782:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003784:	4433      	add	r3, r6
 8003786:	9309      	str	r3, [sp, #36]	; 0x24
 8003788:	e767      	b.n	800365a <_svfiprintf_r+0x4e>
 800378a:	fb0c 3202 	mla	r2, ip, r2, r3
 800378e:	460c      	mov	r4, r1
 8003790:	2001      	movs	r0, #1
 8003792:	e7a5      	b.n	80036e0 <_svfiprintf_r+0xd4>
 8003794:	2300      	movs	r3, #0
 8003796:	3401      	adds	r4, #1
 8003798:	9305      	str	r3, [sp, #20]
 800379a:	4619      	mov	r1, r3
 800379c:	f04f 0c0a 	mov.w	ip, #10
 80037a0:	4620      	mov	r0, r4
 80037a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037a6:	3a30      	subs	r2, #48	; 0x30
 80037a8:	2a09      	cmp	r2, #9
 80037aa:	d903      	bls.n	80037b4 <_svfiprintf_r+0x1a8>
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0c5      	beq.n	800373c <_svfiprintf_r+0x130>
 80037b0:	9105      	str	r1, [sp, #20]
 80037b2:	e7c3      	b.n	800373c <_svfiprintf_r+0x130>
 80037b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80037b8:	4604      	mov	r4, r0
 80037ba:	2301      	movs	r3, #1
 80037bc:	e7f0      	b.n	80037a0 <_svfiprintf_r+0x194>
 80037be:	ab03      	add	r3, sp, #12
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	462a      	mov	r2, r5
 80037c4:	4b0f      	ldr	r3, [pc, #60]	; (8003804 <_svfiprintf_r+0x1f8>)
 80037c6:	a904      	add	r1, sp, #16
 80037c8:	4638      	mov	r0, r7
 80037ca:	f3af 8000 	nop.w
 80037ce:	1c42      	adds	r2, r0, #1
 80037d0:	4606      	mov	r6, r0
 80037d2:	d1d6      	bne.n	8003782 <_svfiprintf_r+0x176>
 80037d4:	89ab      	ldrh	r3, [r5, #12]
 80037d6:	065b      	lsls	r3, r3, #25
 80037d8:	f53f af2c 	bmi.w	8003634 <_svfiprintf_r+0x28>
 80037dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80037de:	b01d      	add	sp, #116	; 0x74
 80037e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037e4:	ab03      	add	r3, sp, #12
 80037e6:	9300      	str	r3, [sp, #0]
 80037e8:	462a      	mov	r2, r5
 80037ea:	4b06      	ldr	r3, [pc, #24]	; (8003804 <_svfiprintf_r+0x1f8>)
 80037ec:	a904      	add	r1, sp, #16
 80037ee:	4638      	mov	r0, r7
 80037f0:	f000 fba6 	bl	8003f40 <_printf_i>
 80037f4:	e7eb      	b.n	80037ce <_svfiprintf_r+0x1c2>
 80037f6:	bf00      	nop
 80037f8:	08005150 	.word	0x08005150
 80037fc:	0800515a 	.word	0x0800515a
 8003800:	00000000 	.word	0x00000000
 8003804:	08003555 	.word	0x08003555
 8003808:	08005156 	.word	0x08005156

0800380c <_sungetc_r>:
 800380c:	b538      	push	{r3, r4, r5, lr}
 800380e:	1c4b      	adds	r3, r1, #1
 8003810:	4614      	mov	r4, r2
 8003812:	d103      	bne.n	800381c <_sungetc_r+0x10>
 8003814:	f04f 35ff 	mov.w	r5, #4294967295
 8003818:	4628      	mov	r0, r5
 800381a:	bd38      	pop	{r3, r4, r5, pc}
 800381c:	8993      	ldrh	r3, [r2, #12]
 800381e:	f023 0320 	bic.w	r3, r3, #32
 8003822:	8193      	strh	r3, [r2, #12]
 8003824:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003826:	6852      	ldr	r2, [r2, #4]
 8003828:	b2cd      	uxtb	r5, r1
 800382a:	b18b      	cbz	r3, 8003850 <_sungetc_r+0x44>
 800382c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800382e:	4293      	cmp	r3, r2
 8003830:	dd08      	ble.n	8003844 <_sungetc_r+0x38>
 8003832:	6823      	ldr	r3, [r4, #0]
 8003834:	1e5a      	subs	r2, r3, #1
 8003836:	6022      	str	r2, [r4, #0]
 8003838:	f803 5c01 	strb.w	r5, [r3, #-1]
 800383c:	6863      	ldr	r3, [r4, #4]
 800383e:	3301      	adds	r3, #1
 8003840:	6063      	str	r3, [r4, #4]
 8003842:	e7e9      	b.n	8003818 <_sungetc_r+0xc>
 8003844:	4621      	mov	r1, r4
 8003846:	f000 feff 	bl	8004648 <__submore>
 800384a:	2800      	cmp	r0, #0
 800384c:	d0f1      	beq.n	8003832 <_sungetc_r+0x26>
 800384e:	e7e1      	b.n	8003814 <_sungetc_r+0x8>
 8003850:	6921      	ldr	r1, [r4, #16]
 8003852:	6823      	ldr	r3, [r4, #0]
 8003854:	b151      	cbz	r1, 800386c <_sungetc_r+0x60>
 8003856:	4299      	cmp	r1, r3
 8003858:	d208      	bcs.n	800386c <_sungetc_r+0x60>
 800385a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800385e:	42a9      	cmp	r1, r5
 8003860:	d104      	bne.n	800386c <_sungetc_r+0x60>
 8003862:	3b01      	subs	r3, #1
 8003864:	3201      	adds	r2, #1
 8003866:	6023      	str	r3, [r4, #0]
 8003868:	6062      	str	r2, [r4, #4]
 800386a:	e7d5      	b.n	8003818 <_sungetc_r+0xc>
 800386c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8003870:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003874:	6363      	str	r3, [r4, #52]	; 0x34
 8003876:	2303      	movs	r3, #3
 8003878:	63a3      	str	r3, [r4, #56]	; 0x38
 800387a:	4623      	mov	r3, r4
 800387c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003880:	6023      	str	r3, [r4, #0]
 8003882:	2301      	movs	r3, #1
 8003884:	e7dc      	b.n	8003840 <_sungetc_r+0x34>

08003886 <__ssrefill_r>:
 8003886:	b510      	push	{r4, lr}
 8003888:	460c      	mov	r4, r1
 800388a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800388c:	b169      	cbz	r1, 80038aa <__ssrefill_r+0x24>
 800388e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003892:	4299      	cmp	r1, r3
 8003894:	d001      	beq.n	800389a <__ssrefill_r+0x14>
 8003896:	f7ff faf1 	bl	8002e7c <_free_r>
 800389a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800389c:	6063      	str	r3, [r4, #4]
 800389e:	2000      	movs	r0, #0
 80038a0:	6360      	str	r0, [r4, #52]	; 0x34
 80038a2:	b113      	cbz	r3, 80038aa <__ssrefill_r+0x24>
 80038a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80038a6:	6023      	str	r3, [r4, #0]
 80038a8:	bd10      	pop	{r4, pc}
 80038aa:	6923      	ldr	r3, [r4, #16]
 80038ac:	6023      	str	r3, [r4, #0]
 80038ae:	2300      	movs	r3, #0
 80038b0:	6063      	str	r3, [r4, #4]
 80038b2:	89a3      	ldrh	r3, [r4, #12]
 80038b4:	f043 0320 	orr.w	r3, r3, #32
 80038b8:	81a3      	strh	r3, [r4, #12]
 80038ba:	f04f 30ff 	mov.w	r0, #4294967295
 80038be:	e7f3      	b.n	80038a8 <__ssrefill_r+0x22>

080038c0 <__ssvfiscanf_r>:
 80038c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038c4:	460c      	mov	r4, r1
 80038c6:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80038ca:	2100      	movs	r1, #0
 80038cc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80038d0:	49b2      	ldr	r1, [pc, #712]	; (8003b9c <__ssvfiscanf_r+0x2dc>)
 80038d2:	91a0      	str	r1, [sp, #640]	; 0x280
 80038d4:	f10d 0804 	add.w	r8, sp, #4
 80038d8:	49b1      	ldr	r1, [pc, #708]	; (8003ba0 <__ssvfiscanf_r+0x2e0>)
 80038da:	4fb2      	ldr	r7, [pc, #712]	; (8003ba4 <__ssvfiscanf_r+0x2e4>)
 80038dc:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8003ba8 <__ssvfiscanf_r+0x2e8>
 80038e0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80038e4:	4606      	mov	r6, r0
 80038e6:	91a1      	str	r1, [sp, #644]	; 0x284
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	f892 a000 	ldrb.w	sl, [r2]
 80038ee:	f1ba 0f00 	cmp.w	sl, #0
 80038f2:	f000 8151 	beq.w	8003b98 <__ssvfiscanf_r+0x2d8>
 80038f6:	f81a 3007 	ldrb.w	r3, [sl, r7]
 80038fa:	f013 0308 	ands.w	r3, r3, #8
 80038fe:	f102 0501 	add.w	r5, r2, #1
 8003902:	d019      	beq.n	8003938 <__ssvfiscanf_r+0x78>
 8003904:	6863      	ldr	r3, [r4, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	dd0f      	ble.n	800392a <__ssvfiscanf_r+0x6a>
 800390a:	6823      	ldr	r3, [r4, #0]
 800390c:	781a      	ldrb	r2, [r3, #0]
 800390e:	5cba      	ldrb	r2, [r7, r2]
 8003910:	0712      	lsls	r2, r2, #28
 8003912:	d401      	bmi.n	8003918 <__ssvfiscanf_r+0x58>
 8003914:	462a      	mov	r2, r5
 8003916:	e7e8      	b.n	80038ea <__ssvfiscanf_r+0x2a>
 8003918:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800391a:	3201      	adds	r2, #1
 800391c:	9245      	str	r2, [sp, #276]	; 0x114
 800391e:	6862      	ldr	r2, [r4, #4]
 8003920:	3301      	adds	r3, #1
 8003922:	3a01      	subs	r2, #1
 8003924:	6062      	str	r2, [r4, #4]
 8003926:	6023      	str	r3, [r4, #0]
 8003928:	e7ec      	b.n	8003904 <__ssvfiscanf_r+0x44>
 800392a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800392c:	4621      	mov	r1, r4
 800392e:	4630      	mov	r0, r6
 8003930:	4798      	blx	r3
 8003932:	2800      	cmp	r0, #0
 8003934:	d0e9      	beq.n	800390a <__ssvfiscanf_r+0x4a>
 8003936:	e7ed      	b.n	8003914 <__ssvfiscanf_r+0x54>
 8003938:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800393c:	f040 8083 	bne.w	8003a46 <__ssvfiscanf_r+0x186>
 8003940:	9341      	str	r3, [sp, #260]	; 0x104
 8003942:	9343      	str	r3, [sp, #268]	; 0x10c
 8003944:	7853      	ldrb	r3, [r2, #1]
 8003946:	2b2a      	cmp	r3, #42	; 0x2a
 8003948:	bf02      	ittt	eq
 800394a:	2310      	moveq	r3, #16
 800394c:	1c95      	addeq	r5, r2, #2
 800394e:	9341      	streq	r3, [sp, #260]	; 0x104
 8003950:	220a      	movs	r2, #10
 8003952:	46ab      	mov	fp, r5
 8003954:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8003958:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800395c:	2b09      	cmp	r3, #9
 800395e:	d91d      	bls.n	800399c <__ssvfiscanf_r+0xdc>
 8003960:	4891      	ldr	r0, [pc, #580]	; (8003ba8 <__ssvfiscanf_r+0x2e8>)
 8003962:	2203      	movs	r2, #3
 8003964:	f7fc fc4c 	bl	8000200 <memchr>
 8003968:	b140      	cbz	r0, 800397c <__ssvfiscanf_r+0xbc>
 800396a:	2301      	movs	r3, #1
 800396c:	eba0 0009 	sub.w	r0, r0, r9
 8003970:	fa03 f000 	lsl.w	r0, r3, r0
 8003974:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003976:	4318      	orrs	r0, r3
 8003978:	9041      	str	r0, [sp, #260]	; 0x104
 800397a:	465d      	mov	r5, fp
 800397c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003980:	2b78      	cmp	r3, #120	; 0x78
 8003982:	d806      	bhi.n	8003992 <__ssvfiscanf_r+0xd2>
 8003984:	2b57      	cmp	r3, #87	; 0x57
 8003986:	d810      	bhi.n	80039aa <__ssvfiscanf_r+0xea>
 8003988:	2b25      	cmp	r3, #37	; 0x25
 800398a:	d05c      	beq.n	8003a46 <__ssvfiscanf_r+0x186>
 800398c:	d856      	bhi.n	8003a3c <__ssvfiscanf_r+0x17c>
 800398e:	2b00      	cmp	r3, #0
 8003990:	d074      	beq.n	8003a7c <__ssvfiscanf_r+0x1bc>
 8003992:	2303      	movs	r3, #3
 8003994:	9347      	str	r3, [sp, #284]	; 0x11c
 8003996:	230a      	movs	r3, #10
 8003998:	9342      	str	r3, [sp, #264]	; 0x108
 800399a:	e081      	b.n	8003aa0 <__ssvfiscanf_r+0x1e0>
 800399c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800399e:	fb02 1303 	mla	r3, r2, r3, r1
 80039a2:	3b30      	subs	r3, #48	; 0x30
 80039a4:	9343      	str	r3, [sp, #268]	; 0x10c
 80039a6:	465d      	mov	r5, fp
 80039a8:	e7d3      	b.n	8003952 <__ssvfiscanf_r+0x92>
 80039aa:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80039ae:	2a20      	cmp	r2, #32
 80039b0:	d8ef      	bhi.n	8003992 <__ssvfiscanf_r+0xd2>
 80039b2:	a101      	add	r1, pc, #4	; (adr r1, 80039b8 <__ssvfiscanf_r+0xf8>)
 80039b4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80039b8:	08003a8b 	.word	0x08003a8b
 80039bc:	08003993 	.word	0x08003993
 80039c0:	08003993 	.word	0x08003993
 80039c4:	08003ae9 	.word	0x08003ae9
 80039c8:	08003993 	.word	0x08003993
 80039cc:	08003993 	.word	0x08003993
 80039d0:	08003993 	.word	0x08003993
 80039d4:	08003993 	.word	0x08003993
 80039d8:	08003993 	.word	0x08003993
 80039dc:	08003993 	.word	0x08003993
 80039e0:	08003993 	.word	0x08003993
 80039e4:	08003aff 	.word	0x08003aff
 80039e8:	08003ad5 	.word	0x08003ad5
 80039ec:	08003a43 	.word	0x08003a43
 80039f0:	08003a43 	.word	0x08003a43
 80039f4:	08003a43 	.word	0x08003a43
 80039f8:	08003993 	.word	0x08003993
 80039fc:	08003ad9 	.word	0x08003ad9
 8003a00:	08003993 	.word	0x08003993
 8003a04:	08003993 	.word	0x08003993
 8003a08:	08003993 	.word	0x08003993
 8003a0c:	08003993 	.word	0x08003993
 8003a10:	08003b0f 	.word	0x08003b0f
 8003a14:	08003ae1 	.word	0x08003ae1
 8003a18:	08003a83 	.word	0x08003a83
 8003a1c:	08003993 	.word	0x08003993
 8003a20:	08003993 	.word	0x08003993
 8003a24:	08003b0b 	.word	0x08003b0b
 8003a28:	08003993 	.word	0x08003993
 8003a2c:	08003ad5 	.word	0x08003ad5
 8003a30:	08003993 	.word	0x08003993
 8003a34:	08003993 	.word	0x08003993
 8003a38:	08003a8b 	.word	0x08003a8b
 8003a3c:	3b45      	subs	r3, #69	; 0x45
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d8a7      	bhi.n	8003992 <__ssvfiscanf_r+0xd2>
 8003a42:	2305      	movs	r3, #5
 8003a44:	e02b      	b.n	8003a9e <__ssvfiscanf_r+0x1de>
 8003a46:	6863      	ldr	r3, [r4, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	dd0d      	ble.n	8003a68 <__ssvfiscanf_r+0x1a8>
 8003a4c:	6823      	ldr	r3, [r4, #0]
 8003a4e:	781a      	ldrb	r2, [r3, #0]
 8003a50:	4552      	cmp	r2, sl
 8003a52:	f040 80a1 	bne.w	8003b98 <__ssvfiscanf_r+0x2d8>
 8003a56:	3301      	adds	r3, #1
 8003a58:	6862      	ldr	r2, [r4, #4]
 8003a5a:	6023      	str	r3, [r4, #0]
 8003a5c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8003a5e:	3a01      	subs	r2, #1
 8003a60:	3301      	adds	r3, #1
 8003a62:	6062      	str	r2, [r4, #4]
 8003a64:	9345      	str	r3, [sp, #276]	; 0x114
 8003a66:	e755      	b.n	8003914 <__ssvfiscanf_r+0x54>
 8003a68:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003a6a:	4621      	mov	r1, r4
 8003a6c:	4630      	mov	r0, r6
 8003a6e:	4798      	blx	r3
 8003a70:	2800      	cmp	r0, #0
 8003a72:	d0eb      	beq.n	8003a4c <__ssvfiscanf_r+0x18c>
 8003a74:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003a76:	2800      	cmp	r0, #0
 8003a78:	f040 8084 	bne.w	8003b84 <__ssvfiscanf_r+0x2c4>
 8003a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a80:	e086      	b.n	8003b90 <__ssvfiscanf_r+0x2d0>
 8003a82:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003a84:	f042 0220 	orr.w	r2, r2, #32
 8003a88:	9241      	str	r2, [sp, #260]	; 0x104
 8003a8a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003a8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a90:	9241      	str	r2, [sp, #260]	; 0x104
 8003a92:	2210      	movs	r2, #16
 8003a94:	2b6f      	cmp	r3, #111	; 0x6f
 8003a96:	9242      	str	r2, [sp, #264]	; 0x108
 8003a98:	bf34      	ite	cc
 8003a9a:	2303      	movcc	r3, #3
 8003a9c:	2304      	movcs	r3, #4
 8003a9e:	9347      	str	r3, [sp, #284]	; 0x11c
 8003aa0:	6863      	ldr	r3, [r4, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	dd41      	ble.n	8003b2a <__ssvfiscanf_r+0x26a>
 8003aa6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003aa8:	0659      	lsls	r1, r3, #25
 8003aaa:	d404      	bmi.n	8003ab6 <__ssvfiscanf_r+0x1f6>
 8003aac:	6823      	ldr	r3, [r4, #0]
 8003aae:	781a      	ldrb	r2, [r3, #0]
 8003ab0:	5cba      	ldrb	r2, [r7, r2]
 8003ab2:	0712      	lsls	r2, r2, #28
 8003ab4:	d440      	bmi.n	8003b38 <__ssvfiscanf_r+0x278>
 8003ab6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	dc4f      	bgt.n	8003b5c <__ssvfiscanf_r+0x29c>
 8003abc:	466b      	mov	r3, sp
 8003abe:	4622      	mov	r2, r4
 8003ac0:	a941      	add	r1, sp, #260	; 0x104
 8003ac2:	4630      	mov	r0, r6
 8003ac4:	f000 fb62 	bl	800418c <_scanf_chars>
 8003ac8:	2801      	cmp	r0, #1
 8003aca:	d065      	beq.n	8003b98 <__ssvfiscanf_r+0x2d8>
 8003acc:	2802      	cmp	r0, #2
 8003ace:	f47f af21 	bne.w	8003914 <__ssvfiscanf_r+0x54>
 8003ad2:	e7cf      	b.n	8003a74 <__ssvfiscanf_r+0x1b4>
 8003ad4:	220a      	movs	r2, #10
 8003ad6:	e7dd      	b.n	8003a94 <__ssvfiscanf_r+0x1d4>
 8003ad8:	2300      	movs	r3, #0
 8003ada:	9342      	str	r3, [sp, #264]	; 0x108
 8003adc:	2303      	movs	r3, #3
 8003ade:	e7de      	b.n	8003a9e <__ssvfiscanf_r+0x1de>
 8003ae0:	2308      	movs	r3, #8
 8003ae2:	9342      	str	r3, [sp, #264]	; 0x108
 8003ae4:	2304      	movs	r3, #4
 8003ae6:	e7da      	b.n	8003a9e <__ssvfiscanf_r+0x1de>
 8003ae8:	4629      	mov	r1, r5
 8003aea:	4640      	mov	r0, r8
 8003aec:	f000 fcf4 	bl	80044d8 <__sccl>
 8003af0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003af6:	9341      	str	r3, [sp, #260]	; 0x104
 8003af8:	4605      	mov	r5, r0
 8003afa:	2301      	movs	r3, #1
 8003afc:	e7cf      	b.n	8003a9e <__ssvfiscanf_r+0x1de>
 8003afe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003b00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b04:	9341      	str	r3, [sp, #260]	; 0x104
 8003b06:	2300      	movs	r3, #0
 8003b08:	e7c9      	b.n	8003a9e <__ssvfiscanf_r+0x1de>
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	e7c7      	b.n	8003a9e <__ssvfiscanf_r+0x1de>
 8003b0e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8003b10:	06c3      	lsls	r3, r0, #27
 8003b12:	f53f aeff 	bmi.w	8003914 <__ssvfiscanf_r+0x54>
 8003b16:	9b00      	ldr	r3, [sp, #0]
 8003b18:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003b1a:	1d19      	adds	r1, r3, #4
 8003b1c:	9100      	str	r1, [sp, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	07c0      	lsls	r0, r0, #31
 8003b22:	bf4c      	ite	mi
 8003b24:	801a      	strhmi	r2, [r3, #0]
 8003b26:	601a      	strpl	r2, [r3, #0]
 8003b28:	e6f4      	b.n	8003914 <__ssvfiscanf_r+0x54>
 8003b2a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003b2c:	4621      	mov	r1, r4
 8003b2e:	4630      	mov	r0, r6
 8003b30:	4798      	blx	r3
 8003b32:	2800      	cmp	r0, #0
 8003b34:	d0b7      	beq.n	8003aa6 <__ssvfiscanf_r+0x1e6>
 8003b36:	e79d      	b.n	8003a74 <__ssvfiscanf_r+0x1b4>
 8003b38:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003b3a:	3201      	adds	r2, #1
 8003b3c:	9245      	str	r2, [sp, #276]	; 0x114
 8003b3e:	6862      	ldr	r2, [r4, #4]
 8003b40:	3a01      	subs	r2, #1
 8003b42:	2a00      	cmp	r2, #0
 8003b44:	6062      	str	r2, [r4, #4]
 8003b46:	dd02      	ble.n	8003b4e <__ssvfiscanf_r+0x28e>
 8003b48:	3301      	adds	r3, #1
 8003b4a:	6023      	str	r3, [r4, #0]
 8003b4c:	e7ae      	b.n	8003aac <__ssvfiscanf_r+0x1ec>
 8003b4e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003b50:	4621      	mov	r1, r4
 8003b52:	4630      	mov	r0, r6
 8003b54:	4798      	blx	r3
 8003b56:	2800      	cmp	r0, #0
 8003b58:	d0a8      	beq.n	8003aac <__ssvfiscanf_r+0x1ec>
 8003b5a:	e78b      	b.n	8003a74 <__ssvfiscanf_r+0x1b4>
 8003b5c:	2b04      	cmp	r3, #4
 8003b5e:	dc06      	bgt.n	8003b6e <__ssvfiscanf_r+0x2ae>
 8003b60:	466b      	mov	r3, sp
 8003b62:	4622      	mov	r2, r4
 8003b64:	a941      	add	r1, sp, #260	; 0x104
 8003b66:	4630      	mov	r0, r6
 8003b68:	f000 fb68 	bl	800423c <_scanf_i>
 8003b6c:	e7ac      	b.n	8003ac8 <__ssvfiscanf_r+0x208>
 8003b6e:	4b0f      	ldr	r3, [pc, #60]	; (8003bac <__ssvfiscanf_r+0x2ec>)
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f43f aecf 	beq.w	8003914 <__ssvfiscanf_r+0x54>
 8003b76:	466b      	mov	r3, sp
 8003b78:	4622      	mov	r2, r4
 8003b7a:	a941      	add	r1, sp, #260	; 0x104
 8003b7c:	4630      	mov	r0, r6
 8003b7e:	f3af 8000 	nop.w
 8003b82:	e7a1      	b.n	8003ac8 <__ssvfiscanf_r+0x208>
 8003b84:	89a3      	ldrh	r3, [r4, #12]
 8003b86:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003b8a:	bf18      	it	ne
 8003b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8003b90:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8003b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b98:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003b9a:	e7f9      	b.n	8003b90 <__ssvfiscanf_r+0x2d0>
 8003b9c:	0800380d 	.word	0x0800380d
 8003ba0:	08003887 	.word	0x08003887
 8003ba4:	08004fed 	.word	0x08004fed
 8003ba8:	08005156 	.word	0x08005156
 8003bac:	00000000 	.word	0x00000000

08003bb0 <__sfputc_r>:
 8003bb0:	6893      	ldr	r3, [r2, #8]
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	b410      	push	{r4}
 8003bb8:	6093      	str	r3, [r2, #8]
 8003bba:	da08      	bge.n	8003bce <__sfputc_r+0x1e>
 8003bbc:	6994      	ldr	r4, [r2, #24]
 8003bbe:	42a3      	cmp	r3, r4
 8003bc0:	db01      	blt.n	8003bc6 <__sfputc_r+0x16>
 8003bc2:	290a      	cmp	r1, #10
 8003bc4:	d103      	bne.n	8003bce <__sfputc_r+0x1e>
 8003bc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bca:	f000 bd77 	b.w	80046bc <__swbuf_r>
 8003bce:	6813      	ldr	r3, [r2, #0]
 8003bd0:	1c58      	adds	r0, r3, #1
 8003bd2:	6010      	str	r0, [r2, #0]
 8003bd4:	7019      	strb	r1, [r3, #0]
 8003bd6:	4608      	mov	r0, r1
 8003bd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <__sfputs_r>:
 8003bde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003be0:	4606      	mov	r6, r0
 8003be2:	460f      	mov	r7, r1
 8003be4:	4614      	mov	r4, r2
 8003be6:	18d5      	adds	r5, r2, r3
 8003be8:	42ac      	cmp	r4, r5
 8003bea:	d101      	bne.n	8003bf0 <__sfputs_r+0x12>
 8003bec:	2000      	movs	r0, #0
 8003bee:	e007      	b.n	8003c00 <__sfputs_r+0x22>
 8003bf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bf4:	463a      	mov	r2, r7
 8003bf6:	4630      	mov	r0, r6
 8003bf8:	f7ff ffda 	bl	8003bb0 <__sfputc_r>
 8003bfc:	1c43      	adds	r3, r0, #1
 8003bfe:	d1f3      	bne.n	8003be8 <__sfputs_r+0xa>
 8003c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003c04 <_vfiprintf_r>:
 8003c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c08:	460d      	mov	r5, r1
 8003c0a:	b09d      	sub	sp, #116	; 0x74
 8003c0c:	4614      	mov	r4, r2
 8003c0e:	4698      	mov	r8, r3
 8003c10:	4606      	mov	r6, r0
 8003c12:	b118      	cbz	r0, 8003c1c <_vfiprintf_r+0x18>
 8003c14:	6983      	ldr	r3, [r0, #24]
 8003c16:	b90b      	cbnz	r3, 8003c1c <_vfiprintf_r+0x18>
 8003c18:	f7ff fbde 	bl	80033d8 <__sinit>
 8003c1c:	4b89      	ldr	r3, [pc, #548]	; (8003e44 <_vfiprintf_r+0x240>)
 8003c1e:	429d      	cmp	r5, r3
 8003c20:	d11b      	bne.n	8003c5a <_vfiprintf_r+0x56>
 8003c22:	6875      	ldr	r5, [r6, #4]
 8003c24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c26:	07d9      	lsls	r1, r3, #31
 8003c28:	d405      	bmi.n	8003c36 <_vfiprintf_r+0x32>
 8003c2a:	89ab      	ldrh	r3, [r5, #12]
 8003c2c:	059a      	lsls	r2, r3, #22
 8003c2e:	d402      	bmi.n	8003c36 <_vfiprintf_r+0x32>
 8003c30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c32:	f7ff fc6f 	bl	8003514 <__retarget_lock_acquire_recursive>
 8003c36:	89ab      	ldrh	r3, [r5, #12]
 8003c38:	071b      	lsls	r3, r3, #28
 8003c3a:	d501      	bpl.n	8003c40 <_vfiprintf_r+0x3c>
 8003c3c:	692b      	ldr	r3, [r5, #16]
 8003c3e:	b9eb      	cbnz	r3, 8003c7c <_vfiprintf_r+0x78>
 8003c40:	4629      	mov	r1, r5
 8003c42:	4630      	mov	r0, r6
 8003c44:	f000 fd8c 	bl	8004760 <__swsetup_r>
 8003c48:	b1c0      	cbz	r0, 8003c7c <_vfiprintf_r+0x78>
 8003c4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c4c:	07dc      	lsls	r4, r3, #31
 8003c4e:	d50e      	bpl.n	8003c6e <_vfiprintf_r+0x6a>
 8003c50:	f04f 30ff 	mov.w	r0, #4294967295
 8003c54:	b01d      	add	sp, #116	; 0x74
 8003c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c5a:	4b7b      	ldr	r3, [pc, #492]	; (8003e48 <_vfiprintf_r+0x244>)
 8003c5c:	429d      	cmp	r5, r3
 8003c5e:	d101      	bne.n	8003c64 <_vfiprintf_r+0x60>
 8003c60:	68b5      	ldr	r5, [r6, #8]
 8003c62:	e7df      	b.n	8003c24 <_vfiprintf_r+0x20>
 8003c64:	4b79      	ldr	r3, [pc, #484]	; (8003e4c <_vfiprintf_r+0x248>)
 8003c66:	429d      	cmp	r5, r3
 8003c68:	bf08      	it	eq
 8003c6a:	68f5      	ldreq	r5, [r6, #12]
 8003c6c:	e7da      	b.n	8003c24 <_vfiprintf_r+0x20>
 8003c6e:	89ab      	ldrh	r3, [r5, #12]
 8003c70:	0598      	lsls	r0, r3, #22
 8003c72:	d4ed      	bmi.n	8003c50 <_vfiprintf_r+0x4c>
 8003c74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c76:	f7ff fc4e 	bl	8003516 <__retarget_lock_release_recursive>
 8003c7a:	e7e9      	b.n	8003c50 <_vfiprintf_r+0x4c>
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	9309      	str	r3, [sp, #36]	; 0x24
 8003c80:	2320      	movs	r3, #32
 8003c82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c86:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c8a:	2330      	movs	r3, #48	; 0x30
 8003c8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003e50 <_vfiprintf_r+0x24c>
 8003c90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c94:	f04f 0901 	mov.w	r9, #1
 8003c98:	4623      	mov	r3, r4
 8003c9a:	469a      	mov	sl, r3
 8003c9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ca0:	b10a      	cbz	r2, 8003ca6 <_vfiprintf_r+0xa2>
 8003ca2:	2a25      	cmp	r2, #37	; 0x25
 8003ca4:	d1f9      	bne.n	8003c9a <_vfiprintf_r+0x96>
 8003ca6:	ebba 0b04 	subs.w	fp, sl, r4
 8003caa:	d00b      	beq.n	8003cc4 <_vfiprintf_r+0xc0>
 8003cac:	465b      	mov	r3, fp
 8003cae:	4622      	mov	r2, r4
 8003cb0:	4629      	mov	r1, r5
 8003cb2:	4630      	mov	r0, r6
 8003cb4:	f7ff ff93 	bl	8003bde <__sfputs_r>
 8003cb8:	3001      	adds	r0, #1
 8003cba:	f000 80aa 	beq.w	8003e12 <_vfiprintf_r+0x20e>
 8003cbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003cc0:	445a      	add	r2, fp
 8003cc2:	9209      	str	r2, [sp, #36]	; 0x24
 8003cc4:	f89a 3000 	ldrb.w	r3, [sl]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 80a2 	beq.w	8003e12 <_vfiprintf_r+0x20e>
 8003cce:	2300      	movs	r3, #0
 8003cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8003cd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003cd8:	f10a 0a01 	add.w	sl, sl, #1
 8003cdc:	9304      	str	r3, [sp, #16]
 8003cde:	9307      	str	r3, [sp, #28]
 8003ce0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ce4:	931a      	str	r3, [sp, #104]	; 0x68
 8003ce6:	4654      	mov	r4, sl
 8003ce8:	2205      	movs	r2, #5
 8003cea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cee:	4858      	ldr	r0, [pc, #352]	; (8003e50 <_vfiprintf_r+0x24c>)
 8003cf0:	f7fc fa86 	bl	8000200 <memchr>
 8003cf4:	9a04      	ldr	r2, [sp, #16]
 8003cf6:	b9d8      	cbnz	r0, 8003d30 <_vfiprintf_r+0x12c>
 8003cf8:	06d1      	lsls	r1, r2, #27
 8003cfa:	bf44      	itt	mi
 8003cfc:	2320      	movmi	r3, #32
 8003cfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d02:	0713      	lsls	r3, r2, #28
 8003d04:	bf44      	itt	mi
 8003d06:	232b      	movmi	r3, #43	; 0x2b
 8003d08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d0c:	f89a 3000 	ldrb.w	r3, [sl]
 8003d10:	2b2a      	cmp	r3, #42	; 0x2a
 8003d12:	d015      	beq.n	8003d40 <_vfiprintf_r+0x13c>
 8003d14:	9a07      	ldr	r2, [sp, #28]
 8003d16:	4654      	mov	r4, sl
 8003d18:	2000      	movs	r0, #0
 8003d1a:	f04f 0c0a 	mov.w	ip, #10
 8003d1e:	4621      	mov	r1, r4
 8003d20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d24:	3b30      	subs	r3, #48	; 0x30
 8003d26:	2b09      	cmp	r3, #9
 8003d28:	d94e      	bls.n	8003dc8 <_vfiprintf_r+0x1c4>
 8003d2a:	b1b0      	cbz	r0, 8003d5a <_vfiprintf_r+0x156>
 8003d2c:	9207      	str	r2, [sp, #28]
 8003d2e:	e014      	b.n	8003d5a <_vfiprintf_r+0x156>
 8003d30:	eba0 0308 	sub.w	r3, r0, r8
 8003d34:	fa09 f303 	lsl.w	r3, r9, r3
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	9304      	str	r3, [sp, #16]
 8003d3c:	46a2      	mov	sl, r4
 8003d3e:	e7d2      	b.n	8003ce6 <_vfiprintf_r+0xe2>
 8003d40:	9b03      	ldr	r3, [sp, #12]
 8003d42:	1d19      	adds	r1, r3, #4
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	9103      	str	r1, [sp, #12]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	bfbb      	ittet	lt
 8003d4c:	425b      	neglt	r3, r3
 8003d4e:	f042 0202 	orrlt.w	r2, r2, #2
 8003d52:	9307      	strge	r3, [sp, #28]
 8003d54:	9307      	strlt	r3, [sp, #28]
 8003d56:	bfb8      	it	lt
 8003d58:	9204      	strlt	r2, [sp, #16]
 8003d5a:	7823      	ldrb	r3, [r4, #0]
 8003d5c:	2b2e      	cmp	r3, #46	; 0x2e
 8003d5e:	d10c      	bne.n	8003d7a <_vfiprintf_r+0x176>
 8003d60:	7863      	ldrb	r3, [r4, #1]
 8003d62:	2b2a      	cmp	r3, #42	; 0x2a
 8003d64:	d135      	bne.n	8003dd2 <_vfiprintf_r+0x1ce>
 8003d66:	9b03      	ldr	r3, [sp, #12]
 8003d68:	1d1a      	adds	r2, r3, #4
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	9203      	str	r2, [sp, #12]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	bfb8      	it	lt
 8003d72:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d76:	3402      	adds	r4, #2
 8003d78:	9305      	str	r3, [sp, #20]
 8003d7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003e60 <_vfiprintf_r+0x25c>
 8003d7e:	7821      	ldrb	r1, [r4, #0]
 8003d80:	2203      	movs	r2, #3
 8003d82:	4650      	mov	r0, sl
 8003d84:	f7fc fa3c 	bl	8000200 <memchr>
 8003d88:	b140      	cbz	r0, 8003d9c <_vfiprintf_r+0x198>
 8003d8a:	2340      	movs	r3, #64	; 0x40
 8003d8c:	eba0 000a 	sub.w	r0, r0, sl
 8003d90:	fa03 f000 	lsl.w	r0, r3, r0
 8003d94:	9b04      	ldr	r3, [sp, #16]
 8003d96:	4303      	orrs	r3, r0
 8003d98:	3401      	adds	r4, #1
 8003d9a:	9304      	str	r3, [sp, #16]
 8003d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003da0:	482c      	ldr	r0, [pc, #176]	; (8003e54 <_vfiprintf_r+0x250>)
 8003da2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003da6:	2206      	movs	r2, #6
 8003da8:	f7fc fa2a 	bl	8000200 <memchr>
 8003dac:	2800      	cmp	r0, #0
 8003dae:	d03f      	beq.n	8003e30 <_vfiprintf_r+0x22c>
 8003db0:	4b29      	ldr	r3, [pc, #164]	; (8003e58 <_vfiprintf_r+0x254>)
 8003db2:	bb1b      	cbnz	r3, 8003dfc <_vfiprintf_r+0x1f8>
 8003db4:	9b03      	ldr	r3, [sp, #12]
 8003db6:	3307      	adds	r3, #7
 8003db8:	f023 0307 	bic.w	r3, r3, #7
 8003dbc:	3308      	adds	r3, #8
 8003dbe:	9303      	str	r3, [sp, #12]
 8003dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dc2:	443b      	add	r3, r7
 8003dc4:	9309      	str	r3, [sp, #36]	; 0x24
 8003dc6:	e767      	b.n	8003c98 <_vfiprintf_r+0x94>
 8003dc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003dcc:	460c      	mov	r4, r1
 8003dce:	2001      	movs	r0, #1
 8003dd0:	e7a5      	b.n	8003d1e <_vfiprintf_r+0x11a>
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	3401      	adds	r4, #1
 8003dd6:	9305      	str	r3, [sp, #20]
 8003dd8:	4619      	mov	r1, r3
 8003dda:	f04f 0c0a 	mov.w	ip, #10
 8003dde:	4620      	mov	r0, r4
 8003de0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003de4:	3a30      	subs	r2, #48	; 0x30
 8003de6:	2a09      	cmp	r2, #9
 8003de8:	d903      	bls.n	8003df2 <_vfiprintf_r+0x1ee>
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0c5      	beq.n	8003d7a <_vfiprintf_r+0x176>
 8003dee:	9105      	str	r1, [sp, #20]
 8003df0:	e7c3      	b.n	8003d7a <_vfiprintf_r+0x176>
 8003df2:	fb0c 2101 	mla	r1, ip, r1, r2
 8003df6:	4604      	mov	r4, r0
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e7f0      	b.n	8003dde <_vfiprintf_r+0x1da>
 8003dfc:	ab03      	add	r3, sp, #12
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	462a      	mov	r2, r5
 8003e02:	4b16      	ldr	r3, [pc, #88]	; (8003e5c <_vfiprintf_r+0x258>)
 8003e04:	a904      	add	r1, sp, #16
 8003e06:	4630      	mov	r0, r6
 8003e08:	f3af 8000 	nop.w
 8003e0c:	4607      	mov	r7, r0
 8003e0e:	1c78      	adds	r0, r7, #1
 8003e10:	d1d6      	bne.n	8003dc0 <_vfiprintf_r+0x1bc>
 8003e12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e14:	07d9      	lsls	r1, r3, #31
 8003e16:	d405      	bmi.n	8003e24 <_vfiprintf_r+0x220>
 8003e18:	89ab      	ldrh	r3, [r5, #12]
 8003e1a:	059a      	lsls	r2, r3, #22
 8003e1c:	d402      	bmi.n	8003e24 <_vfiprintf_r+0x220>
 8003e1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e20:	f7ff fb79 	bl	8003516 <__retarget_lock_release_recursive>
 8003e24:	89ab      	ldrh	r3, [r5, #12]
 8003e26:	065b      	lsls	r3, r3, #25
 8003e28:	f53f af12 	bmi.w	8003c50 <_vfiprintf_r+0x4c>
 8003e2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e2e:	e711      	b.n	8003c54 <_vfiprintf_r+0x50>
 8003e30:	ab03      	add	r3, sp, #12
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	462a      	mov	r2, r5
 8003e36:	4b09      	ldr	r3, [pc, #36]	; (8003e5c <_vfiprintf_r+0x258>)
 8003e38:	a904      	add	r1, sp, #16
 8003e3a:	4630      	mov	r0, r6
 8003e3c:	f000 f880 	bl	8003f40 <_printf_i>
 8003e40:	e7e4      	b.n	8003e0c <_vfiprintf_r+0x208>
 8003e42:	bf00      	nop
 8003e44:	08005110 	.word	0x08005110
 8003e48:	08005130 	.word	0x08005130
 8003e4c:	080050f0 	.word	0x080050f0
 8003e50:	08005150 	.word	0x08005150
 8003e54:	0800515a 	.word	0x0800515a
 8003e58:	00000000 	.word	0x00000000
 8003e5c:	08003bdf 	.word	0x08003bdf
 8003e60:	08005156 	.word	0x08005156

08003e64 <_printf_common>:
 8003e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e68:	4616      	mov	r6, r2
 8003e6a:	4699      	mov	r9, r3
 8003e6c:	688a      	ldr	r2, [r1, #8]
 8003e6e:	690b      	ldr	r3, [r1, #16]
 8003e70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e74:	4293      	cmp	r3, r2
 8003e76:	bfb8      	it	lt
 8003e78:	4613      	movlt	r3, r2
 8003e7a:	6033      	str	r3, [r6, #0]
 8003e7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e80:	4607      	mov	r7, r0
 8003e82:	460c      	mov	r4, r1
 8003e84:	b10a      	cbz	r2, 8003e8a <_printf_common+0x26>
 8003e86:	3301      	adds	r3, #1
 8003e88:	6033      	str	r3, [r6, #0]
 8003e8a:	6823      	ldr	r3, [r4, #0]
 8003e8c:	0699      	lsls	r1, r3, #26
 8003e8e:	bf42      	ittt	mi
 8003e90:	6833      	ldrmi	r3, [r6, #0]
 8003e92:	3302      	addmi	r3, #2
 8003e94:	6033      	strmi	r3, [r6, #0]
 8003e96:	6825      	ldr	r5, [r4, #0]
 8003e98:	f015 0506 	ands.w	r5, r5, #6
 8003e9c:	d106      	bne.n	8003eac <_printf_common+0x48>
 8003e9e:	f104 0a19 	add.w	sl, r4, #25
 8003ea2:	68e3      	ldr	r3, [r4, #12]
 8003ea4:	6832      	ldr	r2, [r6, #0]
 8003ea6:	1a9b      	subs	r3, r3, r2
 8003ea8:	42ab      	cmp	r3, r5
 8003eaa:	dc26      	bgt.n	8003efa <_printf_common+0x96>
 8003eac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003eb0:	1e13      	subs	r3, r2, #0
 8003eb2:	6822      	ldr	r2, [r4, #0]
 8003eb4:	bf18      	it	ne
 8003eb6:	2301      	movne	r3, #1
 8003eb8:	0692      	lsls	r2, r2, #26
 8003eba:	d42b      	bmi.n	8003f14 <_printf_common+0xb0>
 8003ebc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ec0:	4649      	mov	r1, r9
 8003ec2:	4638      	mov	r0, r7
 8003ec4:	47c0      	blx	r8
 8003ec6:	3001      	adds	r0, #1
 8003ec8:	d01e      	beq.n	8003f08 <_printf_common+0xa4>
 8003eca:	6823      	ldr	r3, [r4, #0]
 8003ecc:	68e5      	ldr	r5, [r4, #12]
 8003ece:	6832      	ldr	r2, [r6, #0]
 8003ed0:	f003 0306 	and.w	r3, r3, #6
 8003ed4:	2b04      	cmp	r3, #4
 8003ed6:	bf08      	it	eq
 8003ed8:	1aad      	subeq	r5, r5, r2
 8003eda:	68a3      	ldr	r3, [r4, #8]
 8003edc:	6922      	ldr	r2, [r4, #16]
 8003ede:	bf0c      	ite	eq
 8003ee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ee4:	2500      	movne	r5, #0
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	bfc4      	itt	gt
 8003eea:	1a9b      	subgt	r3, r3, r2
 8003eec:	18ed      	addgt	r5, r5, r3
 8003eee:	2600      	movs	r6, #0
 8003ef0:	341a      	adds	r4, #26
 8003ef2:	42b5      	cmp	r5, r6
 8003ef4:	d11a      	bne.n	8003f2c <_printf_common+0xc8>
 8003ef6:	2000      	movs	r0, #0
 8003ef8:	e008      	b.n	8003f0c <_printf_common+0xa8>
 8003efa:	2301      	movs	r3, #1
 8003efc:	4652      	mov	r2, sl
 8003efe:	4649      	mov	r1, r9
 8003f00:	4638      	mov	r0, r7
 8003f02:	47c0      	blx	r8
 8003f04:	3001      	adds	r0, #1
 8003f06:	d103      	bne.n	8003f10 <_printf_common+0xac>
 8003f08:	f04f 30ff 	mov.w	r0, #4294967295
 8003f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f10:	3501      	adds	r5, #1
 8003f12:	e7c6      	b.n	8003ea2 <_printf_common+0x3e>
 8003f14:	18e1      	adds	r1, r4, r3
 8003f16:	1c5a      	adds	r2, r3, #1
 8003f18:	2030      	movs	r0, #48	; 0x30
 8003f1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f1e:	4422      	add	r2, r4
 8003f20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f28:	3302      	adds	r3, #2
 8003f2a:	e7c7      	b.n	8003ebc <_printf_common+0x58>
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	4622      	mov	r2, r4
 8003f30:	4649      	mov	r1, r9
 8003f32:	4638      	mov	r0, r7
 8003f34:	47c0      	blx	r8
 8003f36:	3001      	adds	r0, #1
 8003f38:	d0e6      	beq.n	8003f08 <_printf_common+0xa4>
 8003f3a:	3601      	adds	r6, #1
 8003f3c:	e7d9      	b.n	8003ef2 <_printf_common+0x8e>
	...

08003f40 <_printf_i>:
 8003f40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f44:	460c      	mov	r4, r1
 8003f46:	4691      	mov	r9, r2
 8003f48:	7e27      	ldrb	r7, [r4, #24]
 8003f4a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003f4c:	2f78      	cmp	r7, #120	; 0x78
 8003f4e:	4680      	mov	r8, r0
 8003f50:	469a      	mov	sl, r3
 8003f52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f56:	d807      	bhi.n	8003f68 <_printf_i+0x28>
 8003f58:	2f62      	cmp	r7, #98	; 0x62
 8003f5a:	d80a      	bhi.n	8003f72 <_printf_i+0x32>
 8003f5c:	2f00      	cmp	r7, #0
 8003f5e:	f000 80d8 	beq.w	8004112 <_printf_i+0x1d2>
 8003f62:	2f58      	cmp	r7, #88	; 0x58
 8003f64:	f000 80a3 	beq.w	80040ae <_printf_i+0x16e>
 8003f68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003f6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f70:	e03a      	b.n	8003fe8 <_printf_i+0xa8>
 8003f72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f76:	2b15      	cmp	r3, #21
 8003f78:	d8f6      	bhi.n	8003f68 <_printf_i+0x28>
 8003f7a:	a001      	add	r0, pc, #4	; (adr r0, 8003f80 <_printf_i+0x40>)
 8003f7c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003f80:	08003fd9 	.word	0x08003fd9
 8003f84:	08003fed 	.word	0x08003fed
 8003f88:	08003f69 	.word	0x08003f69
 8003f8c:	08003f69 	.word	0x08003f69
 8003f90:	08003f69 	.word	0x08003f69
 8003f94:	08003f69 	.word	0x08003f69
 8003f98:	08003fed 	.word	0x08003fed
 8003f9c:	08003f69 	.word	0x08003f69
 8003fa0:	08003f69 	.word	0x08003f69
 8003fa4:	08003f69 	.word	0x08003f69
 8003fa8:	08003f69 	.word	0x08003f69
 8003fac:	080040f9 	.word	0x080040f9
 8003fb0:	0800401d 	.word	0x0800401d
 8003fb4:	080040db 	.word	0x080040db
 8003fb8:	08003f69 	.word	0x08003f69
 8003fbc:	08003f69 	.word	0x08003f69
 8003fc0:	0800411b 	.word	0x0800411b
 8003fc4:	08003f69 	.word	0x08003f69
 8003fc8:	0800401d 	.word	0x0800401d
 8003fcc:	08003f69 	.word	0x08003f69
 8003fd0:	08003f69 	.word	0x08003f69
 8003fd4:	080040e3 	.word	0x080040e3
 8003fd8:	680b      	ldr	r3, [r1, #0]
 8003fda:	1d1a      	adds	r2, r3, #4
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	600a      	str	r2, [r1, #0]
 8003fe0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003fe4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e0a3      	b.n	8004134 <_printf_i+0x1f4>
 8003fec:	6825      	ldr	r5, [r4, #0]
 8003fee:	6808      	ldr	r0, [r1, #0]
 8003ff0:	062e      	lsls	r6, r5, #24
 8003ff2:	f100 0304 	add.w	r3, r0, #4
 8003ff6:	d50a      	bpl.n	800400e <_printf_i+0xce>
 8003ff8:	6805      	ldr	r5, [r0, #0]
 8003ffa:	600b      	str	r3, [r1, #0]
 8003ffc:	2d00      	cmp	r5, #0
 8003ffe:	da03      	bge.n	8004008 <_printf_i+0xc8>
 8004000:	232d      	movs	r3, #45	; 0x2d
 8004002:	426d      	negs	r5, r5
 8004004:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004008:	485e      	ldr	r0, [pc, #376]	; (8004184 <_printf_i+0x244>)
 800400a:	230a      	movs	r3, #10
 800400c:	e019      	b.n	8004042 <_printf_i+0x102>
 800400e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004012:	6805      	ldr	r5, [r0, #0]
 8004014:	600b      	str	r3, [r1, #0]
 8004016:	bf18      	it	ne
 8004018:	b22d      	sxthne	r5, r5
 800401a:	e7ef      	b.n	8003ffc <_printf_i+0xbc>
 800401c:	680b      	ldr	r3, [r1, #0]
 800401e:	6825      	ldr	r5, [r4, #0]
 8004020:	1d18      	adds	r0, r3, #4
 8004022:	6008      	str	r0, [r1, #0]
 8004024:	0628      	lsls	r0, r5, #24
 8004026:	d501      	bpl.n	800402c <_printf_i+0xec>
 8004028:	681d      	ldr	r5, [r3, #0]
 800402a:	e002      	b.n	8004032 <_printf_i+0xf2>
 800402c:	0669      	lsls	r1, r5, #25
 800402e:	d5fb      	bpl.n	8004028 <_printf_i+0xe8>
 8004030:	881d      	ldrh	r5, [r3, #0]
 8004032:	4854      	ldr	r0, [pc, #336]	; (8004184 <_printf_i+0x244>)
 8004034:	2f6f      	cmp	r7, #111	; 0x6f
 8004036:	bf0c      	ite	eq
 8004038:	2308      	moveq	r3, #8
 800403a:	230a      	movne	r3, #10
 800403c:	2100      	movs	r1, #0
 800403e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004042:	6866      	ldr	r6, [r4, #4]
 8004044:	60a6      	str	r6, [r4, #8]
 8004046:	2e00      	cmp	r6, #0
 8004048:	bfa2      	ittt	ge
 800404a:	6821      	ldrge	r1, [r4, #0]
 800404c:	f021 0104 	bicge.w	r1, r1, #4
 8004050:	6021      	strge	r1, [r4, #0]
 8004052:	b90d      	cbnz	r5, 8004058 <_printf_i+0x118>
 8004054:	2e00      	cmp	r6, #0
 8004056:	d04d      	beq.n	80040f4 <_printf_i+0x1b4>
 8004058:	4616      	mov	r6, r2
 800405a:	fbb5 f1f3 	udiv	r1, r5, r3
 800405e:	fb03 5711 	mls	r7, r3, r1, r5
 8004062:	5dc7      	ldrb	r7, [r0, r7]
 8004064:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004068:	462f      	mov	r7, r5
 800406a:	42bb      	cmp	r3, r7
 800406c:	460d      	mov	r5, r1
 800406e:	d9f4      	bls.n	800405a <_printf_i+0x11a>
 8004070:	2b08      	cmp	r3, #8
 8004072:	d10b      	bne.n	800408c <_printf_i+0x14c>
 8004074:	6823      	ldr	r3, [r4, #0]
 8004076:	07df      	lsls	r7, r3, #31
 8004078:	d508      	bpl.n	800408c <_printf_i+0x14c>
 800407a:	6923      	ldr	r3, [r4, #16]
 800407c:	6861      	ldr	r1, [r4, #4]
 800407e:	4299      	cmp	r1, r3
 8004080:	bfde      	ittt	le
 8004082:	2330      	movle	r3, #48	; 0x30
 8004084:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004088:	f106 36ff 	addle.w	r6, r6, #4294967295
 800408c:	1b92      	subs	r2, r2, r6
 800408e:	6122      	str	r2, [r4, #16]
 8004090:	f8cd a000 	str.w	sl, [sp]
 8004094:	464b      	mov	r3, r9
 8004096:	aa03      	add	r2, sp, #12
 8004098:	4621      	mov	r1, r4
 800409a:	4640      	mov	r0, r8
 800409c:	f7ff fee2 	bl	8003e64 <_printf_common>
 80040a0:	3001      	adds	r0, #1
 80040a2:	d14c      	bne.n	800413e <_printf_i+0x1fe>
 80040a4:	f04f 30ff 	mov.w	r0, #4294967295
 80040a8:	b004      	add	sp, #16
 80040aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040ae:	4835      	ldr	r0, [pc, #212]	; (8004184 <_printf_i+0x244>)
 80040b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80040b4:	6823      	ldr	r3, [r4, #0]
 80040b6:	680e      	ldr	r6, [r1, #0]
 80040b8:	061f      	lsls	r7, r3, #24
 80040ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80040be:	600e      	str	r6, [r1, #0]
 80040c0:	d514      	bpl.n	80040ec <_printf_i+0x1ac>
 80040c2:	07d9      	lsls	r1, r3, #31
 80040c4:	bf44      	itt	mi
 80040c6:	f043 0320 	orrmi.w	r3, r3, #32
 80040ca:	6023      	strmi	r3, [r4, #0]
 80040cc:	b91d      	cbnz	r5, 80040d6 <_printf_i+0x196>
 80040ce:	6823      	ldr	r3, [r4, #0]
 80040d0:	f023 0320 	bic.w	r3, r3, #32
 80040d4:	6023      	str	r3, [r4, #0]
 80040d6:	2310      	movs	r3, #16
 80040d8:	e7b0      	b.n	800403c <_printf_i+0xfc>
 80040da:	6823      	ldr	r3, [r4, #0]
 80040dc:	f043 0320 	orr.w	r3, r3, #32
 80040e0:	6023      	str	r3, [r4, #0]
 80040e2:	2378      	movs	r3, #120	; 0x78
 80040e4:	4828      	ldr	r0, [pc, #160]	; (8004188 <_printf_i+0x248>)
 80040e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80040ea:	e7e3      	b.n	80040b4 <_printf_i+0x174>
 80040ec:	065e      	lsls	r6, r3, #25
 80040ee:	bf48      	it	mi
 80040f0:	b2ad      	uxthmi	r5, r5
 80040f2:	e7e6      	b.n	80040c2 <_printf_i+0x182>
 80040f4:	4616      	mov	r6, r2
 80040f6:	e7bb      	b.n	8004070 <_printf_i+0x130>
 80040f8:	680b      	ldr	r3, [r1, #0]
 80040fa:	6826      	ldr	r6, [r4, #0]
 80040fc:	6960      	ldr	r0, [r4, #20]
 80040fe:	1d1d      	adds	r5, r3, #4
 8004100:	600d      	str	r5, [r1, #0]
 8004102:	0635      	lsls	r5, r6, #24
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	d501      	bpl.n	800410c <_printf_i+0x1cc>
 8004108:	6018      	str	r0, [r3, #0]
 800410a:	e002      	b.n	8004112 <_printf_i+0x1d2>
 800410c:	0671      	lsls	r1, r6, #25
 800410e:	d5fb      	bpl.n	8004108 <_printf_i+0x1c8>
 8004110:	8018      	strh	r0, [r3, #0]
 8004112:	2300      	movs	r3, #0
 8004114:	6123      	str	r3, [r4, #16]
 8004116:	4616      	mov	r6, r2
 8004118:	e7ba      	b.n	8004090 <_printf_i+0x150>
 800411a:	680b      	ldr	r3, [r1, #0]
 800411c:	1d1a      	adds	r2, r3, #4
 800411e:	600a      	str	r2, [r1, #0]
 8004120:	681e      	ldr	r6, [r3, #0]
 8004122:	6862      	ldr	r2, [r4, #4]
 8004124:	2100      	movs	r1, #0
 8004126:	4630      	mov	r0, r6
 8004128:	f7fc f86a 	bl	8000200 <memchr>
 800412c:	b108      	cbz	r0, 8004132 <_printf_i+0x1f2>
 800412e:	1b80      	subs	r0, r0, r6
 8004130:	6060      	str	r0, [r4, #4]
 8004132:	6863      	ldr	r3, [r4, #4]
 8004134:	6123      	str	r3, [r4, #16]
 8004136:	2300      	movs	r3, #0
 8004138:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800413c:	e7a8      	b.n	8004090 <_printf_i+0x150>
 800413e:	6923      	ldr	r3, [r4, #16]
 8004140:	4632      	mov	r2, r6
 8004142:	4649      	mov	r1, r9
 8004144:	4640      	mov	r0, r8
 8004146:	47d0      	blx	sl
 8004148:	3001      	adds	r0, #1
 800414a:	d0ab      	beq.n	80040a4 <_printf_i+0x164>
 800414c:	6823      	ldr	r3, [r4, #0]
 800414e:	079b      	lsls	r3, r3, #30
 8004150:	d413      	bmi.n	800417a <_printf_i+0x23a>
 8004152:	68e0      	ldr	r0, [r4, #12]
 8004154:	9b03      	ldr	r3, [sp, #12]
 8004156:	4298      	cmp	r0, r3
 8004158:	bfb8      	it	lt
 800415a:	4618      	movlt	r0, r3
 800415c:	e7a4      	b.n	80040a8 <_printf_i+0x168>
 800415e:	2301      	movs	r3, #1
 8004160:	4632      	mov	r2, r6
 8004162:	4649      	mov	r1, r9
 8004164:	4640      	mov	r0, r8
 8004166:	47d0      	blx	sl
 8004168:	3001      	adds	r0, #1
 800416a:	d09b      	beq.n	80040a4 <_printf_i+0x164>
 800416c:	3501      	adds	r5, #1
 800416e:	68e3      	ldr	r3, [r4, #12]
 8004170:	9903      	ldr	r1, [sp, #12]
 8004172:	1a5b      	subs	r3, r3, r1
 8004174:	42ab      	cmp	r3, r5
 8004176:	dcf2      	bgt.n	800415e <_printf_i+0x21e>
 8004178:	e7eb      	b.n	8004152 <_printf_i+0x212>
 800417a:	2500      	movs	r5, #0
 800417c:	f104 0619 	add.w	r6, r4, #25
 8004180:	e7f5      	b.n	800416e <_printf_i+0x22e>
 8004182:	bf00      	nop
 8004184:	08005161 	.word	0x08005161
 8004188:	08005172 	.word	0x08005172

0800418c <_scanf_chars>:
 800418c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004190:	4615      	mov	r5, r2
 8004192:	688a      	ldr	r2, [r1, #8]
 8004194:	4680      	mov	r8, r0
 8004196:	460c      	mov	r4, r1
 8004198:	b932      	cbnz	r2, 80041a8 <_scanf_chars+0x1c>
 800419a:	698a      	ldr	r2, [r1, #24]
 800419c:	2a00      	cmp	r2, #0
 800419e:	bf0c      	ite	eq
 80041a0:	2201      	moveq	r2, #1
 80041a2:	f04f 32ff 	movne.w	r2, #4294967295
 80041a6:	608a      	str	r2, [r1, #8]
 80041a8:	6822      	ldr	r2, [r4, #0]
 80041aa:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8004238 <_scanf_chars+0xac>
 80041ae:	06d1      	lsls	r1, r2, #27
 80041b0:	bf5f      	itttt	pl
 80041b2:	681a      	ldrpl	r2, [r3, #0]
 80041b4:	1d11      	addpl	r1, r2, #4
 80041b6:	6019      	strpl	r1, [r3, #0]
 80041b8:	6816      	ldrpl	r6, [r2, #0]
 80041ba:	2700      	movs	r7, #0
 80041bc:	69a0      	ldr	r0, [r4, #24]
 80041be:	b188      	cbz	r0, 80041e4 <_scanf_chars+0x58>
 80041c0:	2801      	cmp	r0, #1
 80041c2:	d107      	bne.n	80041d4 <_scanf_chars+0x48>
 80041c4:	682b      	ldr	r3, [r5, #0]
 80041c6:	781a      	ldrb	r2, [r3, #0]
 80041c8:	6963      	ldr	r3, [r4, #20]
 80041ca:	5c9b      	ldrb	r3, [r3, r2]
 80041cc:	b953      	cbnz	r3, 80041e4 <_scanf_chars+0x58>
 80041ce:	bb27      	cbnz	r7, 800421a <_scanf_chars+0x8e>
 80041d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041d4:	2802      	cmp	r0, #2
 80041d6:	d120      	bne.n	800421a <_scanf_chars+0x8e>
 80041d8:	682b      	ldr	r3, [r5, #0]
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	f813 3009 	ldrb.w	r3, [r3, r9]
 80041e0:	071b      	lsls	r3, r3, #28
 80041e2:	d41a      	bmi.n	800421a <_scanf_chars+0x8e>
 80041e4:	6823      	ldr	r3, [r4, #0]
 80041e6:	06da      	lsls	r2, r3, #27
 80041e8:	bf5e      	ittt	pl
 80041ea:	682b      	ldrpl	r3, [r5, #0]
 80041ec:	781b      	ldrbpl	r3, [r3, #0]
 80041ee:	f806 3b01 	strbpl.w	r3, [r6], #1
 80041f2:	682a      	ldr	r2, [r5, #0]
 80041f4:	686b      	ldr	r3, [r5, #4]
 80041f6:	3201      	adds	r2, #1
 80041f8:	602a      	str	r2, [r5, #0]
 80041fa:	68a2      	ldr	r2, [r4, #8]
 80041fc:	3b01      	subs	r3, #1
 80041fe:	3a01      	subs	r2, #1
 8004200:	606b      	str	r3, [r5, #4]
 8004202:	3701      	adds	r7, #1
 8004204:	60a2      	str	r2, [r4, #8]
 8004206:	b142      	cbz	r2, 800421a <_scanf_chars+0x8e>
 8004208:	2b00      	cmp	r3, #0
 800420a:	dcd7      	bgt.n	80041bc <_scanf_chars+0x30>
 800420c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004210:	4629      	mov	r1, r5
 8004212:	4640      	mov	r0, r8
 8004214:	4798      	blx	r3
 8004216:	2800      	cmp	r0, #0
 8004218:	d0d0      	beq.n	80041bc <_scanf_chars+0x30>
 800421a:	6823      	ldr	r3, [r4, #0]
 800421c:	f013 0310 	ands.w	r3, r3, #16
 8004220:	d105      	bne.n	800422e <_scanf_chars+0xa2>
 8004222:	68e2      	ldr	r2, [r4, #12]
 8004224:	3201      	adds	r2, #1
 8004226:	60e2      	str	r2, [r4, #12]
 8004228:	69a2      	ldr	r2, [r4, #24]
 800422a:	b102      	cbz	r2, 800422e <_scanf_chars+0xa2>
 800422c:	7033      	strb	r3, [r6, #0]
 800422e:	6923      	ldr	r3, [r4, #16]
 8004230:	441f      	add	r7, r3
 8004232:	6127      	str	r7, [r4, #16]
 8004234:	2000      	movs	r0, #0
 8004236:	e7cb      	b.n	80041d0 <_scanf_chars+0x44>
 8004238:	08004fed 	.word	0x08004fed

0800423c <_scanf_i>:
 800423c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004240:	4698      	mov	r8, r3
 8004242:	4b74      	ldr	r3, [pc, #464]	; (8004414 <_scanf_i+0x1d8>)
 8004244:	460c      	mov	r4, r1
 8004246:	4682      	mov	sl, r0
 8004248:	4616      	mov	r6, r2
 800424a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800424e:	b087      	sub	sp, #28
 8004250:	ab03      	add	r3, sp, #12
 8004252:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004256:	4b70      	ldr	r3, [pc, #448]	; (8004418 <_scanf_i+0x1dc>)
 8004258:	69a1      	ldr	r1, [r4, #24]
 800425a:	4a70      	ldr	r2, [pc, #448]	; (800441c <_scanf_i+0x1e0>)
 800425c:	2903      	cmp	r1, #3
 800425e:	bf18      	it	ne
 8004260:	461a      	movne	r2, r3
 8004262:	68a3      	ldr	r3, [r4, #8]
 8004264:	9201      	str	r2, [sp, #4]
 8004266:	1e5a      	subs	r2, r3, #1
 8004268:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800426c:	bf88      	it	hi
 800426e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004272:	4627      	mov	r7, r4
 8004274:	bf82      	ittt	hi
 8004276:	eb03 0905 	addhi.w	r9, r3, r5
 800427a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800427e:	60a3      	strhi	r3, [r4, #8]
 8004280:	f857 3b1c 	ldr.w	r3, [r7], #28
 8004284:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8004288:	bf98      	it	ls
 800428a:	f04f 0900 	movls.w	r9, #0
 800428e:	6023      	str	r3, [r4, #0]
 8004290:	463d      	mov	r5, r7
 8004292:	f04f 0b00 	mov.w	fp, #0
 8004296:	6831      	ldr	r1, [r6, #0]
 8004298:	ab03      	add	r3, sp, #12
 800429a:	7809      	ldrb	r1, [r1, #0]
 800429c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80042a0:	2202      	movs	r2, #2
 80042a2:	f7fb ffad 	bl	8000200 <memchr>
 80042a6:	b328      	cbz	r0, 80042f4 <_scanf_i+0xb8>
 80042a8:	f1bb 0f01 	cmp.w	fp, #1
 80042ac:	d159      	bne.n	8004362 <_scanf_i+0x126>
 80042ae:	6862      	ldr	r2, [r4, #4]
 80042b0:	b92a      	cbnz	r2, 80042be <_scanf_i+0x82>
 80042b2:	6822      	ldr	r2, [r4, #0]
 80042b4:	2308      	movs	r3, #8
 80042b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ba:	6063      	str	r3, [r4, #4]
 80042bc:	6022      	str	r2, [r4, #0]
 80042be:	6822      	ldr	r2, [r4, #0]
 80042c0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80042c4:	6022      	str	r2, [r4, #0]
 80042c6:	68a2      	ldr	r2, [r4, #8]
 80042c8:	1e51      	subs	r1, r2, #1
 80042ca:	60a1      	str	r1, [r4, #8]
 80042cc:	b192      	cbz	r2, 80042f4 <_scanf_i+0xb8>
 80042ce:	6832      	ldr	r2, [r6, #0]
 80042d0:	1c51      	adds	r1, r2, #1
 80042d2:	6031      	str	r1, [r6, #0]
 80042d4:	7812      	ldrb	r2, [r2, #0]
 80042d6:	f805 2b01 	strb.w	r2, [r5], #1
 80042da:	6872      	ldr	r2, [r6, #4]
 80042dc:	3a01      	subs	r2, #1
 80042de:	2a00      	cmp	r2, #0
 80042e0:	6072      	str	r2, [r6, #4]
 80042e2:	dc07      	bgt.n	80042f4 <_scanf_i+0xb8>
 80042e4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80042e8:	4631      	mov	r1, r6
 80042ea:	4650      	mov	r0, sl
 80042ec:	4790      	blx	r2
 80042ee:	2800      	cmp	r0, #0
 80042f0:	f040 8085 	bne.w	80043fe <_scanf_i+0x1c2>
 80042f4:	f10b 0b01 	add.w	fp, fp, #1
 80042f8:	f1bb 0f03 	cmp.w	fp, #3
 80042fc:	d1cb      	bne.n	8004296 <_scanf_i+0x5a>
 80042fe:	6863      	ldr	r3, [r4, #4]
 8004300:	b90b      	cbnz	r3, 8004306 <_scanf_i+0xca>
 8004302:	230a      	movs	r3, #10
 8004304:	6063      	str	r3, [r4, #4]
 8004306:	6863      	ldr	r3, [r4, #4]
 8004308:	4945      	ldr	r1, [pc, #276]	; (8004420 <_scanf_i+0x1e4>)
 800430a:	6960      	ldr	r0, [r4, #20]
 800430c:	1ac9      	subs	r1, r1, r3
 800430e:	f000 f8e3 	bl	80044d8 <__sccl>
 8004312:	f04f 0b00 	mov.w	fp, #0
 8004316:	68a3      	ldr	r3, [r4, #8]
 8004318:	6822      	ldr	r2, [r4, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d03d      	beq.n	800439a <_scanf_i+0x15e>
 800431e:	6831      	ldr	r1, [r6, #0]
 8004320:	6960      	ldr	r0, [r4, #20]
 8004322:	f891 c000 	ldrb.w	ip, [r1]
 8004326:	f810 000c 	ldrb.w	r0, [r0, ip]
 800432a:	2800      	cmp	r0, #0
 800432c:	d035      	beq.n	800439a <_scanf_i+0x15e>
 800432e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8004332:	d124      	bne.n	800437e <_scanf_i+0x142>
 8004334:	0510      	lsls	r0, r2, #20
 8004336:	d522      	bpl.n	800437e <_scanf_i+0x142>
 8004338:	f10b 0b01 	add.w	fp, fp, #1
 800433c:	f1b9 0f00 	cmp.w	r9, #0
 8004340:	d003      	beq.n	800434a <_scanf_i+0x10e>
 8004342:	3301      	adds	r3, #1
 8004344:	f109 39ff 	add.w	r9, r9, #4294967295
 8004348:	60a3      	str	r3, [r4, #8]
 800434a:	6873      	ldr	r3, [r6, #4]
 800434c:	3b01      	subs	r3, #1
 800434e:	2b00      	cmp	r3, #0
 8004350:	6073      	str	r3, [r6, #4]
 8004352:	dd1b      	ble.n	800438c <_scanf_i+0x150>
 8004354:	6833      	ldr	r3, [r6, #0]
 8004356:	3301      	adds	r3, #1
 8004358:	6033      	str	r3, [r6, #0]
 800435a:	68a3      	ldr	r3, [r4, #8]
 800435c:	3b01      	subs	r3, #1
 800435e:	60a3      	str	r3, [r4, #8]
 8004360:	e7d9      	b.n	8004316 <_scanf_i+0xda>
 8004362:	f1bb 0f02 	cmp.w	fp, #2
 8004366:	d1ae      	bne.n	80042c6 <_scanf_i+0x8a>
 8004368:	6822      	ldr	r2, [r4, #0]
 800436a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800436e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004372:	d1bf      	bne.n	80042f4 <_scanf_i+0xb8>
 8004374:	2310      	movs	r3, #16
 8004376:	6063      	str	r3, [r4, #4]
 8004378:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800437c:	e7a2      	b.n	80042c4 <_scanf_i+0x88>
 800437e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8004382:	6022      	str	r2, [r4, #0]
 8004384:	780b      	ldrb	r3, [r1, #0]
 8004386:	f805 3b01 	strb.w	r3, [r5], #1
 800438a:	e7de      	b.n	800434a <_scanf_i+0x10e>
 800438c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004390:	4631      	mov	r1, r6
 8004392:	4650      	mov	r0, sl
 8004394:	4798      	blx	r3
 8004396:	2800      	cmp	r0, #0
 8004398:	d0df      	beq.n	800435a <_scanf_i+0x11e>
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	05d9      	lsls	r1, r3, #23
 800439e:	d50d      	bpl.n	80043bc <_scanf_i+0x180>
 80043a0:	42bd      	cmp	r5, r7
 80043a2:	d909      	bls.n	80043b8 <_scanf_i+0x17c>
 80043a4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80043a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80043ac:	4632      	mov	r2, r6
 80043ae:	4650      	mov	r0, sl
 80043b0:	4798      	blx	r3
 80043b2:	f105 39ff 	add.w	r9, r5, #4294967295
 80043b6:	464d      	mov	r5, r9
 80043b8:	42bd      	cmp	r5, r7
 80043ba:	d028      	beq.n	800440e <_scanf_i+0x1d2>
 80043bc:	6822      	ldr	r2, [r4, #0]
 80043be:	f012 0210 	ands.w	r2, r2, #16
 80043c2:	d113      	bne.n	80043ec <_scanf_i+0x1b0>
 80043c4:	702a      	strb	r2, [r5, #0]
 80043c6:	6863      	ldr	r3, [r4, #4]
 80043c8:	9e01      	ldr	r6, [sp, #4]
 80043ca:	4639      	mov	r1, r7
 80043cc:	4650      	mov	r0, sl
 80043ce:	47b0      	blx	r6
 80043d0:	f8d8 3000 	ldr.w	r3, [r8]
 80043d4:	6821      	ldr	r1, [r4, #0]
 80043d6:	1d1a      	adds	r2, r3, #4
 80043d8:	f8c8 2000 	str.w	r2, [r8]
 80043dc:	f011 0f20 	tst.w	r1, #32
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	d00f      	beq.n	8004404 <_scanf_i+0x1c8>
 80043e4:	6018      	str	r0, [r3, #0]
 80043e6:	68e3      	ldr	r3, [r4, #12]
 80043e8:	3301      	adds	r3, #1
 80043ea:	60e3      	str	r3, [r4, #12]
 80043ec:	1bed      	subs	r5, r5, r7
 80043ee:	44ab      	add	fp, r5
 80043f0:	6925      	ldr	r5, [r4, #16]
 80043f2:	445d      	add	r5, fp
 80043f4:	6125      	str	r5, [r4, #16]
 80043f6:	2000      	movs	r0, #0
 80043f8:	b007      	add	sp, #28
 80043fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043fe:	f04f 0b00 	mov.w	fp, #0
 8004402:	e7ca      	b.n	800439a <_scanf_i+0x15e>
 8004404:	07ca      	lsls	r2, r1, #31
 8004406:	bf4c      	ite	mi
 8004408:	8018      	strhmi	r0, [r3, #0]
 800440a:	6018      	strpl	r0, [r3, #0]
 800440c:	e7eb      	b.n	80043e6 <_scanf_i+0x1aa>
 800440e:	2001      	movs	r0, #1
 8004410:	e7f2      	b.n	80043f8 <_scanf_i+0x1bc>
 8004412:	bf00      	nop
 8004414:	08004ec0 	.word	0x08004ec0
 8004418:	08004645 	.word	0x08004645
 800441c:	080032cd 	.word	0x080032cd
 8004420:	0800519c 	.word	0x0800519c

08004424 <_putc_r>:
 8004424:	b570      	push	{r4, r5, r6, lr}
 8004426:	460d      	mov	r5, r1
 8004428:	4614      	mov	r4, r2
 800442a:	4606      	mov	r6, r0
 800442c:	b118      	cbz	r0, 8004436 <_putc_r+0x12>
 800442e:	6983      	ldr	r3, [r0, #24]
 8004430:	b90b      	cbnz	r3, 8004436 <_putc_r+0x12>
 8004432:	f7fe ffd1 	bl	80033d8 <__sinit>
 8004436:	4b1c      	ldr	r3, [pc, #112]	; (80044a8 <_putc_r+0x84>)
 8004438:	429c      	cmp	r4, r3
 800443a:	d124      	bne.n	8004486 <_putc_r+0x62>
 800443c:	6874      	ldr	r4, [r6, #4]
 800443e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004440:	07d8      	lsls	r0, r3, #31
 8004442:	d405      	bmi.n	8004450 <_putc_r+0x2c>
 8004444:	89a3      	ldrh	r3, [r4, #12]
 8004446:	0599      	lsls	r1, r3, #22
 8004448:	d402      	bmi.n	8004450 <_putc_r+0x2c>
 800444a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800444c:	f7ff f862 	bl	8003514 <__retarget_lock_acquire_recursive>
 8004450:	68a3      	ldr	r3, [r4, #8]
 8004452:	3b01      	subs	r3, #1
 8004454:	2b00      	cmp	r3, #0
 8004456:	60a3      	str	r3, [r4, #8]
 8004458:	da05      	bge.n	8004466 <_putc_r+0x42>
 800445a:	69a2      	ldr	r2, [r4, #24]
 800445c:	4293      	cmp	r3, r2
 800445e:	db1c      	blt.n	800449a <_putc_r+0x76>
 8004460:	b2eb      	uxtb	r3, r5
 8004462:	2b0a      	cmp	r3, #10
 8004464:	d019      	beq.n	800449a <_putc_r+0x76>
 8004466:	6823      	ldr	r3, [r4, #0]
 8004468:	1c5a      	adds	r2, r3, #1
 800446a:	6022      	str	r2, [r4, #0]
 800446c:	701d      	strb	r5, [r3, #0]
 800446e:	b2ed      	uxtb	r5, r5
 8004470:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004472:	07da      	lsls	r2, r3, #31
 8004474:	d405      	bmi.n	8004482 <_putc_r+0x5e>
 8004476:	89a3      	ldrh	r3, [r4, #12]
 8004478:	059b      	lsls	r3, r3, #22
 800447a:	d402      	bmi.n	8004482 <_putc_r+0x5e>
 800447c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800447e:	f7ff f84a 	bl	8003516 <__retarget_lock_release_recursive>
 8004482:	4628      	mov	r0, r5
 8004484:	bd70      	pop	{r4, r5, r6, pc}
 8004486:	4b09      	ldr	r3, [pc, #36]	; (80044ac <_putc_r+0x88>)
 8004488:	429c      	cmp	r4, r3
 800448a:	d101      	bne.n	8004490 <_putc_r+0x6c>
 800448c:	68b4      	ldr	r4, [r6, #8]
 800448e:	e7d6      	b.n	800443e <_putc_r+0x1a>
 8004490:	4b07      	ldr	r3, [pc, #28]	; (80044b0 <_putc_r+0x8c>)
 8004492:	429c      	cmp	r4, r3
 8004494:	bf08      	it	eq
 8004496:	68f4      	ldreq	r4, [r6, #12]
 8004498:	e7d1      	b.n	800443e <_putc_r+0x1a>
 800449a:	4629      	mov	r1, r5
 800449c:	4622      	mov	r2, r4
 800449e:	4630      	mov	r0, r6
 80044a0:	f000 f90c 	bl	80046bc <__swbuf_r>
 80044a4:	4605      	mov	r5, r0
 80044a6:	e7e3      	b.n	8004470 <_putc_r+0x4c>
 80044a8:	08005110 	.word	0x08005110
 80044ac:	08005130 	.word	0x08005130
 80044b0:	080050f0 	.word	0x080050f0

080044b4 <_read_r>:
 80044b4:	b538      	push	{r3, r4, r5, lr}
 80044b6:	4d07      	ldr	r5, [pc, #28]	; (80044d4 <_read_r+0x20>)
 80044b8:	4604      	mov	r4, r0
 80044ba:	4608      	mov	r0, r1
 80044bc:	4611      	mov	r1, r2
 80044be:	2200      	movs	r2, #0
 80044c0:	602a      	str	r2, [r5, #0]
 80044c2:	461a      	mov	r2, r3
 80044c4:	f7fd f9ec 	bl	80018a0 <_read>
 80044c8:	1c43      	adds	r3, r0, #1
 80044ca:	d102      	bne.n	80044d2 <_read_r+0x1e>
 80044cc:	682b      	ldr	r3, [r5, #0]
 80044ce:	b103      	cbz	r3, 80044d2 <_read_r+0x1e>
 80044d0:	6023      	str	r3, [r4, #0]
 80044d2:	bd38      	pop	{r3, r4, r5, pc}
 80044d4:	200000a8 	.word	0x200000a8

080044d8 <__sccl>:
 80044d8:	b570      	push	{r4, r5, r6, lr}
 80044da:	780b      	ldrb	r3, [r1, #0]
 80044dc:	4604      	mov	r4, r0
 80044de:	2b5e      	cmp	r3, #94	; 0x5e
 80044e0:	bf0b      	itete	eq
 80044e2:	784b      	ldrbeq	r3, [r1, #1]
 80044e4:	1c48      	addne	r0, r1, #1
 80044e6:	1c88      	addeq	r0, r1, #2
 80044e8:	2200      	movne	r2, #0
 80044ea:	bf08      	it	eq
 80044ec:	2201      	moveq	r2, #1
 80044ee:	1e61      	subs	r1, r4, #1
 80044f0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80044f4:	f801 2f01 	strb.w	r2, [r1, #1]!
 80044f8:	42a9      	cmp	r1, r5
 80044fa:	d1fb      	bne.n	80044f4 <__sccl+0x1c>
 80044fc:	b90b      	cbnz	r3, 8004502 <__sccl+0x2a>
 80044fe:	3801      	subs	r0, #1
 8004500:	bd70      	pop	{r4, r5, r6, pc}
 8004502:	f082 0101 	eor.w	r1, r2, #1
 8004506:	54e1      	strb	r1, [r4, r3]
 8004508:	1c42      	adds	r2, r0, #1
 800450a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800450e:	2d2d      	cmp	r5, #45	; 0x2d
 8004510:	f102 36ff 	add.w	r6, r2, #4294967295
 8004514:	4610      	mov	r0, r2
 8004516:	d006      	beq.n	8004526 <__sccl+0x4e>
 8004518:	2d5d      	cmp	r5, #93	; 0x5d
 800451a:	d0f1      	beq.n	8004500 <__sccl+0x28>
 800451c:	b90d      	cbnz	r5, 8004522 <__sccl+0x4a>
 800451e:	4630      	mov	r0, r6
 8004520:	e7ee      	b.n	8004500 <__sccl+0x28>
 8004522:	462b      	mov	r3, r5
 8004524:	e7ef      	b.n	8004506 <__sccl+0x2e>
 8004526:	7816      	ldrb	r6, [r2, #0]
 8004528:	2e5d      	cmp	r6, #93	; 0x5d
 800452a:	d0fa      	beq.n	8004522 <__sccl+0x4a>
 800452c:	42b3      	cmp	r3, r6
 800452e:	dcf8      	bgt.n	8004522 <__sccl+0x4a>
 8004530:	4618      	mov	r0, r3
 8004532:	3001      	adds	r0, #1
 8004534:	4286      	cmp	r6, r0
 8004536:	5421      	strb	r1, [r4, r0]
 8004538:	dcfb      	bgt.n	8004532 <__sccl+0x5a>
 800453a:	43d8      	mvns	r0, r3
 800453c:	4430      	add	r0, r6
 800453e:	1c5d      	adds	r5, r3, #1
 8004540:	42b3      	cmp	r3, r6
 8004542:	bfa8      	it	ge
 8004544:	2000      	movge	r0, #0
 8004546:	182b      	adds	r3, r5, r0
 8004548:	3202      	adds	r2, #2
 800454a:	e7de      	b.n	800450a <__sccl+0x32>

0800454c <_strtoul_l.isra.0>:
 800454c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004550:	4e3b      	ldr	r6, [pc, #236]	; (8004640 <_strtoul_l.isra.0+0xf4>)
 8004552:	4686      	mov	lr, r0
 8004554:	468c      	mov	ip, r1
 8004556:	4660      	mov	r0, ip
 8004558:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800455c:	5da5      	ldrb	r5, [r4, r6]
 800455e:	f015 0508 	ands.w	r5, r5, #8
 8004562:	d1f8      	bne.n	8004556 <_strtoul_l.isra.0+0xa>
 8004564:	2c2d      	cmp	r4, #45	; 0x2d
 8004566:	d134      	bne.n	80045d2 <_strtoul_l.isra.0+0x86>
 8004568:	f89c 4000 	ldrb.w	r4, [ip]
 800456c:	f04f 0801 	mov.w	r8, #1
 8004570:	f100 0c02 	add.w	ip, r0, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d05e      	beq.n	8004636 <_strtoul_l.isra.0+0xea>
 8004578:	2b10      	cmp	r3, #16
 800457a:	d10c      	bne.n	8004596 <_strtoul_l.isra.0+0x4a>
 800457c:	2c30      	cmp	r4, #48	; 0x30
 800457e:	d10a      	bne.n	8004596 <_strtoul_l.isra.0+0x4a>
 8004580:	f89c 0000 	ldrb.w	r0, [ip]
 8004584:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004588:	2858      	cmp	r0, #88	; 0x58
 800458a:	d14f      	bne.n	800462c <_strtoul_l.isra.0+0xe0>
 800458c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8004590:	2310      	movs	r3, #16
 8004592:	f10c 0c02 	add.w	ip, ip, #2
 8004596:	f04f 37ff 	mov.w	r7, #4294967295
 800459a:	2500      	movs	r5, #0
 800459c:	fbb7 f7f3 	udiv	r7, r7, r3
 80045a0:	fb03 f907 	mul.w	r9, r3, r7
 80045a4:	ea6f 0909 	mvn.w	r9, r9
 80045a8:	4628      	mov	r0, r5
 80045aa:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80045ae:	2e09      	cmp	r6, #9
 80045b0:	d818      	bhi.n	80045e4 <_strtoul_l.isra.0+0x98>
 80045b2:	4634      	mov	r4, r6
 80045b4:	42a3      	cmp	r3, r4
 80045b6:	dd24      	ble.n	8004602 <_strtoul_l.isra.0+0xb6>
 80045b8:	2d00      	cmp	r5, #0
 80045ba:	db1f      	blt.n	80045fc <_strtoul_l.isra.0+0xb0>
 80045bc:	4287      	cmp	r7, r0
 80045be:	d31d      	bcc.n	80045fc <_strtoul_l.isra.0+0xb0>
 80045c0:	d101      	bne.n	80045c6 <_strtoul_l.isra.0+0x7a>
 80045c2:	45a1      	cmp	r9, r4
 80045c4:	db1a      	blt.n	80045fc <_strtoul_l.isra.0+0xb0>
 80045c6:	fb00 4003 	mla	r0, r0, r3, r4
 80045ca:	2501      	movs	r5, #1
 80045cc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80045d0:	e7eb      	b.n	80045aa <_strtoul_l.isra.0+0x5e>
 80045d2:	2c2b      	cmp	r4, #43	; 0x2b
 80045d4:	bf08      	it	eq
 80045d6:	f89c 4000 	ldrbeq.w	r4, [ip]
 80045da:	46a8      	mov	r8, r5
 80045dc:	bf08      	it	eq
 80045de:	f100 0c02 	addeq.w	ip, r0, #2
 80045e2:	e7c7      	b.n	8004574 <_strtoul_l.isra.0+0x28>
 80045e4:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80045e8:	2e19      	cmp	r6, #25
 80045ea:	d801      	bhi.n	80045f0 <_strtoul_l.isra.0+0xa4>
 80045ec:	3c37      	subs	r4, #55	; 0x37
 80045ee:	e7e1      	b.n	80045b4 <_strtoul_l.isra.0+0x68>
 80045f0:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80045f4:	2e19      	cmp	r6, #25
 80045f6:	d804      	bhi.n	8004602 <_strtoul_l.isra.0+0xb6>
 80045f8:	3c57      	subs	r4, #87	; 0x57
 80045fa:	e7db      	b.n	80045b4 <_strtoul_l.isra.0+0x68>
 80045fc:	f04f 35ff 	mov.w	r5, #4294967295
 8004600:	e7e4      	b.n	80045cc <_strtoul_l.isra.0+0x80>
 8004602:	2d00      	cmp	r5, #0
 8004604:	da07      	bge.n	8004616 <_strtoul_l.isra.0+0xca>
 8004606:	2322      	movs	r3, #34	; 0x22
 8004608:	f8ce 3000 	str.w	r3, [lr]
 800460c:	f04f 30ff 	mov.w	r0, #4294967295
 8004610:	b942      	cbnz	r2, 8004624 <_strtoul_l.isra.0+0xd8>
 8004612:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004616:	f1b8 0f00 	cmp.w	r8, #0
 800461a:	d000      	beq.n	800461e <_strtoul_l.isra.0+0xd2>
 800461c:	4240      	negs	r0, r0
 800461e:	2a00      	cmp	r2, #0
 8004620:	d0f7      	beq.n	8004612 <_strtoul_l.isra.0+0xc6>
 8004622:	b10d      	cbz	r5, 8004628 <_strtoul_l.isra.0+0xdc>
 8004624:	f10c 31ff 	add.w	r1, ip, #4294967295
 8004628:	6011      	str	r1, [r2, #0]
 800462a:	e7f2      	b.n	8004612 <_strtoul_l.isra.0+0xc6>
 800462c:	2430      	movs	r4, #48	; 0x30
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1b1      	bne.n	8004596 <_strtoul_l.isra.0+0x4a>
 8004632:	2308      	movs	r3, #8
 8004634:	e7af      	b.n	8004596 <_strtoul_l.isra.0+0x4a>
 8004636:	2c30      	cmp	r4, #48	; 0x30
 8004638:	d0a2      	beq.n	8004580 <_strtoul_l.isra.0+0x34>
 800463a:	230a      	movs	r3, #10
 800463c:	e7ab      	b.n	8004596 <_strtoul_l.isra.0+0x4a>
 800463e:	bf00      	nop
 8004640:	08004fed 	.word	0x08004fed

08004644 <_strtoul_r>:
 8004644:	f7ff bf82 	b.w	800454c <_strtoul_l.isra.0>

08004648 <__submore>:
 8004648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800464c:	460c      	mov	r4, r1
 800464e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004650:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004654:	4299      	cmp	r1, r3
 8004656:	d11d      	bne.n	8004694 <__submore+0x4c>
 8004658:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800465c:	f7fe fc5e 	bl	8002f1c <_malloc_r>
 8004660:	b918      	cbnz	r0, 800466a <__submore+0x22>
 8004662:	f04f 30ff 	mov.w	r0, #4294967295
 8004666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800466a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800466e:	63a3      	str	r3, [r4, #56]	; 0x38
 8004670:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004674:	6360      	str	r0, [r4, #52]	; 0x34
 8004676:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800467a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800467e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8004682:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004686:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800468a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800468e:	6020      	str	r0, [r4, #0]
 8004690:	2000      	movs	r0, #0
 8004692:	e7e8      	b.n	8004666 <__submore+0x1e>
 8004694:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004696:	0077      	lsls	r7, r6, #1
 8004698:	463a      	mov	r2, r7
 800469a:	f000 fa0f 	bl	8004abc <_realloc_r>
 800469e:	4605      	mov	r5, r0
 80046a0:	2800      	cmp	r0, #0
 80046a2:	d0de      	beq.n	8004662 <__submore+0x1a>
 80046a4:	eb00 0806 	add.w	r8, r0, r6
 80046a8:	4601      	mov	r1, r0
 80046aa:	4632      	mov	r2, r6
 80046ac:	4640      	mov	r0, r8
 80046ae:	f7fe fbbf 	bl	8002e30 <memcpy>
 80046b2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80046b6:	f8c4 8000 	str.w	r8, [r4]
 80046ba:	e7e9      	b.n	8004690 <__submore+0x48>

080046bc <__swbuf_r>:
 80046bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046be:	460e      	mov	r6, r1
 80046c0:	4614      	mov	r4, r2
 80046c2:	4605      	mov	r5, r0
 80046c4:	b118      	cbz	r0, 80046ce <__swbuf_r+0x12>
 80046c6:	6983      	ldr	r3, [r0, #24]
 80046c8:	b90b      	cbnz	r3, 80046ce <__swbuf_r+0x12>
 80046ca:	f7fe fe85 	bl	80033d8 <__sinit>
 80046ce:	4b21      	ldr	r3, [pc, #132]	; (8004754 <__swbuf_r+0x98>)
 80046d0:	429c      	cmp	r4, r3
 80046d2:	d12b      	bne.n	800472c <__swbuf_r+0x70>
 80046d4:	686c      	ldr	r4, [r5, #4]
 80046d6:	69a3      	ldr	r3, [r4, #24]
 80046d8:	60a3      	str	r3, [r4, #8]
 80046da:	89a3      	ldrh	r3, [r4, #12]
 80046dc:	071a      	lsls	r2, r3, #28
 80046de:	d52f      	bpl.n	8004740 <__swbuf_r+0x84>
 80046e0:	6923      	ldr	r3, [r4, #16]
 80046e2:	b36b      	cbz	r3, 8004740 <__swbuf_r+0x84>
 80046e4:	6923      	ldr	r3, [r4, #16]
 80046e6:	6820      	ldr	r0, [r4, #0]
 80046e8:	1ac0      	subs	r0, r0, r3
 80046ea:	6963      	ldr	r3, [r4, #20]
 80046ec:	b2f6      	uxtb	r6, r6
 80046ee:	4283      	cmp	r3, r0
 80046f0:	4637      	mov	r7, r6
 80046f2:	dc04      	bgt.n	80046fe <__swbuf_r+0x42>
 80046f4:	4621      	mov	r1, r4
 80046f6:	4628      	mov	r0, r5
 80046f8:	f000 f926 	bl	8004948 <_fflush_r>
 80046fc:	bb30      	cbnz	r0, 800474c <__swbuf_r+0x90>
 80046fe:	68a3      	ldr	r3, [r4, #8]
 8004700:	3b01      	subs	r3, #1
 8004702:	60a3      	str	r3, [r4, #8]
 8004704:	6823      	ldr	r3, [r4, #0]
 8004706:	1c5a      	adds	r2, r3, #1
 8004708:	6022      	str	r2, [r4, #0]
 800470a:	701e      	strb	r6, [r3, #0]
 800470c:	6963      	ldr	r3, [r4, #20]
 800470e:	3001      	adds	r0, #1
 8004710:	4283      	cmp	r3, r0
 8004712:	d004      	beq.n	800471e <__swbuf_r+0x62>
 8004714:	89a3      	ldrh	r3, [r4, #12]
 8004716:	07db      	lsls	r3, r3, #31
 8004718:	d506      	bpl.n	8004728 <__swbuf_r+0x6c>
 800471a:	2e0a      	cmp	r6, #10
 800471c:	d104      	bne.n	8004728 <__swbuf_r+0x6c>
 800471e:	4621      	mov	r1, r4
 8004720:	4628      	mov	r0, r5
 8004722:	f000 f911 	bl	8004948 <_fflush_r>
 8004726:	b988      	cbnz	r0, 800474c <__swbuf_r+0x90>
 8004728:	4638      	mov	r0, r7
 800472a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800472c:	4b0a      	ldr	r3, [pc, #40]	; (8004758 <__swbuf_r+0x9c>)
 800472e:	429c      	cmp	r4, r3
 8004730:	d101      	bne.n	8004736 <__swbuf_r+0x7a>
 8004732:	68ac      	ldr	r4, [r5, #8]
 8004734:	e7cf      	b.n	80046d6 <__swbuf_r+0x1a>
 8004736:	4b09      	ldr	r3, [pc, #36]	; (800475c <__swbuf_r+0xa0>)
 8004738:	429c      	cmp	r4, r3
 800473a:	bf08      	it	eq
 800473c:	68ec      	ldreq	r4, [r5, #12]
 800473e:	e7ca      	b.n	80046d6 <__swbuf_r+0x1a>
 8004740:	4621      	mov	r1, r4
 8004742:	4628      	mov	r0, r5
 8004744:	f000 f80c 	bl	8004760 <__swsetup_r>
 8004748:	2800      	cmp	r0, #0
 800474a:	d0cb      	beq.n	80046e4 <__swbuf_r+0x28>
 800474c:	f04f 37ff 	mov.w	r7, #4294967295
 8004750:	e7ea      	b.n	8004728 <__swbuf_r+0x6c>
 8004752:	bf00      	nop
 8004754:	08005110 	.word	0x08005110
 8004758:	08005130 	.word	0x08005130
 800475c:	080050f0 	.word	0x080050f0

08004760 <__swsetup_r>:
 8004760:	4b32      	ldr	r3, [pc, #200]	; (800482c <__swsetup_r+0xcc>)
 8004762:	b570      	push	{r4, r5, r6, lr}
 8004764:	681d      	ldr	r5, [r3, #0]
 8004766:	4606      	mov	r6, r0
 8004768:	460c      	mov	r4, r1
 800476a:	b125      	cbz	r5, 8004776 <__swsetup_r+0x16>
 800476c:	69ab      	ldr	r3, [r5, #24]
 800476e:	b913      	cbnz	r3, 8004776 <__swsetup_r+0x16>
 8004770:	4628      	mov	r0, r5
 8004772:	f7fe fe31 	bl	80033d8 <__sinit>
 8004776:	4b2e      	ldr	r3, [pc, #184]	; (8004830 <__swsetup_r+0xd0>)
 8004778:	429c      	cmp	r4, r3
 800477a:	d10f      	bne.n	800479c <__swsetup_r+0x3c>
 800477c:	686c      	ldr	r4, [r5, #4]
 800477e:	89a3      	ldrh	r3, [r4, #12]
 8004780:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004784:	0719      	lsls	r1, r3, #28
 8004786:	d42c      	bmi.n	80047e2 <__swsetup_r+0x82>
 8004788:	06dd      	lsls	r5, r3, #27
 800478a:	d411      	bmi.n	80047b0 <__swsetup_r+0x50>
 800478c:	2309      	movs	r3, #9
 800478e:	6033      	str	r3, [r6, #0]
 8004790:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004794:	81a3      	strh	r3, [r4, #12]
 8004796:	f04f 30ff 	mov.w	r0, #4294967295
 800479a:	e03e      	b.n	800481a <__swsetup_r+0xba>
 800479c:	4b25      	ldr	r3, [pc, #148]	; (8004834 <__swsetup_r+0xd4>)
 800479e:	429c      	cmp	r4, r3
 80047a0:	d101      	bne.n	80047a6 <__swsetup_r+0x46>
 80047a2:	68ac      	ldr	r4, [r5, #8]
 80047a4:	e7eb      	b.n	800477e <__swsetup_r+0x1e>
 80047a6:	4b24      	ldr	r3, [pc, #144]	; (8004838 <__swsetup_r+0xd8>)
 80047a8:	429c      	cmp	r4, r3
 80047aa:	bf08      	it	eq
 80047ac:	68ec      	ldreq	r4, [r5, #12]
 80047ae:	e7e6      	b.n	800477e <__swsetup_r+0x1e>
 80047b0:	0758      	lsls	r0, r3, #29
 80047b2:	d512      	bpl.n	80047da <__swsetup_r+0x7a>
 80047b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047b6:	b141      	cbz	r1, 80047ca <__swsetup_r+0x6a>
 80047b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047bc:	4299      	cmp	r1, r3
 80047be:	d002      	beq.n	80047c6 <__swsetup_r+0x66>
 80047c0:	4630      	mov	r0, r6
 80047c2:	f7fe fb5b 	bl	8002e7c <_free_r>
 80047c6:	2300      	movs	r3, #0
 80047c8:	6363      	str	r3, [r4, #52]	; 0x34
 80047ca:	89a3      	ldrh	r3, [r4, #12]
 80047cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80047d0:	81a3      	strh	r3, [r4, #12]
 80047d2:	2300      	movs	r3, #0
 80047d4:	6063      	str	r3, [r4, #4]
 80047d6:	6923      	ldr	r3, [r4, #16]
 80047d8:	6023      	str	r3, [r4, #0]
 80047da:	89a3      	ldrh	r3, [r4, #12]
 80047dc:	f043 0308 	orr.w	r3, r3, #8
 80047e0:	81a3      	strh	r3, [r4, #12]
 80047e2:	6923      	ldr	r3, [r4, #16]
 80047e4:	b94b      	cbnz	r3, 80047fa <__swsetup_r+0x9a>
 80047e6:	89a3      	ldrh	r3, [r4, #12]
 80047e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80047ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047f0:	d003      	beq.n	80047fa <__swsetup_r+0x9a>
 80047f2:	4621      	mov	r1, r4
 80047f4:	4630      	mov	r0, r6
 80047f6:	f000 f907 	bl	8004a08 <__smakebuf_r>
 80047fa:	89a0      	ldrh	r0, [r4, #12]
 80047fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004800:	f010 0301 	ands.w	r3, r0, #1
 8004804:	d00a      	beq.n	800481c <__swsetup_r+0xbc>
 8004806:	2300      	movs	r3, #0
 8004808:	60a3      	str	r3, [r4, #8]
 800480a:	6963      	ldr	r3, [r4, #20]
 800480c:	425b      	negs	r3, r3
 800480e:	61a3      	str	r3, [r4, #24]
 8004810:	6923      	ldr	r3, [r4, #16]
 8004812:	b943      	cbnz	r3, 8004826 <__swsetup_r+0xc6>
 8004814:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004818:	d1ba      	bne.n	8004790 <__swsetup_r+0x30>
 800481a:	bd70      	pop	{r4, r5, r6, pc}
 800481c:	0781      	lsls	r1, r0, #30
 800481e:	bf58      	it	pl
 8004820:	6963      	ldrpl	r3, [r4, #20]
 8004822:	60a3      	str	r3, [r4, #8]
 8004824:	e7f4      	b.n	8004810 <__swsetup_r+0xb0>
 8004826:	2000      	movs	r0, #0
 8004828:	e7f7      	b.n	800481a <__swsetup_r+0xba>
 800482a:	bf00      	nop
 800482c:	2000000c 	.word	0x2000000c
 8004830:	08005110 	.word	0x08005110
 8004834:	08005130 	.word	0x08005130
 8004838:	080050f0 	.word	0x080050f0

0800483c <__sflush_r>:
 800483c:	898a      	ldrh	r2, [r1, #12]
 800483e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004842:	4605      	mov	r5, r0
 8004844:	0710      	lsls	r0, r2, #28
 8004846:	460c      	mov	r4, r1
 8004848:	d458      	bmi.n	80048fc <__sflush_r+0xc0>
 800484a:	684b      	ldr	r3, [r1, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	dc05      	bgt.n	800485c <__sflush_r+0x20>
 8004850:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004852:	2b00      	cmp	r3, #0
 8004854:	dc02      	bgt.n	800485c <__sflush_r+0x20>
 8004856:	2000      	movs	r0, #0
 8004858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800485c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800485e:	2e00      	cmp	r6, #0
 8004860:	d0f9      	beq.n	8004856 <__sflush_r+0x1a>
 8004862:	2300      	movs	r3, #0
 8004864:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004868:	682f      	ldr	r7, [r5, #0]
 800486a:	602b      	str	r3, [r5, #0]
 800486c:	d032      	beq.n	80048d4 <__sflush_r+0x98>
 800486e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004870:	89a3      	ldrh	r3, [r4, #12]
 8004872:	075a      	lsls	r2, r3, #29
 8004874:	d505      	bpl.n	8004882 <__sflush_r+0x46>
 8004876:	6863      	ldr	r3, [r4, #4]
 8004878:	1ac0      	subs	r0, r0, r3
 800487a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800487c:	b10b      	cbz	r3, 8004882 <__sflush_r+0x46>
 800487e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004880:	1ac0      	subs	r0, r0, r3
 8004882:	2300      	movs	r3, #0
 8004884:	4602      	mov	r2, r0
 8004886:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004888:	6a21      	ldr	r1, [r4, #32]
 800488a:	4628      	mov	r0, r5
 800488c:	47b0      	blx	r6
 800488e:	1c43      	adds	r3, r0, #1
 8004890:	89a3      	ldrh	r3, [r4, #12]
 8004892:	d106      	bne.n	80048a2 <__sflush_r+0x66>
 8004894:	6829      	ldr	r1, [r5, #0]
 8004896:	291d      	cmp	r1, #29
 8004898:	d82c      	bhi.n	80048f4 <__sflush_r+0xb8>
 800489a:	4a2a      	ldr	r2, [pc, #168]	; (8004944 <__sflush_r+0x108>)
 800489c:	40ca      	lsrs	r2, r1
 800489e:	07d6      	lsls	r6, r2, #31
 80048a0:	d528      	bpl.n	80048f4 <__sflush_r+0xb8>
 80048a2:	2200      	movs	r2, #0
 80048a4:	6062      	str	r2, [r4, #4]
 80048a6:	04d9      	lsls	r1, r3, #19
 80048a8:	6922      	ldr	r2, [r4, #16]
 80048aa:	6022      	str	r2, [r4, #0]
 80048ac:	d504      	bpl.n	80048b8 <__sflush_r+0x7c>
 80048ae:	1c42      	adds	r2, r0, #1
 80048b0:	d101      	bne.n	80048b6 <__sflush_r+0x7a>
 80048b2:	682b      	ldr	r3, [r5, #0]
 80048b4:	b903      	cbnz	r3, 80048b8 <__sflush_r+0x7c>
 80048b6:	6560      	str	r0, [r4, #84]	; 0x54
 80048b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048ba:	602f      	str	r7, [r5, #0]
 80048bc:	2900      	cmp	r1, #0
 80048be:	d0ca      	beq.n	8004856 <__sflush_r+0x1a>
 80048c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048c4:	4299      	cmp	r1, r3
 80048c6:	d002      	beq.n	80048ce <__sflush_r+0x92>
 80048c8:	4628      	mov	r0, r5
 80048ca:	f7fe fad7 	bl	8002e7c <_free_r>
 80048ce:	2000      	movs	r0, #0
 80048d0:	6360      	str	r0, [r4, #52]	; 0x34
 80048d2:	e7c1      	b.n	8004858 <__sflush_r+0x1c>
 80048d4:	6a21      	ldr	r1, [r4, #32]
 80048d6:	2301      	movs	r3, #1
 80048d8:	4628      	mov	r0, r5
 80048da:	47b0      	blx	r6
 80048dc:	1c41      	adds	r1, r0, #1
 80048de:	d1c7      	bne.n	8004870 <__sflush_r+0x34>
 80048e0:	682b      	ldr	r3, [r5, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d0c4      	beq.n	8004870 <__sflush_r+0x34>
 80048e6:	2b1d      	cmp	r3, #29
 80048e8:	d001      	beq.n	80048ee <__sflush_r+0xb2>
 80048ea:	2b16      	cmp	r3, #22
 80048ec:	d101      	bne.n	80048f2 <__sflush_r+0xb6>
 80048ee:	602f      	str	r7, [r5, #0]
 80048f0:	e7b1      	b.n	8004856 <__sflush_r+0x1a>
 80048f2:	89a3      	ldrh	r3, [r4, #12]
 80048f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048f8:	81a3      	strh	r3, [r4, #12]
 80048fa:	e7ad      	b.n	8004858 <__sflush_r+0x1c>
 80048fc:	690f      	ldr	r7, [r1, #16]
 80048fe:	2f00      	cmp	r7, #0
 8004900:	d0a9      	beq.n	8004856 <__sflush_r+0x1a>
 8004902:	0793      	lsls	r3, r2, #30
 8004904:	680e      	ldr	r6, [r1, #0]
 8004906:	bf08      	it	eq
 8004908:	694b      	ldreq	r3, [r1, #20]
 800490a:	600f      	str	r7, [r1, #0]
 800490c:	bf18      	it	ne
 800490e:	2300      	movne	r3, #0
 8004910:	eba6 0807 	sub.w	r8, r6, r7
 8004914:	608b      	str	r3, [r1, #8]
 8004916:	f1b8 0f00 	cmp.w	r8, #0
 800491a:	dd9c      	ble.n	8004856 <__sflush_r+0x1a>
 800491c:	6a21      	ldr	r1, [r4, #32]
 800491e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004920:	4643      	mov	r3, r8
 8004922:	463a      	mov	r2, r7
 8004924:	4628      	mov	r0, r5
 8004926:	47b0      	blx	r6
 8004928:	2800      	cmp	r0, #0
 800492a:	dc06      	bgt.n	800493a <__sflush_r+0xfe>
 800492c:	89a3      	ldrh	r3, [r4, #12]
 800492e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004932:	81a3      	strh	r3, [r4, #12]
 8004934:	f04f 30ff 	mov.w	r0, #4294967295
 8004938:	e78e      	b.n	8004858 <__sflush_r+0x1c>
 800493a:	4407      	add	r7, r0
 800493c:	eba8 0800 	sub.w	r8, r8, r0
 8004940:	e7e9      	b.n	8004916 <__sflush_r+0xda>
 8004942:	bf00      	nop
 8004944:	20400001 	.word	0x20400001

08004948 <_fflush_r>:
 8004948:	b538      	push	{r3, r4, r5, lr}
 800494a:	690b      	ldr	r3, [r1, #16]
 800494c:	4605      	mov	r5, r0
 800494e:	460c      	mov	r4, r1
 8004950:	b913      	cbnz	r3, 8004958 <_fflush_r+0x10>
 8004952:	2500      	movs	r5, #0
 8004954:	4628      	mov	r0, r5
 8004956:	bd38      	pop	{r3, r4, r5, pc}
 8004958:	b118      	cbz	r0, 8004962 <_fflush_r+0x1a>
 800495a:	6983      	ldr	r3, [r0, #24]
 800495c:	b90b      	cbnz	r3, 8004962 <_fflush_r+0x1a>
 800495e:	f7fe fd3b 	bl	80033d8 <__sinit>
 8004962:	4b14      	ldr	r3, [pc, #80]	; (80049b4 <_fflush_r+0x6c>)
 8004964:	429c      	cmp	r4, r3
 8004966:	d11b      	bne.n	80049a0 <_fflush_r+0x58>
 8004968:	686c      	ldr	r4, [r5, #4]
 800496a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0ef      	beq.n	8004952 <_fflush_r+0xa>
 8004972:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004974:	07d0      	lsls	r0, r2, #31
 8004976:	d404      	bmi.n	8004982 <_fflush_r+0x3a>
 8004978:	0599      	lsls	r1, r3, #22
 800497a:	d402      	bmi.n	8004982 <_fflush_r+0x3a>
 800497c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800497e:	f7fe fdc9 	bl	8003514 <__retarget_lock_acquire_recursive>
 8004982:	4628      	mov	r0, r5
 8004984:	4621      	mov	r1, r4
 8004986:	f7ff ff59 	bl	800483c <__sflush_r>
 800498a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800498c:	07da      	lsls	r2, r3, #31
 800498e:	4605      	mov	r5, r0
 8004990:	d4e0      	bmi.n	8004954 <_fflush_r+0xc>
 8004992:	89a3      	ldrh	r3, [r4, #12]
 8004994:	059b      	lsls	r3, r3, #22
 8004996:	d4dd      	bmi.n	8004954 <_fflush_r+0xc>
 8004998:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800499a:	f7fe fdbc 	bl	8003516 <__retarget_lock_release_recursive>
 800499e:	e7d9      	b.n	8004954 <_fflush_r+0xc>
 80049a0:	4b05      	ldr	r3, [pc, #20]	; (80049b8 <_fflush_r+0x70>)
 80049a2:	429c      	cmp	r4, r3
 80049a4:	d101      	bne.n	80049aa <_fflush_r+0x62>
 80049a6:	68ac      	ldr	r4, [r5, #8]
 80049a8:	e7df      	b.n	800496a <_fflush_r+0x22>
 80049aa:	4b04      	ldr	r3, [pc, #16]	; (80049bc <_fflush_r+0x74>)
 80049ac:	429c      	cmp	r4, r3
 80049ae:	bf08      	it	eq
 80049b0:	68ec      	ldreq	r4, [r5, #12]
 80049b2:	e7da      	b.n	800496a <_fflush_r+0x22>
 80049b4:	08005110 	.word	0x08005110
 80049b8:	08005130 	.word	0x08005130
 80049bc:	080050f0 	.word	0x080050f0

080049c0 <__swhatbuf_r>:
 80049c0:	b570      	push	{r4, r5, r6, lr}
 80049c2:	460e      	mov	r6, r1
 80049c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049c8:	2900      	cmp	r1, #0
 80049ca:	b096      	sub	sp, #88	; 0x58
 80049cc:	4614      	mov	r4, r2
 80049ce:	461d      	mov	r5, r3
 80049d0:	da07      	bge.n	80049e2 <__swhatbuf_r+0x22>
 80049d2:	2300      	movs	r3, #0
 80049d4:	602b      	str	r3, [r5, #0]
 80049d6:	89b3      	ldrh	r3, [r6, #12]
 80049d8:	061a      	lsls	r2, r3, #24
 80049da:	d410      	bmi.n	80049fe <__swhatbuf_r+0x3e>
 80049dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049e0:	e00e      	b.n	8004a00 <__swhatbuf_r+0x40>
 80049e2:	466a      	mov	r2, sp
 80049e4:	f000 f890 	bl	8004b08 <_fstat_r>
 80049e8:	2800      	cmp	r0, #0
 80049ea:	dbf2      	blt.n	80049d2 <__swhatbuf_r+0x12>
 80049ec:	9a01      	ldr	r2, [sp, #4]
 80049ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80049f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80049f6:	425a      	negs	r2, r3
 80049f8:	415a      	adcs	r2, r3
 80049fa:	602a      	str	r2, [r5, #0]
 80049fc:	e7ee      	b.n	80049dc <__swhatbuf_r+0x1c>
 80049fe:	2340      	movs	r3, #64	; 0x40
 8004a00:	2000      	movs	r0, #0
 8004a02:	6023      	str	r3, [r4, #0]
 8004a04:	b016      	add	sp, #88	; 0x58
 8004a06:	bd70      	pop	{r4, r5, r6, pc}

08004a08 <__smakebuf_r>:
 8004a08:	898b      	ldrh	r3, [r1, #12]
 8004a0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004a0c:	079d      	lsls	r5, r3, #30
 8004a0e:	4606      	mov	r6, r0
 8004a10:	460c      	mov	r4, r1
 8004a12:	d507      	bpl.n	8004a24 <__smakebuf_r+0x1c>
 8004a14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004a18:	6023      	str	r3, [r4, #0]
 8004a1a:	6123      	str	r3, [r4, #16]
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	6163      	str	r3, [r4, #20]
 8004a20:	b002      	add	sp, #8
 8004a22:	bd70      	pop	{r4, r5, r6, pc}
 8004a24:	ab01      	add	r3, sp, #4
 8004a26:	466a      	mov	r2, sp
 8004a28:	f7ff ffca 	bl	80049c0 <__swhatbuf_r>
 8004a2c:	9900      	ldr	r1, [sp, #0]
 8004a2e:	4605      	mov	r5, r0
 8004a30:	4630      	mov	r0, r6
 8004a32:	f7fe fa73 	bl	8002f1c <_malloc_r>
 8004a36:	b948      	cbnz	r0, 8004a4c <__smakebuf_r+0x44>
 8004a38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a3c:	059a      	lsls	r2, r3, #22
 8004a3e:	d4ef      	bmi.n	8004a20 <__smakebuf_r+0x18>
 8004a40:	f023 0303 	bic.w	r3, r3, #3
 8004a44:	f043 0302 	orr.w	r3, r3, #2
 8004a48:	81a3      	strh	r3, [r4, #12]
 8004a4a:	e7e3      	b.n	8004a14 <__smakebuf_r+0xc>
 8004a4c:	4b0d      	ldr	r3, [pc, #52]	; (8004a84 <__smakebuf_r+0x7c>)
 8004a4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004a50:	89a3      	ldrh	r3, [r4, #12]
 8004a52:	6020      	str	r0, [r4, #0]
 8004a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a58:	81a3      	strh	r3, [r4, #12]
 8004a5a:	9b00      	ldr	r3, [sp, #0]
 8004a5c:	6163      	str	r3, [r4, #20]
 8004a5e:	9b01      	ldr	r3, [sp, #4]
 8004a60:	6120      	str	r0, [r4, #16]
 8004a62:	b15b      	cbz	r3, 8004a7c <__smakebuf_r+0x74>
 8004a64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a68:	4630      	mov	r0, r6
 8004a6a:	f000 f85f 	bl	8004b2c <_isatty_r>
 8004a6e:	b128      	cbz	r0, 8004a7c <__smakebuf_r+0x74>
 8004a70:	89a3      	ldrh	r3, [r4, #12]
 8004a72:	f023 0303 	bic.w	r3, r3, #3
 8004a76:	f043 0301 	orr.w	r3, r3, #1
 8004a7a:	81a3      	strh	r3, [r4, #12]
 8004a7c:	89a0      	ldrh	r0, [r4, #12]
 8004a7e:	4305      	orrs	r5, r0
 8004a80:	81a5      	strh	r5, [r4, #12]
 8004a82:	e7cd      	b.n	8004a20 <__smakebuf_r+0x18>
 8004a84:	08003371 	.word	0x08003371

08004a88 <memmove>:
 8004a88:	4288      	cmp	r0, r1
 8004a8a:	b510      	push	{r4, lr}
 8004a8c:	eb01 0402 	add.w	r4, r1, r2
 8004a90:	d902      	bls.n	8004a98 <memmove+0x10>
 8004a92:	4284      	cmp	r4, r0
 8004a94:	4623      	mov	r3, r4
 8004a96:	d807      	bhi.n	8004aa8 <memmove+0x20>
 8004a98:	1e43      	subs	r3, r0, #1
 8004a9a:	42a1      	cmp	r1, r4
 8004a9c:	d008      	beq.n	8004ab0 <memmove+0x28>
 8004a9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004aa2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004aa6:	e7f8      	b.n	8004a9a <memmove+0x12>
 8004aa8:	4402      	add	r2, r0
 8004aaa:	4601      	mov	r1, r0
 8004aac:	428a      	cmp	r2, r1
 8004aae:	d100      	bne.n	8004ab2 <memmove+0x2a>
 8004ab0:	bd10      	pop	{r4, pc}
 8004ab2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ab6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004aba:	e7f7      	b.n	8004aac <memmove+0x24>

08004abc <_realloc_r>:
 8004abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004abe:	4607      	mov	r7, r0
 8004ac0:	4614      	mov	r4, r2
 8004ac2:	460e      	mov	r6, r1
 8004ac4:	b921      	cbnz	r1, 8004ad0 <_realloc_r+0x14>
 8004ac6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004aca:	4611      	mov	r1, r2
 8004acc:	f7fe ba26 	b.w	8002f1c <_malloc_r>
 8004ad0:	b922      	cbnz	r2, 8004adc <_realloc_r+0x20>
 8004ad2:	f7fe f9d3 	bl	8002e7c <_free_r>
 8004ad6:	4625      	mov	r5, r4
 8004ad8:	4628      	mov	r0, r5
 8004ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004adc:	f000 f836 	bl	8004b4c <_malloc_usable_size_r>
 8004ae0:	42a0      	cmp	r0, r4
 8004ae2:	d20f      	bcs.n	8004b04 <_realloc_r+0x48>
 8004ae4:	4621      	mov	r1, r4
 8004ae6:	4638      	mov	r0, r7
 8004ae8:	f7fe fa18 	bl	8002f1c <_malloc_r>
 8004aec:	4605      	mov	r5, r0
 8004aee:	2800      	cmp	r0, #0
 8004af0:	d0f2      	beq.n	8004ad8 <_realloc_r+0x1c>
 8004af2:	4631      	mov	r1, r6
 8004af4:	4622      	mov	r2, r4
 8004af6:	f7fe f99b 	bl	8002e30 <memcpy>
 8004afa:	4631      	mov	r1, r6
 8004afc:	4638      	mov	r0, r7
 8004afe:	f7fe f9bd 	bl	8002e7c <_free_r>
 8004b02:	e7e9      	b.n	8004ad8 <_realloc_r+0x1c>
 8004b04:	4635      	mov	r5, r6
 8004b06:	e7e7      	b.n	8004ad8 <_realloc_r+0x1c>

08004b08 <_fstat_r>:
 8004b08:	b538      	push	{r3, r4, r5, lr}
 8004b0a:	4d07      	ldr	r5, [pc, #28]	; (8004b28 <_fstat_r+0x20>)
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	4604      	mov	r4, r0
 8004b10:	4608      	mov	r0, r1
 8004b12:	4611      	mov	r1, r2
 8004b14:	602b      	str	r3, [r5, #0]
 8004b16:	f7fc ff08 	bl	800192a <_fstat>
 8004b1a:	1c43      	adds	r3, r0, #1
 8004b1c:	d102      	bne.n	8004b24 <_fstat_r+0x1c>
 8004b1e:	682b      	ldr	r3, [r5, #0]
 8004b20:	b103      	cbz	r3, 8004b24 <_fstat_r+0x1c>
 8004b22:	6023      	str	r3, [r4, #0]
 8004b24:	bd38      	pop	{r3, r4, r5, pc}
 8004b26:	bf00      	nop
 8004b28:	200000a8 	.word	0x200000a8

08004b2c <_isatty_r>:
 8004b2c:	b538      	push	{r3, r4, r5, lr}
 8004b2e:	4d06      	ldr	r5, [pc, #24]	; (8004b48 <_isatty_r+0x1c>)
 8004b30:	2300      	movs	r3, #0
 8004b32:	4604      	mov	r4, r0
 8004b34:	4608      	mov	r0, r1
 8004b36:	602b      	str	r3, [r5, #0]
 8004b38:	f7fc ff07 	bl	800194a <_isatty>
 8004b3c:	1c43      	adds	r3, r0, #1
 8004b3e:	d102      	bne.n	8004b46 <_isatty_r+0x1a>
 8004b40:	682b      	ldr	r3, [r5, #0]
 8004b42:	b103      	cbz	r3, 8004b46 <_isatty_r+0x1a>
 8004b44:	6023      	str	r3, [r4, #0]
 8004b46:	bd38      	pop	{r3, r4, r5, pc}
 8004b48:	200000a8 	.word	0x200000a8

08004b4c <_malloc_usable_size_r>:
 8004b4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b50:	1f18      	subs	r0, r3, #4
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	bfbc      	itt	lt
 8004b56:	580b      	ldrlt	r3, [r1, r0]
 8004b58:	18c0      	addlt	r0, r0, r3
 8004b5a:	4770      	bx	lr

08004b5c <_init>:
 8004b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b5e:	bf00      	nop
 8004b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b62:	bc08      	pop	{r3}
 8004b64:	469e      	mov	lr, r3
 8004b66:	4770      	bx	lr

08004b68 <_fini>:
 8004b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b6a:	bf00      	nop
 8004b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b6e:	bc08      	pop	{r3}
 8004b70:	469e      	mov	lr, r3
 8004b72:	4770      	bx	lr
